import components.map.Map;
import components.map.Map1L;
import components.queue.Queue;
import components.queue.Queue1L;
import components.set.Set;
import components.set.Set1L;
import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;

/**
 * a Java program that counts word occurrences in a given input file and outputs
 * an HTML document with a table of the words and counts listed in alphabetical
 * order.
 *
 * @author Charan
 */
public final class WordCount {

    /**
     * Autogenerated Method.
     */
    private WordCount() {
    }

    /**
     * puts each character of a given string into a set.
     *
     * @param s
     *            the given {@code String}
     * @param set
     *            the {@code Set} to be replaced
     * @replaces set
     */
    static void makeSetfromString(String s, Set<Character> set) {

        for (int i = 0; i < s.length(); i++) {
            if (!set.contains(s.charAt(i))) {
                set.add(s.charAt(i));
            }
        }
    }

    /**
     * Returns a word from the input string, each separated by a separator
     *
     * @param inputText
     *            the String that words will be extracted from
     * @param position
     *            the initial position in the String that starts searching
     * @param separators
     *            a set of separators that separate "words"
     * @param finalPos
     *            copy back the endPos to the parameter
     * @return return the first "word" appears in the String
     */
     private static String nextWord(String inputText, int position,
            Set<Character> separator, int[] finalPos) {
          int startPos = position;
          int endPos = position;

          // Skip initial separators
          while (startPos < inputText.length()            && separator.contains(inputText.charAt(startPos))) {
              startPos++;
            }
    
            endPos = startPos;
    
            // Find the end of the word
            while (endPos < inputText.length()
                    && !separator.contains(inputText.charAt(endPos))) {
                endPos++;
            }
    
            // Update the final position
            finalPos[0] = endPos;
    
            // Return the word, or an empty string if no word is found
            return startPos < inputText.length()
                    ? inputText.substring(startPos, endPos)
                    : "";
    }

    /**
     * Generates a map to store the words and the number of times of appearance.
     *
     * @param in
     *            the reader of the input text file
     * @param separators
     *            a set of separators to separate words
     * @return return a map with words and number of appearance
     */
    private static Map<String, Integer> generateMap(SimpleReader in,
            Set<Character> separators) {

        Map<String, Integer> map = new Map1L<>();
        String nextLine = ""; //the line of String that simple reader reads
        String nextWord = ""; //the word returned from the line
        int index = 0; //the position of the pointer
        int[] arr = new int[1]; //the end position
        while (!in.atEOS()) {
            nextLine = in.nextLine();
            while (index < nextLine.length()) {
                nextWord = nextWord(nextLine, index, separators, arr);
                if (map.hasKey(nextWord)) {
                    map.replaceValue(nextWord, map.value(nextWord) + 1);
                } else {
                    map.add(nextWord, 1);
                }
                index = arr[0] + 1; //start search the next word from the last end point
            }
            index = 0;
        }
        return map;
    }

    //private static void

    /**
     * Method to generate the HTML page with table of word counts
     *
     * @param name
     *            the output file name
     * @param in
     *            the input file name
     * @param map
     *            stores words
     */
    private static void processPage(String name, String in,
            Map<String, Integer> map) {

        SimpleWriter out = new SimpleWriter1L(name);
        Queue<String> list = new Queue1L<>();
        Map<String, Integer> tempMap = map.newInstance();
        tempMap.transferFrom(map);

        /*
         * Iterate over the map
         */
        while (tempMap.size() > 0) {
            Map.Pair<String, Integer> nextPair = tempMap.removeAny();
            list.enqueue(nextPair.key());
            map.add(nextPair.key(), nextPair.value());
        }

        out.println("<html>" + "<head>" + "<title>");
        out.println("Words Counted: " + in);
        out.println("</title>" + "</head>" + "<body>");
        out.println("<h2>" + "Words Counted: " + in + "</h2>");
        out.println("<hr />" + "<table border =\"2\">");
        out.println("<tr>" + "<th>" + "Words" + "</th>" + "<th>" + "Count"
                + "</th>" + "</tr>");

        while (list.length() > 0) {

            out.println("<tr>" + "<td>");

            out.print(list.dequeue());
            out.println("</td>" + "<td>");
            out.print(map.value(list.dequeue()));
            out.println("</td>" + "</tr>");

        }

        out.println("</table> + </body> + </html>");

        out.close();
    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {

        SimpleReader in = new SimpleReader1L();
        SimpleWriter write = new SimpleWriter1L();

        /*
         * Ask for the name for input and output file name
         */
        write.println("Please type the name of your input file");
        String inputName = in.nextLine();
        write.println(
                "Please provide the name you want for your output html file");
        String outputName = in.nextLine();
        SimpleReader read = new SimpleReader1L(inputName);

        Set<Character> characterSet = new Set1L<>();
        makeSetfromString("! ,.-\";_?<>", characterSet); //create separator set
        Map<String, Integer> repository = generateMap(read, characterSet);

        processPage(outputName, inputName, repository);

        /*
         * Close streams
         */
        in.close();
        write.close();
    }
}
