!SESSION 2024-01-18 17:49:06.309 -----------------------------------------------
eclipse.buildId=4.28.0.20230608-1200
java.version=17.0.9
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product -data file:/C:/Users/efris/Desktop/Workspace_II/workspace/ -product org.eclipse.epp.package.java.product

This is a continuation of log file C:\Users\efris\Desktop\Workspace_II\workspace\.metadata\.bak_0.log
Created Time: 2024-01-19 02:37:02.048

!ENTRY org.eclipse.jdt.ui 4 2 2024-01-19 02:37:02.059
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2024-01-19 02:37:02.064
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2024-01-19 02:37:02.091
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import components.map.Map;
import components.map.Map1L;
import components.sequence.Sequence;
import components.sequence.Sequence1L;
import components.set.Set;
import components.set.Set1L;
import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;

/**
 * Simple HelloWorld program (clear of Checkstyle and SpotBugs warnings).
 *
 * @author Evan Frisbie
 */
public final class WordCounter {

    /**
     * No argument constructor--private to prevent instantiation.
     */
    private WordCounter() {
        // no code needed here
    }

    /**
     * Parsing function intended to parse words from input file into a sequence.
     * Assumes that words will be split my non-alphabetic characters. Assumes
     * that no word is split between lines.
     *
     * @param in
     *            The system.input line connected to the text file.
     *
     * @return wordList The list of words found by the parsing function.
     */
    private static Sequence<String> parser(SimpleReader in) {
        Sequence<String> words = new Sequence1L<String>();
        boolean atEnd = false;

        while (!atEnd) {
            String line = in.nextLine();
            int i = 0;

            while (line.length() != 0) {
                if (i >= line.length()) {
                    words.add(0, line);
                    line = "";
                } else if (!Character.isAlphabetic(line.charAt(i))) {
                    if (i != 0) {
                        String word = line.substring(0, i);
                        words.add(0, word.toLowerCase());

                        line = line.substring(i);
                        i = -1;
                    } else if (i == 0) {
                        line = line.substring(1);
                        i = -1;
                    }
                }
                i++;
            }
            atEnd = in.atEOS();
        }

        return words;
    }

    /**
     * Sort function sorts the words in the given sequence alphabetically and
     * then returns the sorted sequence.
     *
     * @param words
     *            The sequence of words found in the input file.
     *
     * @return words The sorted sequence of words.
     */
    private static Sequence<String> sort(Sequence<String> words) {
        boolean sorted = false;

        while (!sorted) {
            int length = words.length();
            int sortedLength = 0;

            for (int i = 0; i < words.length() - 1; i++) {
                for (int j = 0; j < words.length(); j++) {
                    if (words.entry(i).charAt(0) < words.entry(j).charAt(0)) {

                        String word1 = words.entry(i);
                        words.replaceEntry(i, words.entry(j));
                        words.replaceEntry(j, word1);

                    } else if (words.entry(i).equals(words.entry(j)) || words
                            .entry(i).charAt(0) > words.entry(j).charAt(0)) {
                        sortedLength++;
                    } else if (words.entry(i).charAt(0) == words.entry(j)
                            .charAt(0)) {
                        if (words.entry(i).length() < words.entry(j).length()) {
                            String word1 = words.entry(i);
                            words.replaceEntry(i, words.entry(j));
                            words.replaceEntry(j, word1);
                        } else if {
           
                                || words.entry(i).charAt(1) < words.entry(j)
                                        .charAt(1)) {

                            String word1 = words.entry(i);
                            words.replaceEntry(i, words.entry(j));
                            words.replaceEntry(j, word1);

                        }
                    }
                }
            }

            if (length < sortedLength) {
                sorted = true;
            }

        }

        Sequence<String> sortedWords = new Sequence1L<String>();
        Set<String> totalWords = new Set1L<String>();

        for (int k = 0; k < words.length(); k++) {
            if (sortedWords.length() == 0) {
                sortedWords.add(0, words.entry(k));
                totalWords.add(words.entry(k));
            } else if (!totalWords.contains(words.entry(k))) {
                sortedWords.add(0, words.entry(k));
                totalWords.add(words.entry(k));
            }
        }

        sortedWords.flip();
        return sortedWords;
    }

    /**
     * Counting function intended to count the occurrences of each word in the
     * sequence and return a list of simple objects each containing the given
     * word and the number of times it was seen.
     *
     * @param words
     *            The sequence of words parsed from the text file.
     *
     * @return occurrences The list of maps each containing the word and its
     *         number of occurrences.
     */
    private static Map<String, Integer> counter(Sequence<String> words) {
        Map<String, Integer> occurrences = new Map1L<String, Integer>();

        for (int i = 0; i < words.length(); i++) {
            if (occurrences.hasKey(words.entry(i))) {
                int value = occurrences.value(words.entry(i));
                occurrences.remove(words.entry(i));
                occurrences.add(words.entry(i), value + 1);
            } else if (!occurrences.hasKey(words.entry(i))) {
                occurrences.add(words.entry(i), 1);
            }
        }

        return occurrences;
    }

    /**
     * Output function creates the output HTML file that is returned to the
     * client for UI viewing of the processed information.
     *
     * @param occurrences
     *            The list of maps containing the given words and their
     *            occurrences.
     *
     * @param name
     *            The name of the output file for the title.
     * @param out
     *            The system.output line for writing to a receiving file.
     */
    private static void outputFunction(Map<String, Integer> occurrences,
            String name, SimpleWriter out, Sequence<String> sorted) {

        out.println("<!DOCTYPE html>\r\n" + "<html lang=\"en\">\r\n"
                + "<head>\r\n" + "    <meta charset=\"UTF-8\">\r\n"
                + "    <meta name=\"viewport\" content=\"width=device-width,"
                + "initial-scale=1.0\">\r\n" + "    <title>Document</title>\r\n"
                + "</head>\r\n" + "<body><h1>" + name
                + "</h1><table><tr><th>Word</th><th>Occurrences</th></tr>");

        for (int i = 0; i < sorted.length(); i++) {
            out.println("<tr><td>" + sorted.entry(i) + "</td><td>"
                    + occurrences.value(sorted.entry(i)) + "</td></tr>");
        }

        out.println("</table></body></html>");

    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        out.println("Input File Name: ");
        String inputFile = in.nextLine();
        out.println("Output File Name: ");
        String outputFile = in.nextLine();

        SimpleReader input = new SimpleReader1L(inputFile);
        SimpleWriter output = new SimpleWriter1L(outputFile);

        Sequence<String> words = parser(input);
        Sequence<String> sorted = sort(words);
        Map<String, Integer> occurrences = counter(words);

        out.println(words);
        out.println(sorted);

        outputFunction(occurrences, outputFile, output, sorted);

        in.close();
        out.close();
    }

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-01-19 02:37:02.092
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-01-19 02:37:02.092
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-01-19 02:37:08.458
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import components.map.Map;
import components.map.Map1L;
import components.sequence.Sequence;
import components.sequence.Sequence1L;
import components.set.Set;
import components.set.Set1L;
import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;

/**
 * Simple HelloWorld program (clear of Checkstyle and SpotBugs warnings).
 *
 * @author Evan Frisbie
 */
public final class WordCounter {

    /**
     * No argument constructor--private to prevent instantiation.
     */
    private WordCounter() {
        // no code needed here
    }

    /**
     * Parsing function intended to parse words from input file into a sequence.
     * Assumes that words will be split my non-alphabetic characters. Assumes
     * that no word is split between lines.
     *
     * @param in
     *            The system.input line connected to the text file.
     *
     * @return wordList The list of words found by the parsing function.
     */
    private static Sequence<String> parser(SimpleReader in) {
        Sequence<String> words = new Sequence1L<String>();
        boolean atEnd = false;

        while (!atEnd) {
            String line = in.nextLine();
            int i = 0;

            while (line.length() != 0) {
                if (i >= line.length()) {
                    words.add(0, line);
                    line = "";
                } else if (!Character.isAlphabetic(line.charAt(i))) {
                    if (i != 0) {
                        String word = line.substring(0, i);
                        words.add(0, word.toLowerCase());

                        line = line.substring(i);
                        i = -1;
                    } else if (i == 0) {
                        line = line.substring(1);
                        i = -1;
                    }
                }
                i++;
            }
            atEnd = in.atEOS();
        }

        return words;
    }

    /**
     * Sort function sorts the words in the given sequence alphabetically and
     * then returns the sorted sequence.
     *
     * @param words
     *            The sequence of words found in the input file.
     *
     * @return words The sorted sequence of words.
     */
    private static Sequence<String> sort(Sequence<String> words) {
        boolean sorted = false;

        while (!sorted) {
            int length = words.length();
            int sortedLength = 0;

            for (int i = 0; i < words.length() - 1; i++) {
                for (int j = 0; j < words.length(); j++) {
                    if (words.entry(i).charAt(0) < words.entry(j).charAt(0)) {

                        String word1 = words.entry(i);
                        words.replaceEntry(i, words.entry(j));
                        words.replaceEntry(j, word1);

                    } else if (words.entry(i).equals(words.entry(j)) || words
                            .entry(i).charAt(0) > words.entry(j).charAt(0)) {
                        sortedLength++;
                    } else if (words.entry(i).charAt(0) == words.entry(j)
                            .charAt(0)) {
                        if (words.entry(i).length() < words.entry(j).length()) {
                            String word1 = words.entry(i);
                            words.replaceEntry(i, words.entry(j));
                            words.replaceEntry(j, word1);
                        } else 
           
                                || words.entry(i).charAt(1) < words.entry(j)
                                        .charAt(1)) {

                            String word1 = words.entry(i);
                            words.replaceEntry(i, words.entry(j));
                            words.replaceEntry(j, word1);

                        }
                    }
                }
            }

            if (length < sortedLength) {
                sorted = true;
            }

        }

        Sequence<String> sortedWords = new Sequence1L<String>();
        Set<String> totalWords = new Set1L<String>();

        for (int k = 0; k < words.length(); k++) {
            if (sortedWords.length() == 0) {
                sortedWords.add(0, words.entry(k));
                totalWords.add(words.entry(k));
            } else if (!totalWords.contains(words.entry(k))) {
                sortedWords.add(0, words.entry(k));
                totalWords.add(words.entry(k));
            }
        }

        sortedWords.flip();
        return sortedWords;
    }

    /**
     * Counting function intended to count the occurrences of each word in the
     * sequence and return a list of simple objects each containing the given
     * word and the number of times it was seen.
     *
     * @param words
     *            The sequence of words parsed from the text file.
     *
     * @return occurrences The list of maps each containing the word and its
     *         number of occurrences.
     */
    private static Map<String, Integer> counter(Sequence<String> words) {
        Map<String, Integer> occurrences = new Map1L<String, Integer>();

        for (int i = 0; i < words.length(); i++) {
            if (occurrences.hasKey(words.entry(i))) {
                int value = occurrences.value(words.entry(i));
                occurrences.remove(words.entry(i));
                occurrences.add(words.entry(i), value + 1);
            } else if (!occurrences.hasKey(words.entry(i))) {
                occurrences.add(words.entry(i), 1);
            }
        }

        return occurrences;
    }

    /**
     * Output function creates the output HTML file that is returned to the
     * client for UI viewing of the processed information.
     *
     * @param occurrences
     *            The list of maps containing the given words and their
     *            occurrences.
     *
     * @param name
     *            The name of the output file for the title.
     * @param out
     *            The system.output line for writing to a receiving file.
     */
    private static void outputFunction(Map<String, Integer> occurrences,
            String name, SimpleWriter out, Sequence<String> sorted) {

        out.println("<!DOCTYPE html>\r\n" + "<html lang=\"en\">\r\n"
                + "<head>\r\n" + "    <meta charset=\"UTF-8\">\r\n"
                + "    <meta name=\"viewport\" content=\"width=device-width,"
                + "initial-scale=1.0\">\r\n" + "    <title>Document</title>\r\n"
                + "</head>\r\n" + "<body><h1>" + name
                + "</h1><table><tr><th>Word</th><th>Occurrences</th></tr>");

        for (int i = 0; i < sorted.length(); i++) {
            out.println("<tr><td>" + sorted.entry(i) + "</td><td>"
                    + occurrences.value(sorted.entry(i)) + "</td></tr>");
        }

        out.println("</table></body></html>");

    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        out.println("Input File Name: ");
        String inputFile = in.nextLine();
        out.println("Output File Name: ");
        String outputFile = in.nextLine();

        SimpleReader input = new SimpleReader1L(inputFile);
        SimpleWriter output = new SimpleWriter1L(outputFile);

        Sequence<String> words = parser(input);
        Sequence<String> sorted = sort(words);
        Map<String, Integer> occurrences = counter(words);

        out.println(words);
        out.println(sorted);

        outputFunction(occurrences, outputFile, output, sorted);

        in.close();
        out.close();
    }

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2024-01-19 02:37:08.463
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2024-01-19 02:37:08.464
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2024-01-19 02:37:09.536
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import components.map.Map;
import components.map.Map1L;
import components.sequence.Sequence;
import components.sequence.Sequence1L;
import components.set.Set;
import components.set.Set1L;
import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;

/**
 * Simple HelloWorld program (clear of Checkstyle and SpotBugs warnings).
 *
 * @author Evan Frisbie
 */
public final class WordCounter {

    /**
     * No argument constructor--private to prevent instantiation.
     */
    private WordCounter() {
        // no code needed here
    }

    /**
     * Parsing function intended to parse words from input file into a sequence.
     * Assumes that words will be split my non-alphabetic characters. Assumes
     * that no word is split between lines.
     *
     * @param in
     *            The system.input line connected to the text file.
     *
     * @return wordList The list of words found by the parsing function.
     */
    private static Sequence<String> parser(SimpleReader in) {
        Sequence<String> words = new Sequence1L<String>();
        boolean atEnd = false;

        while (!atEnd) {
            String line = in.nextLine();
            int i = 0;

            while (line.length() != 0) {
                if (i >= line.length()) {
                    words.add(0, line);
                    line = "";
                } else if (!Character.isAlphabetic(line.charAt(i))) {
                    if (i != 0) {
                        String word = line.substring(0, i);
                        words.add(0, word.toLowerCase());

                        line = line.substring(i);
                        i = -1;
                    } else if (i == 0) {
                        line = line.substring(1);
                        i = -1;
                    }
                }
                i++;
            }
            atEnd = in.atEOS();
        }

        return words;
    }

    /**
     * Sort function sorts the words in the given sequence alphabetically and
     * then returns the sorted sequence.
     *
     * @param words
     *            The sequence of words found in the input file.
     *
     * @return words The sorted sequence of words.
     */
    private static Sequence<String> sort(Sequence<String> words) {
        boolean sorted = false;

        while (!sorted) {
            int length = words.length();
            int sortedLength = 0;

            for (int i = 0; i < words.length() - 1; i++) {
                for (int j = 0; j < words.length(); j++) {
                    if (words.entry(i).charAt(0) < words.entry(j).charAt(0)) {

                        String word1 = words.entry(i);
                        words.replaceEntry(i, words.entry(j));
                        words.replaceEntry(j, word1);

                    } else if (words.entry(i).equals(words.entry(j)) || words
                            .entry(i).charAt(0) > words.entry(j).charAt(0)) {
                        sortedLength++;
                    } else if (words.entry(i).charAt(0) == words.entry(j)
                            .charAt(0)) {
                        if (words.entry(i).length() < words.entry(j).length()) {
                            String word1 = words.entry(i);
                            words.replaceEntry(i, words.entry(j));
                            words.replaceEntry(j, word1);
                        } else 
           
                                || words.entry(i).charAt(1) < words.entry(j)
                                        .charAt(1)) {

                            String word1 = words.entry(i);
                            words.replaceEntry(i, words.entry(j));
                            words.replaceEntry(j, word1);

                        }
                    }
                }
            }

            if (length < sortedLength) {
                sorted = true;
            }

        }

        Sequence<String> sortedWords = new Sequence1L<String>();
        Set<String> totalWords = new Set1L<String>();

        for (int k = 0; k < words.length(); k++) {
            if (sortedWords.length() == 0) {
                sortedWords.add(0, words.entry(k));
                totalWords.add(words.entry(k));
            } else if (!totalWords.contains(words.entry(k))) {
                sortedWords.add(0, words.entry(k));
                totalWords.add(words.entry(k));
            }
        }

        sortedWords.flip();
        return sortedWords;
    }

    /**
     * Counting function intended to count the occurrences of each word in the
     * sequence and return a list of simple objects each containing the given
     * word and the number of times it was seen.
     *
     * @param words
     *            The sequence of words parsed from the text file.
     *
     * @return occurrences The list of maps each containing the word and its
     *         number of occurrences.
     */
    private static Map<String, Integer> counter(Sequence<String> words) {
        Map<String, Integer> occurrences = new Map1L<String, Integer>();

        for (int i = 0; i < words.length(); i++) {
            if (occurrences.hasKey(words.entry(i))) {
                int value = occurrences.value(words.entry(i));
                occurrences.remove(words.entry(i));
                occurrences.add(words.entry(i), value + 1);
            } else if (!occurrences.hasKey(words.entry(i))) {
                occurrences.add(words.entry(i), 1);
            }
        }

        return occurrences;
    }

    /**
     * Output function creates the output HTML file that is returned to the
     * client for UI viewing of the processed information.
     *
     * @param occurrences
     *            The list of maps containing the given words and their
     *            occurrences.
     *
     * @param name
     *            The name of the output file for the title.
     * @param out
     *            The system.output line for writing to a receiving file.
     */
    private static void outputFunction(Map<String, Integer> occurrences,
            String name, SimpleWriter out, Sequence<String> sorted) {

        out.println("<!DOCTYPE html>\r\n" + "<html lang=\"en\">\r\n"
                + "<head>\r\n" + "    <meta charset=\"UTF-8\">\r\n"
                + "    <meta name=\"viewport\" content=\"width=device-width,"
                + "initial-scale=1.0\">\r\n" + "    <title>Document</title>\r\n"
                + "</head>\r\n" + "<body><h1>" + name
                + "</h1><table><tr><th>Word</th><th>Occurrences</th></tr>");

        for (int i = 0; i < sorted.length(); i++) {
            out.println("<tr><td>" + sorted.entry(i) + "</td><td>"
                    + occurrences.value(sorted.entry(i)) + "</td></tr>");
        }

        out.println("</table></body></html>");

    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        out.println("Input File Name: ");
        String inputFile = in.nextLine();
        out.println("Output File Name: ");
        String outputFile = in.nextLine();

        SimpleReader input = new SimpleReader1L(inputFile);
        SimpleWriter output = new SimpleWriter1L(outputFile);

        Sequence<String> words = parser(input);
        Sequence<String> sorted = sort(words);
        Map<String, Integer> occurrences = counter(words);

        out.println(words);
        out.println(sorted);

        outputFunction(occurrences, outputFile, output, sorted);

        in.close();
        out.close();
    }

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-01-19 02:37:09.537
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-01-19 02:37:09.537
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-01-19 02:37:10.243
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import components.map.Map;
import components.map.Map1L;
import components.sequence.Sequence;
import components.sequence.Sequence1L;
import components.set.Set;
import components.set.Set1L;
import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;

/**
 * Simple HelloWorld program (clear of Checkstyle and SpotBugs warnings).
 *
 * @author Evan Frisbie
 */
public final class WordCounter {

    /**
     * No argument constructor--private to prevent instantiation.
     */
    private WordCounter() {
        // no code needed here
    }

    /**
     * Parsing function intended to parse words from input file into a sequence.
     * Assumes that words will be split my non-alphabetic characters. Assumes
     * that no word is split between lines.
     *
     * @param in
     *            The system.input line connected to the text file.
     *
     * @return wordList The list of words found by the parsing function.
     */
    private static Sequence<String> parser(SimpleReader in) {
        Sequence<String> words = new Sequence1L<String>();
        boolean atEnd = false;

        while (!atEnd) {
            String line = in.nextLine();
            int i = 0;

            while (line.length() != 0) {
                if (i >= line.length()) {
                    words.add(0, line);
                    line = "";
                } else if (!Character.isAlphabetic(line.charAt(i))) {
                    if (i != 0) {
                        String word = line.substring(0, i);
                        words.add(0, word.toLowerCase());

                        line = line.substring(i);
                        i = -1;
                    } else if (i == 0) {
                        line = line.substring(1);
                        i = -1;
                    }
                }
                i++;
            }
            atEnd = in.atEOS();
        }

        return words;
    }

    /**
     * Sort function sorts the words in the given sequence alphabetically and
     * then returns the sorted sequence.
     *
     * @param words
     *            The sequence of words found in the input file.
     *
     * @return words The sorted sequence of words.
     */
    private static Sequence<String> sort(Sequence<String> words) {
        boolean sorted = false;

        while (!sorted) {
            int length = words.length();
            int sortedLength = 0;

            for (int i = 0; i < words.length() - 1; i++) {
                for (int j = 0; j < words.length(); j++) {
                    if (words.entry(i).charAt(0) < words.entry(j).charAt(0)) {

                        String word1 = words.entry(i);
                        words.replaceEntry(i, words.entry(j));
                        words.replaceEntry(j, word1);

                    } else if (words.entry(i).equals(words.entry(j)) || words
                            .entry(i).charAt(0) > words.entry(j).charAt(0)) {
                        sortedLength++;
                    } else if (words.entry(i).charAt(0) == words.entry(j)
                            .charAt(0)) {
                        if (words.entry(i).length() < words.entry(j).length()) {
                            String word1 = words.entry(i);
                            words.replaceEntry(i, words.entry(j));
                            words.replaceEntry(j, word1);
                        } else {
           
                                || words.entry(i).charAt(1) < words.entry(j)
                                        .charAt(1)) {

                            String word1 = words.entry(i);
                            words.replaceEntry(i, words.entry(j));
                            words.replaceEntry(j, word1);

                        }
                    }
                }
            }

            if (length < sortedLength) {
                sorted = true;
            }

        }

        Sequence<String> sortedWords = new Sequence1L<String>();
        Set<String> totalWords = new Set1L<String>();

        for (int k = 0; k < words.length(); k++) {
            if (sortedWords.length() == 0) {
                sortedWords.add(0, words.entry(k));
                totalWords.add(words.entry(k));
            } else if (!totalWords.contains(words.entry(k))) {
                sortedWords.add(0, words.entry(k));
                totalWords.add(words.entry(k));
            }
        }

        sortedWords.flip();
        return sortedWords;
    }

    /**
     * Counting function intended to count the occurrences of each word in the
     * sequence and return a list of simple objects each containing the given
     * word and the number of times it was seen.
     *
     * @param words
     *            The sequence of words parsed from the text file.
     *
     * @return occurrences The list of maps each containing the word and its
     *         number of occurrences.
     */
    private static Map<String, Integer> counter(Sequence<String> words) {
        Map<String, Integer> occurrences = new Map1L<String, Integer>();

        for (int i = 0; i < words.length(); i++) {
            if (occurrences.hasKey(words.entry(i))) {
                int value = occurrences.value(words.entry(i));
                occurrences.remove(words.entry(i));
                occurrences.add(words.entry(i), value + 1);
            } else if (!occurrences.hasKey(words.entry(i))) {
                occurrences.add(words.entry(i), 1);
            }
        }

        return occurrences;
    }

    /**
     * Output function creates the output HTML file that is returned to the
     * client for UI viewing of the processed information.
     *
     * @param occurrences
     *            The list of maps containing the given words and their
     *            occurrences.
     *
     * @param name
     *            The name of the output file for the title.
     * @param out
     *            The system.output line for writing to a receiving file.
     */
    private static void outputFunction(Map<String, Integer> occurrences,
            String name, SimpleWriter out, Sequence<String> sorted) {

        out.println("<!DOCTYPE html>\r\n" + "<html lang=\"en\">\r\n"
                + "<head>\r\n" + "    <meta charset=\"UTF-8\">\r\n"
                + "    <meta name=\"viewport\" content=\"width=device-width,"
                + "initial-scale=1.0\">\r\n" + "    <title>Document</title>\r\n"
                + "</head>\r\n" + "<body><h1>" + name
                + "</h1><table><tr><th>Word</th><th>Occurrences</th></tr>");

        for (int i = 0; i < sorted.length(); i++) {
            out.println("<tr><td>" + sorted.entry(i) + "</td><td>"
                    + occurrences.value(sorted.entry(i)) + "</td></tr>");
        }

        out.println("</table></body></html>");

    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        out.println("Input File Name: ");
        String inputFile = in.nextLine();
        out.println("Output File Name: ");
        String outputFile = in.nextLine();

        SimpleReader input = new SimpleReader1L(inputFile);
        SimpleWriter output = new SimpleWriter1L(outputFile);

        Sequence<String> words = parser(input);
        Sequence<String> sorted = sort(words);
        Map<String, Integer> occurrences = counter(words);

        out.println(words);
        out.println(sorted);

        outputFunction(occurrences, outputFile, output, sorted);

        in.close();
        out.close();
    }

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2024-01-19 02:37:10.254
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2024-01-19 02:37:10.261
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2024-01-19 02:37:11.418
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import components.map.Map;
import components.map.Map1L;
import components.sequence.Sequence;
import components.sequence.Sequence1L;
import components.set.Set;
import components.set.Set1L;
import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;

/**
 * Simple HelloWorld program (clear of Checkstyle and SpotBugs warnings).
 *
 * @author Evan Frisbie
 */
public final class WordCounter {

    /**
     * No argument constructor--private to prevent instantiation.
     */
    private WordCounter() {
        // no code needed here
    }

    /**
     * Parsing function intended to parse words from input file into a sequence.
     * Assumes that words will be split my non-alphabetic characters. Assumes
     * that no word is split between lines.
     *
     * @param in
     *            The system.input line connected to the text file.
     *
     * @return wordList The list of words found by the parsing function.
     */
    private static Sequence<String> parser(SimpleReader in) {
        Sequence<String> words = new Sequence1L<String>();
        boolean atEnd = false;

        while (!atEnd) {
            String line = in.nextLine();
            int i = 0;

            while (line.length() != 0) {
                if (i >= line.length()) {
                    words.add(0, line);
                    line = "";
                } else if (!Character.isAlphabetic(line.charAt(i))) {
                    if (i != 0) {
                        String word = line.substring(0, i);
                        words.add(0, word.toLowerCase());

                        line = line.substring(i);
                        i = -1;
                    } else if (i == 0) {
                        line = line.substring(1);
                        i = -1;
                    }
                }
                i++;
            }
            atEnd = in.atEOS();
        }

        return words;
    }

    /**
     * Sort function sorts the words in the given sequence alphabetically and
     * then returns the sorted sequence.
     *
     * @param words
     *            The sequence of words found in the input file.
     *
     * @return words The sorted sequence of words.
     */
    private static Sequence<String> sort(Sequence<String> words) {
        boolean sorted = false;

        while (!sorted) {
            int length = words.length();
            int sortedLength = 0;

            for (int i = 0; i < words.length() - 1; i++) {
                for (int j = 0; j < words.length(); j++) {
                    if (words.entry(i).charAt(0) < words.entry(j).charAt(0)) {

                        String word1 = words.entry(i);
                        words.replaceEntry(i, words.entry(j));
                        words.replaceEntry(j, word1);

                    } else if (words.entry(i).equals(words.entry(j)) || words
                            .entry(i).charAt(0) > words.entry(j).charAt(0)) {
                        sortedLength++;
                    } else if (words.entry(i).charAt(0) == words.entry(j)
                            .charAt(0)) {
                        if (words.entry(i).length() < words.entry(j).length()) {
                            String word1 = words.entry(i);
                            words.replaceEntry(i, words.entry(j));
                            words.replaceEntry(j, word1);
                        } else {
           
                                || words.entry(i).charAt(1) < words.entry(j)
                                        .charAt(1)) {

                            String word1 = words.entry(i);
                            words.replaceEntry(i, words.entry(j));
                            words.replaceEntry(j, word1);

                        }
                    }
                }
            }

            if (length < sortedLength) {
                sorted = true;
            }

        }

        Sequence<String> sortedWords = new Sequence1L<String>();
        Set<String> totalWords = new Set1L<String>();

        for (int k = 0; k < words.length(); k++) {
            if (sortedWords.length() == 0) {
                sortedWords.add(0, words.entry(k));
                totalWords.add(words.entry(k));
            } else if (!totalWords.contains(words.entry(k))) {
                sortedWords.add(0, words.entry(k));
                totalWords.add(words.entry(k));
            }
        }

        sortedWords.flip();
        return sortedWords;
    }

    /**
     * Counting function intended to count the occurrences of each word in the
     * sequence and return a list of simple objects each containing the given
     * word and the number of times it was seen.
     *
     * @param words
     *            The sequence of words parsed from the text file.
     *
     * @return occurrences The list of maps each containing the word and its
     *         number of occurrences.
     */
    private static Map<String, Integer> counter(Sequence<String> words) {
        Map<String, Integer> occurrences = new Map1L<String, Integer>();

        for (int i = 0; i < words.length(); i++) {
            if (occurrences.hasKey(words.entry(i))) {
                int value = occurrences.value(words.entry(i));
                occurrences.remove(words.entry(i));
                occurrences.add(words.entry(i), value + 1);
            } else if (!occurrences.hasKey(words.entry(i))) {
                occurrences.add(words.entry(i), 1);
            }
        }

        return occurrences;
    }

    /**
     * Output function creates the output HTML file that is returned to the
     * client for UI viewing of the processed information.
     *
     * @param occurrences
     *            The list of maps containing the given words and their
     *            occurrences.
     *
     * @param name
     *            The name of the output file for the title.
     * @param out
     *            The system.output line for writing to a receiving file.
     */
    private static void outputFunction(Map<String, Integer> occurrences,
            String name, SimpleWriter out, Sequence<String> sorted) {

        out.println("<!DOCTYPE html>\r\n" + "<html lang=\"en\">\r\n"
                + "<head>\r\n" + "    <meta charset=\"UTF-8\">\r\n"
                + "    <meta name=\"viewport\" content=\"width=device-width,"
                + "initial-scale=1.0\">\r\n" + "    <title>Document</title>\r\n"
                + "</head>\r\n" + "<body><h1>" + name
                + "</h1><table><tr><th>Word</th><th>Occurrences</th></tr>");

        for (int i = 0; i < sorted.length(); i++) {
            out.println("<tr><td>" + sorted.entry(i) + "</td><td>"
                    + occurrences.value(sorted.entry(i)) + "</td></tr>");
        }

        out.println("</table></body></html>");

    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        out.println("Input File Name: ");
        String inputFile = in.nextLine();
        out.println("Output File Name: ");
        String outputFile = in.nextLine();

        SimpleReader input = new SimpleReader1L(inputFile);
        SimpleWriter output = new SimpleWriter1L(outputFile);

        Sequence<String> words = parser(input);
        Sequence<String> sorted = sort(words);
        Map<String, Integer> occurrences = counter(words);

        out.println(words);
        out.println(sorted);

        outputFunction(occurrences, outputFile, output, sorted);

        in.close();
        out.close();
    }

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-01-19 02:37:11.420
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-01-19 02:37:11.421
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-01-19 02:37:13.686
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import components.map.Map;
import components.map.Map1L;
import components.sequence.Sequence;
import components.sequence.Sequence1L;
import components.set.Set;
import components.set.Set1L;
import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;

/**
 * Simple HelloWorld program (clear of Checkstyle and SpotBugs warnings).
 *
 * @author Evan Frisbie
 */
public final class WordCounter {

    /**
     * No argument constructor--private to prevent instantiation.
     */
    private WordCounter() {
        // no code needed here
    }

    /**
     * Parsing function intended to parse words from input file into a sequence.
     * Assumes that words will be split my non-alphabetic characters. Assumes
     * that no word is split between lines.
     *
     * @param in
     *            The system.input line connected to the text file.
     *
     * @return wordList The list of words found by the parsing function.
     */
    private static Sequence<String> parser(SimpleReader in) {
        Sequence<String> words = new Sequence1L<String>();
        boolean atEnd = false;

        while (!atEnd) {
            String line = in.nextLine();
            int i = 0;

            while (line.length() != 0) {
                if (i >= line.length()) {
                    words.add(0, line);
                    line = "";
                } else if (!Character.isAlphabetic(line.charAt(i))) {
                    if (i != 0) {
                        String word = line.substring(0, i);
                        words.add(0, word.toLowerCase());

                        line = line.substring(i);
                        i = -1;
                    } else if (i == 0) {
                        line = line.substring(1);
                        i = -1;
                    }
                }
                i++;
            }
            atEnd = in.atEOS();
        }

        return words;
    }

    /**
     * Sort function sorts the words in the given sequence alphabetically and
     * then returns the sorted sequence.
     *
     * @param words
     *            The sequence of words found in the input file.
     *
     * @return words The sorted sequence of words.
     */
    private static Sequence<String> sort(Sequence<String> words) {
        boolean sorted = false;

        while (!sorted) {
            int length = words.length();
            int sortedLength = 0;

            for (int i = 0; i < words.length() - 1; i++) {
                for (int j = 0; j < words.length(); j++) {
                    if (words.entry(i).charAt(0) < words.entry(j).charAt(0)) {

                        String word1 = words.entry(i);
                        words.replaceEntry(i, words.entry(j));
                        words.replaceEntry(j, word1);

                    } else if (words.entry(i).equals(words.entry(j)) || words
                            .entry(i).charAt(0) > words.entry(j).charAt(0)) {
                        sortedLength++;
                    } else if (words.entry(i).charAt(0) == words.entry(j)
                            .charAt(0)) {
                        if (words.entry(i).length() < words.entry(j).length()) {
                            String word1 = words.entry(i);
                            words.replaceEntry(i, words.entry(j));
                            words.replaceEntry(j, word1);
                        } else {
           
                                || words.entry(i).charAt(1) < words.entry(j)
                                        .charAt(1)) {

                            String word1 = words.entry(i);
                            words.replaceEntry(i, words.entry(j));
                            words.replaceEntry(j, word1);
                            
                        }
                    }
                }
            }

            if (length < sortedLength) {
                sorted = true;
            }

        }

        Sequence<String> sortedWords = new Sequence1L<String>();
        Set<String> totalWords = new Set1L<String>();

        for (int k = 0; k < words.length(); k++) {
            if (sortedWords.length() == 0) {
                sortedWords.add(0, words.entry(k));
                totalWords.add(words.entry(k));
            } else if (!totalWords.contains(words.entry(k))) {
                sortedWords.add(0, words.entry(k));
                totalWords.add(words.entry(k));
            }
        }

        sortedWords.flip();
        return sortedWords;
    }

    /**
     * Counting function intended to count the occurrences of each word in the
     * sequence and return a list of simple objects each containing the given
     * word and the number of times it was seen.
     *
     * @param words
     *            The sequence of words parsed from the text file.
     *
     * @return occurrences The list of maps each containing the word and its
     *         number of occurrences.
     */
    private static Map<String, Integer> counter(Sequence<String> words) {
        Map<String, Integer> occurrences = new Map1L<String, Integer>();

        for (int i = 0; i < words.length(); i++) {
            if (occurrences.hasKey(words.entry(i))) {
                int value = occurrences.value(words.entry(i));
                occurrences.remove(words.entry(i));
                occurrences.add(words.entry(i), value + 1);
            } else if (!occurrences.hasKey(words.entry(i))) {
                occurrences.add(words.entry(i), 1);
            }
        }

        return occurrences;
    }

    /**
     * Output function creates the output HTML file that is returned to the
     * client for UI viewing of the processed information.
     *
     * @param occurrences
     *            The list of maps containing the given words and their
     *            occurrences.
     *
     * @param name
     *            The name of the output file for the title.
     * @param out
     *            The system.output line for writing to a receiving file.
     */
    private static void outputFunction(Map<String, Integer> occurrences,
            String name, SimpleWriter out, Sequence<String> sorted) {

        out.println("<!DOCTYPE html>\r\n" + "<html lang=\"en\">\r\n"
                + "<head>\r\n" + "    <meta charset=\"UTF-8\">\r\n"
                + "    <meta name=\"viewport\" content=\"width=device-width,"
                + "initial-scale=1.0\">\r\n" + "    <title>Document</title>\r\n"
                + "</head>\r\n" + "<body><h1>" + name
                + "</h1><table><tr><th>Word</th><th>Occurrences</th></tr>");

        for (int i = 0; i < sorted.length(); i++) {
            out.println("<tr><td>" + sorted.entry(i) + "</td><td>"
                    + occurrences.value(sorted.entry(i)) + "</td></tr>");
        }

        out.println("</table></body></html>");

    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        out.println("Input File Name: ");
        String inputFile = in.nextLine();
        out.println("Output File Name: ");
        String outputFile = in.nextLine();

        SimpleReader input = new SimpleReader1L(inputFile);
        SimpleWriter output = new SimpleWriter1L(outputFile);

        Sequence<String> words = parser(input);
        Sequence<String> sorted = sort(words);
        Map<String, Integer> occurrences = counter(words);

        out.println(words);
        out.println(sorted);

        outputFunction(occurrences, outputFile, output, sorted);

        in.close();
        out.close();
    }

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2024-01-19 02:37:13.695
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2024-01-19 02:37:13.696
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2024-01-19 02:37:14.491
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import components.map.Map;
import components.map.Map1L;
import components.sequence.Sequence;
import components.sequence.Sequence1L;
import components.set.Set;
import components.set.Set1L;
import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;

/**
 * Simple HelloWorld program (clear of Checkstyle and SpotBugs warnings).
 *
 * @author Evan Frisbie
 */
public final class WordCounter {

    /**
     * No argument constructor--private to prevent instantiation.
     */
    private WordCounter() {
        // no code needed here
    }

    /**
     * Parsing function intended to parse words from input file into a sequence.
     * Assumes that words will be split my non-alphabetic characters. Assumes
     * that no word is split between lines.
     *
     * @param in
     *            The system.input line connected to the text file.
     *
     * @return wordList The list of words found by the parsing function.
     */
    private static Sequence<String> parser(SimpleReader in) {
        Sequence<String> words = new Sequence1L<String>();
        boolean atEnd = false;

        while (!atEnd) {
            String line = in.nextLine();
            int i = 0;

            while (line.length() != 0) {
                if (i >= line.length()) {
                    words.add(0, line);
                    line = "";
                } else if (!Character.isAlphabetic(line.charAt(i))) {
                    if (i != 0) {
                        String word = line.substring(0, i);
                        words.add(0, word.toLowerCase());

                        line = line.substring(i);
                        i = -1;
                    } else if (i == 0) {
                        line = line.substring(1);
                        i = -1;
                    }
                }
                i++;
            }
            atEnd = in.atEOS();
        }

        return words;
    }

    /**
     * Sort function sorts the words in the given sequence alphabetically and
     * then returns the sorted sequence.
     *
     * @param words
     *            The sequence of words found in the input file.
     *
     * @return words The sorted sequence of words.
     */
    private static Sequence<String> sort(Sequence<String> words) {
        boolean sorted = false;

        while (!sorted) {
            int length = words.length();
            int sortedLength = 0;

            for (int i = 0; i < words.length() - 1; i++) {
                for (int j = 0; j < words.length(); j++) {
                    if (words.entry(i).charAt(0) < words.entry(j).charAt(0)) {

                        String word1 = words.entry(i);
                        words.replaceEntry(i, words.entry(j));
                        words.replaceEntry(j, word1);

                    } else if (words.entry(i).equals(words.entry(j)) || words
                            .entry(i).charAt(0) > words.entry(j).charAt(0)) {
                        sortedLength++;
                    } else if (words.entry(i).charAt(0) == words.entry(j)
                            .charAt(0)) {
                        if (words.entry(i).length() < words.entry(j).length()) {
                            String word1 = words.entry(i);
                            words.replaceEntry(i, words.entry(j));
                            words.replaceEntry(j, word1);
                        } else {
           
                                || words.entry(i).charAt(1) < words.entry(j)
                                        .charAt(1)) {

                            String word1 = words.entry(i);
                            words.replaceEntry(i, words.entry(j));
                            words.replaceEntry(j, word1);
                                        }
                        }
                    }
                }
            }

            if (length < sortedLength) {
                sorted = true;
            }

        }

        Sequence<String> sortedWords = new Sequence1L<String>();
        Set<String> totalWords = new Set1L<String>();

        for (int k = 0; k < words.length(); k++) {
            if (sortedWords.length() == 0) {
                sortedWords.add(0, words.entry(k));
                totalWords.add(words.entry(k));
            } else if (!totalWords.contains(words.entry(k))) {
                sortedWords.add(0, words.entry(k));
                totalWords.add(words.entry(k));
            }
        }

        sortedWords.flip();
        return sortedWords;
    }

    /**
     * Counting function intended to count the occurrences of each word in the
     * sequence and return a list of simple objects each containing the given
     * word and the number of times it was seen.
     *
     * @param words
     *            The sequence of words parsed from the text file.
     *
     * @return occurrences The list of maps each containing the word and its
     *         number of occurrences.
     */
    private static Map<String, Integer> counter(Sequence<String> words) {
        Map<String, Integer> occurrences = new Map1L<String, Integer>();

        for (int i = 0; i < words.length(); i++) {
            if (occurrences.hasKey(words.entry(i))) {
                int value = occurrences.value(words.entry(i));
                occurrences.remove(words.entry(i));
                occurrences.add(words.entry(i), value + 1);
            } else if (!occurrences.hasKey(words.entry(i))) {
                occurrences.add(words.entry(i), 1);
            }
        }

        return occurrences;
    }

    /**
     * Output function creates the output HTML file that is returned to the
     * client for UI viewing of the processed information.
     *
     * @param occurrences
     *            The list of maps containing the given words and their
     *            occurrences.
     *
     * @param name
     *            The name of the output file for the title.
     * @param out
     *            The system.output line for writing to a receiving file.
     */
    private static void outputFunction(Map<String, Integer> occurrences,
            String name, SimpleWriter out, Sequence<String> sorted) {

        out.println("<!DOCTYPE html>\r\n" + "<html lang=\"en\">\r\n"
                + "<head>\r\n" + "    <meta charset=\"UTF-8\">\r\n"
                + "    <meta name=\"viewport\" content=\"width=device-width,"
                + "initial-scale=1.0\">\r\n" + "    <title>Document</title>\r\n"
                + "</head>\r\n" + "<body><h1>" + name
                + "</h1><table><tr><th>Word</th><th>Occurrences</th></tr>");

        for (int i = 0; i < sorted.length(); i++) {
            out.println("<tr><td>" + sorted.entry(i) + "</td><td>"
                    + occurrences.value(sorted.entry(i)) + "</td></tr>");
        }

        out.println("</table></body></html>");

    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        out.println("Input File Name: ");
        String inputFile = in.nextLine();
        out.println("Output File Name: ");
        String outputFile = in.nextLine();

        SimpleReader input = new SimpleReader1L(inputFile);
        SimpleWriter output = new SimpleWriter1L(outputFile);

        Sequence<String> words = parser(input);
        Sequence<String> sorted = sort(words);
        Map<String, Integer> occurrences = counter(words);

        out.println(words);
        out.println(sorted);

        outputFunction(occurrences, outputFile, output, sorted);

        in.close();
        out.close();
    }

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2024-01-19 02:37:14.508
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2024-01-19 02:37:14.514
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2024-01-19 02:37:15.735
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import components.map.Map;
import components.map.Map1L;
import components.sequence.Sequence;
import components.sequence.Sequence1L;
import components.set.Set;
import components.set.Set1L;
import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;

/**
 * Simple HelloWorld program (clear of Checkstyle and SpotBugs warnings).
 *
 * @author Evan Frisbie
 */
public final class WordCounter {

    /**
     * No argument constructor--private to prevent instantiation.
     */
    private WordCounter() {
        // no code needed here
    }

    /**
     * Parsing function intended to parse words from input file into a sequence.
     * Assumes that words will be split my non-alphabetic characters. Assumes
     * that no word is split between lines.
     *
     * @param in
     *            The system.input line connected to the text file.
     *
     * @return wordList The list of words found by the parsing function.
     */
    private static Sequence<String> parser(SimpleReader in) {
        Sequence<String> words = new Sequence1L<String>();
        boolean atEnd = false;

        while (!atEnd) {
            String line = in.nextLine();
            int i = 0;

            while (line.length() != 0) {
                if (i >= line.length()) {
                    words.add(0, line);
                    line = "";
                } else if (!Character.isAlphabetic(line.charAt(i))) {
                    if (i != 0) {
                        String word = line.substring(0, i);
                        words.add(0, word.toLowerCase());

                        line = line.substring(i);
                        i = -1;
                    } else if (i == 0) {
                        line = line.substring(1);
                        i = -1;
                    }
                }
                i++;
            }
            atEnd = in.atEOS();
        }

        return words;
    }

    /**
     * Sort function sorts the words in the given sequence alphabetically and
     * then returns the sorted sequence.
     *
     * @param words
     *            The sequence of words found in the input file.
     *
     * @return words The sorted sequence of words.
     */
    private static Sequence<String> sort(Sequence<String> words) {
        boolean sorted = false;

        while (!sorted) {
            int length = words.length();
            int sortedLength = 0;

            for (int i = 0; i < words.length() - 1; i++) {
                for (int j = 0; j < words.length(); j++) {
                    if (words.entry(i).charAt(0) < words.entry(j).charAt(0)) {

                        String word1 = words.entry(i);
                        words.replaceEntry(i, words.entry(j));
                        words.replaceEntry(j, word1);

                    } else if (words.entry(i).equals(words.entry(j)) || words
                            .entry(i).charAt(0) > words.entry(j).charAt(0)) {
                        sortedLength++;
                    } else if (words.entry(i).charAt(0) == words.entry(j)
                            .charAt(0)) {
                        if (words.entry(i).length() < words.entry(j).length()) {
                            String word1 = words.entry(i);
                            words.replaceEntry(i, words.entry(j));
                            words.replaceEntry(j, word1);
                        } else {
           
                                || words.entry(i).charAt(1) < words.entry(j)
                                        .charAt(1)) {

                            String word1 = words.entry(i);
                            words.replaceEntry(i, words.entry(j));
                            words.replaceEntry(j, word1);
                                      }
                        }
                    }
                }
            }

            if (length < sortedLength) {
                sorted = true;
            }

        }

        Sequence<String> sortedWords = new Sequence1L<String>();
        Set<String> totalWords = new Set1L<String>();

        for (int k = 0; k < words.length(); k++) {
            if (sortedWords.length() == 0) {
                sortedWords.add(0, words.entry(k));
                totalWords.add(words.entry(k));
            } else if (!totalWords.contains(words.entry(k))) {
                sortedWords.add(0, words.entry(k));
                totalWords.add(words.entry(k));
            }
        }

        sortedWords.flip();
        return sortedWords;
    }

    /**
     * Counting function intended to count the occurrences of each word in the
     * sequence and return a list of simple objects each containing the given
     * word and the number of times it was seen.
     *
     * @param words
     *            The sequence of words parsed from the text file.
     *
     * @return occurrences The list of maps each containing the word and its
     *         number of occurrences.
     */
    private static Map<String, Integer> counter(Sequence<String> words) {
        Map<String, Integer> occurrences = new Map1L<String, Integer>();

        for (int i = 0; i < words.length(); i++) {
            if (occurrences.hasKey(words.entry(i))) {
                int value = occurrences.value(words.entry(i));
                occurrences.remove(words.entry(i));
                occurrences.add(words.entry(i), value + 1);
            } else if (!occurrences.hasKey(words.entry(i))) {
                occurrences.add(words.entry(i), 1);
            }
        }

        return occurrences;
    }

    /**
     * Output function creates the output HTML file that is returned to the
     * client for UI viewing of the processed information.
     *
     * @param occurrences
     *            The list of maps containing the given words and their
     *            occurrences.
     *
     * @param name
     *            The name of the output file for the title.
     * @param out
     *            The system.output line for writing to a receiving file.
     */
    private static void outputFunction(Map<String, Integer> occurrences,
            String name, SimpleWriter out, Sequence<String> sorted) {

        out.println("<!DOCTYPE html>\r\n" + "<html lang=\"en\">\r\n"
                + "<head>\r\n" + "    <meta charset=\"UTF-8\">\r\n"
                + "    <meta name=\"viewport\" content=\"width=device-width,"
                + "initial-scale=1.0\">\r\n" + "    <title>Document</title>\r\n"
                + "</head>\r\n" + "<body><h1>" + name
                + "</h1><table><tr><th>Word</th><th>Occurrences</th></tr>");

        for (int i = 0; i < sorted.length(); i++) {
            out.println("<tr><td>" + sorted.entry(i) + "</td><td>"
                    + occurrences.value(sorted.entry(i)) + "</td></tr>");
        }

        out.println("</table></body></html>");

    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        out.println("Input File Name: ");
        String inputFile = in.nextLine();
        out.println("Output File Name: ");
        String outputFile = in.nextLine();

        SimpleReader input = new SimpleReader1L(inputFile);
        SimpleWriter output = new SimpleWriter1L(outputFile);

        Sequence<String> words = parser(input);
        Sequence<String> sorted = sort(words);
        Map<String, Integer> occurrences = counter(words);

        out.println(words);
        out.println(sorted);

        outputFunction(occurrences, outputFile, output, sorted);

        in.close();
        out.close();
    }

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2024-01-19 02:37:15.742
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2024-01-19 02:37:15.877
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2024-01-19 02:37:15.895
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import components.map.Map;
import components.map.Map1L;
import components.sequence.Sequence;
import components.sequence.Sequence1L;
import components.set.Set;
import components.set.Set1L;
import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;

/**
 * Simple HelloWorld program (clear of Checkstyle and SpotBugs warnings).
 *
 * @author Evan Frisbie
 */
public final class WordCounter {

    /**
     * No argument constructor--private to prevent instantiation.
     */
    private WordCounter() {
        // no code needed here
    }

    /**
     * Parsing function intended to parse words from input file into a sequence.
     * Assumes that words will be split my non-alphabetic characters. Assumes
     * that no word is split between lines.
     *
     * @param in
     *            The system.input line connected to the text file.
     *
     * @return wordList The list of words found by the parsing function.
     */
    private static Sequence<String> parser(SimpleReader in) {
        Sequence<String> words = new Sequence1L<String>();
        boolean atEnd = false;

        while (!atEnd) {
            String line = in.nextLine();
            int i = 0;

            while (line.length() != 0) {
                if (i >= line.length()) {
                    words.add(0, line);
                    line = "";
                } else if (!Character.isAlphabetic(line.charAt(i))) {
                    if (i != 0) {
                        String word = line.substring(0, i);
                        words.add(0, word.toLowerCase());

                        line = line.substring(i);
                        i = -1;
                    } else if (i == 0) {
                        line = line.substring(1);
                        i = -1;
                    }
                }
                i++;
            }
            atEnd = in.atEOS();
        }

        return words;
    }

    /**
     * Sort function sorts the words in the given sequence alphabetically and
     * then returns the sorted sequence.
     *
     * @param words
     *            The sequence of words found in the input file.
     *
     * @return words The sorted sequence of words.
     */
    private static Sequence<String> sort(Sequence<String> words) {
        boolean sorted = false;

        while (!sorted) {
            int length = words.length();
            int sortedLength = 0;

            for (int i = 0; i < words.length() - 1; i++) {
                for (int j = 0; j < words.length(); j++) {
                    if (words.entry(i).charAt(0) < words.entry(j).charAt(0)) {

                        String word1 = words.entry(i);
                        words.replaceEntry(i, words.entry(j));
                        words.replaceEntry(j, word1);

                    } else if (words.entry(i).equals(words.entry(j)) || words
                            .entry(i).charAt(0) > words.entry(j).charAt(0)) {
                        sortedLength++;
                    } else if (words.entry(i).charAt(0) == words.entry(j)
                            .charAt(0)) {
                        if (words.entry(i).length() < words.entry(j).length()) {
                            String word1 = words.entry(i);
                            words.replaceEntry(i, words.entry(j));
                            words.replaceEntry(j, word1);
                        } else {
           
                                || words.entry(i).charAt(1) < words.entry(j)
                                        .charAt(1)) {

                            String word1 = words.entry(i);
                            words.replaceEntry(i, words.entry(j));
                            words.replaceEntry(j, word1);
                                     }
                        }
                    }
                }
            }

            if (length < sortedLength) {
                sorted = true;
            }

        }

        Sequence<String> sortedWords = new Sequence1L<String>();
        Set<String> totalWords = new Set1L<String>();

        for (int k = 0; k < words.length(); k++) {
            if (sortedWords.length() == 0) {
                sortedWords.add(0, words.entry(k));
                totalWords.add(words.entry(k));
            } else if (!totalWords.contains(words.entry(k))) {
                sortedWords.add(0, words.entry(k));
                totalWords.add(words.entry(k));
            }
        }

        sortedWords.flip();
        return sortedWords;
    }

    /**
     * Counting function intended to count the occurrences of each word in the
     * sequence and return a list of simple objects each containing the given
     * word and the number of times it was seen.
     *
     * @param words
     *            The sequence of words parsed from the text file.
     *
     * @return occurrences The list of maps each containing the word and its
     *         number of occurrences.
     */
    private static Map<String, Integer> counter(Sequence<String> words) {
        Map<String, Integer> occurrences = new Map1L<String, Integer>();

        for (int i = 0; i < words.length(); i++) {
            if (occurrences.hasKey(words.entry(i))) {
                int value = occurrences.value(words.entry(i));
                occurrences.remove(words.entry(i));
                occurrences.add(words.entry(i), value + 1);
            } else if (!occurrences.hasKey(words.entry(i))) {
                occurrences.add(words.entry(i), 1);
            }
        }

        return occurrences;
    }

    /**
     * Output function creates the output HTML file that is returned to the
     * client for UI viewing of the processed information.
     *
     * @param occurrences
     *            The list of maps containing the given words and their
     *            occurrences.
     *
     * @param name
     *            The name of the output file for the title.
     * @param out
     *            The system.output line for writing to a receiving file.
     */
    private static void outputFunction(Map<String, Integer> occurrences,
            String name, SimpleWriter out, Sequence<String> sorted) {

        out.println("<!DOCTYPE html>\r\n" + "<html lang=\"en\">\r\n"
                + "<head>\r\n" + "    <meta charset=\"UTF-8\">\r\n"
                + "    <meta name=\"viewport\" content=\"width=device-width,"
                + "initial-scale=1.0\">\r\n" + "    <title>Document</title>\r\n"
                + "</head>\r\n" + "<body><h1>" + name
                + "</h1><table><tr><th>Word</th><th>Occurrences</th></tr>");

        for (int i = 0; i < sorted.length(); i++) {
            out.println("<tr><td>" + sorted.entry(i) + "</td><td>"
                    + occurrences.value(sorted.entry(i)) + "</td></tr>");
        }

        out.println("</table></body></html>");

    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        out.println("Input File Name: ");
        String inputFile = in.nextLine();
        out.println("Output File Name: ");
        String outputFile = in.nextLine();

        SimpleReader input = new SimpleReader1L(inputFile);
        SimpleWriter output = new SimpleWriter1L(outputFile);

        Sequence<String> words = parser(input);
        Sequence<String> sorted = sort(words);
        Map<String, Integer> occurrences = counter(words);

        out.println(words);
        out.println(sorted);

        outputFunction(occurrences, outputFile, output, sorted);

        in.close();
        out.close();
    }

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-01-19 02:37:15.918
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-01-19 02:37:15.919
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-01-19 02:37:15.923
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import components.map.Map;
import components.map.Map1L;
import components.sequence.Sequence;
import components.sequence.Sequence1L;
import components.set.Set;
import components.set.Set1L;
import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;

/**
 * Simple HelloWorld program (clear of Checkstyle and SpotBugs warnings).
 *
 * @author Evan Frisbie
 */
public final class WordCounter {

    /**
     * No argument constructor--private to prevent instantiation.
     */
    private WordCounter() {
        // no code needed here
    }

    /**
     * Parsing function intended to parse words from input file into a sequence.
     * Assumes that words will be split my non-alphabetic characters. Assumes
     * that no word is split between lines.
     *
     * @param in
     *            The system.input line connected to the text file.
     *
     * @return wordList The list of words found by the parsing function.
     */
    private static Sequence<String> parser(SimpleReader in) {
        Sequence<String> words = new Sequence1L<String>();
        boolean atEnd = false;

        while (!atEnd) {
            String line = in.nextLine();
            int i = 0;

            while (line.length() != 0) {
                if (i >= line.length()) {
                    words.add(0, line);
                    line = "";
                } else if (!Character.isAlphabetic(line.charAt(i))) {
                    if (i != 0) {
                        String word = line.substring(0, i);
                        words.add(0, word.toLowerCase());

                        line = line.substring(i);
                        i = -1;
                    } else if (i == 0) {
                        line = line.substring(1);
                        i = -1;
                    }
                }
                i++;
            }
            atEnd = in.atEOS();
        }

        return words;
    }

    /**
     * Sort function sorts the words in the given sequence alphabetically and
     * then returns the sorted sequence.
     *
     * @param words
     *            The sequence of words found in the input file.
     *
     * @return words The sorted sequence of words.
     */
    private static Sequence<String> sort(Sequence<String> words) {
        boolean sorted = false;

        while (!sorted) {
            int length = words.length();
            int sortedLength = 0;

            for (int i = 0; i < words.length() - 1; i++) {
                for (int j = 0; j < words.length(); j++) {
                    if (words.entry(i).charAt(0) < words.entry(j).charAt(0)) {

                        String word1 = words.entry(i);
                        words.replaceEntry(i, words.entry(j));
                        words.replaceEntry(j, word1);

                    } else if (words.entry(i).equals(words.entry(j)) || words
                            .entry(i).charAt(0) > words.entry(j).charAt(0)) {
                        sortedLength++;
                    } else if (words.entry(i).charAt(0) == words.entry(j)
                            .charAt(0)) {
                        if (words.entry(i).length() < words.entry(j).length()) {
                            String word1 = words.entry(i);
                            words.replaceEntry(i, words.entry(j));
                            words.replaceEntry(j, word1);
                        } else {
           
                                || words.entry(i).charAt(1) < words.entry(j)
                                        .charAt(1)) {

                            String word1 = words.entry(i);
                            words.replaceEntry(i, words.entry(j));
                            words.replaceEntry(j, word1);
                                     }
                        }
                    }
                }
            }

            if (length < sortedLength) {
                sorted = true;
            }

        }

        Sequence<String> sortedWords = new Sequence1L<String>();
        Set<String> totalWords = new Set1L<String>();

        for (int k = 0; k < words.length(); k++) {
            if (sortedWords.length() == 0) {
                sortedWords.add(0, words.entry(k));
                totalWords.add(words.entry(k));
            } else if (!totalWords.contains(words.entry(k))) {
                sortedWords.add(0, words.entry(k));
                totalWords.add(words.entry(k));
            }
        }

        sortedWords.flip();
        return sortedWords;
    }

    /**
     * Counting function intended to count the occurrences of each word in the
     * sequence and return a list of simple objects each containing the given
     * word and the number of times it was seen.
     *
     * @param words
     *            The sequence of words parsed from the text file.
     *
     * @return occurrences The list of maps each containing the word and its
     *         number of occurrences.
     */
    private static Map<String, Integer> counter(Sequence<String> words) {
        Map<String, Integer> occurrences = new Map1L<String, Integer>();

        for (int i = 0; i < words.length(); i++) {
            if (occurrences.hasKey(words.entry(i))) {
                int value = occurrences.value(words.entry(i));
                occurrences.remove(words.entry(i));
                occurrences.add(words.entry(i), value + 1);
            } else if (!occurrences.hasKey(words.entry(i))) {
                occurrences.add(words.entry(i), 1);
            }
        }

        return occurrences;
    }

    /**
     * Output function creates the output HTML file that is returned to the
     * client for UI viewing of the processed information.
     *
     * @param occurrences
     *            The list of maps containing the given words and their
     *            occurrences.
     *
     * @param name
     *            The name of the output file for the title.
     * @param out
     *            The system.output line for writing to a receiving file.
     */
    private static void outputFunction(Map<String, Integer> occurrences,
            String name, SimpleWriter out, Sequence<String> sorted) {

        out.println("<!DOCTYPE html>\r\n" + "<html lang=\"en\">\r\n"
                + "<head>\r\n" + "    <meta charset=\"UTF-8\">\r\n"
                + "    <meta name=\"viewport\" content=\"width=device-width,"
                + "initial-scale=1.0\">\r\n" + "    <title>Document</title>\r\n"
                + "</head>\r\n" + "<body><h1>" + name
                + "</h1><table><tr><th>Word</th><th>Occurrences</th></tr>");

        for (int i = 0; i < sorted.length(); i++) {
            out.println("<tr><td>" + sorted.entry(i) + "</td><td>"
                    + occurrences.value(sorted.entry(i)) + "</td></tr>");
        }

        out.println("</table></body></html>");

    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        out.println("Input File Name: ");
        String inputFile = in.nextLine();
        out.println("Output File Name: ");
        String outputFile = in.nextLine();

        SimpleReader input = new SimpleReader1L(inputFile);
        SimpleWriter output = new SimpleWriter1L(outputFile);

        Sequence<String> words = parser(input);
        Sequence<String> sorted = sort(words);
        Map<String, Integer> occurrences = counter(words);

        out.println(words);
        out.println(sorted);

        outputFunction(occurrences, outputFile, output, sorted);

        in.close();
        out.close();
    }

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2024-01-19 02:37:15.924
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2024-01-19 02:37:15.925
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2024-01-19 02:37:17.767
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import components.map.Map;
import components.map.Map1L;
import components.sequence.Sequence;
import components.sequence.Sequence1L;
import components.set.Set;
import components.set.Set1L;
import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;

/**
 * Simple HelloWorld program (clear of Checkstyle and SpotBugs warnings).
 *
 * @author Evan Frisbie
 */
public final class WordCounter {

    /**
     * No argument constructor--private to prevent instantiation.
     */
    private WordCounter() {
        // no code needed here
    }

    /**
     * Parsing function intended to parse words from input file into a sequence.
     * Assumes that words will be split my non-alphabetic characters. Assumes
     * that no word is split between lines.
     *
     * @param in
     *            The system.input line connected to the text file.
     *
     * @return wordList The list of words found by the parsing function.
     */
    private static Sequence<String> parser(SimpleReader in) {
        Sequence<String> words = new Sequence1L<String>();
        boolean atEnd = false;

        while (!atEnd) {
            String line = in.nextLine();
            int i = 0;

            while (line.length() != 0) {
                if (i >= line.length()) {
                    words.add(0, line);
                    line = "";
                } else if (!Character.isAlphabetic(line.charAt(i))) {
                    if (i != 0) {
                        String word = line.substring(0, i);
                        words.add(0, word.toLowerCase());

                        line = line.substring(i);
                        i = -1;
                    } else if (i == 0) {
                        line = line.substring(1);
                        i = -1;
                    }
                }
                i++;
            }
            atEnd = in.atEOS();
        }

        return words;
    }

    /**
     * Sort function sorts the words in the given sequence alphabetically and
     * then returns the sorted sequence.
     *
     * @param words
     *            The sequence of words found in the input file.
     *
     * @return words The sorted sequence of words.
     */
    private static Sequence<String> sort(Sequence<String> words) {
        boolean sorted = false;

        while (!sorted) {
            int length = words.length();
            int sortedLength = 0;

            for (int i = 0; i < words.length() - 1; i++) {
                for (int j = 0; j < words.length(); j++) {
                    if (words.entry(i).charAt(0) < words.entry(j).charAt(0)) {

                        String word1 = words.entry(i);
                        words.replaceEntry(i, words.entry(j));
                        words.replaceEntry(j, word1);

                    } else if (words.entry(i).equals(words.entry(j)) || words
                            .entry(i).charAt(0) > words.entry(j).charAt(0)) {
                        sortedLength++;
                    } else if (words.entry(i).charAt(0) == words.entry(j)
                            .charAt(0)) {
                        if (words.entry(i).length() < words.entry(j).length()) {
                            String word1 = words.entry(i);
                            words.replaceEntry(i, words.entry(j));
                            words.replaceEntry(j, word1);
                        } else {
           
                                || words.entry(i).charAt(1) < words.entry(j)
                                        .charAt(1)) {

                            String word1 = words.entry(i);
                            words.replaceEntry(i, words.entry(j));
                            words.replaceEntry(j, word1);
                           }
                        }
                    }
                }
            }

            if (length < sortedLength) {
                sorted = true;
            }

        }

        Sequence<String> sortedWords = new Sequence1L<String>();
        Set<String> totalWords = new Set1L<String>();

        for (int k = 0; k < words.length(); k++) {
            if (sortedWords.length() == 0) {
                sortedWords.add(0, words.entry(k));
                totalWords.add(words.entry(k));
            } else if (!totalWords.contains(words.entry(k))) {
                sortedWords.add(0, words.entry(k));
                totalWords.add(words.entry(k));
            }
        }

        sortedWords.flip();
        return sortedWords;
    }

    /**
     * Counting function intended to count the occurrences of each word in the
     * sequence and return a list of simple objects each containing the given
     * word and the number of times it was seen.
     *
     * @param words
     *            The sequence of words parsed from the text file.
     *
     * @return occurrences The list of maps each containing the word and its
     *         number of occurrences.
     */
    private static Map<String, Integer> counter(Sequence<String> words) {
        Map<String, Integer> occurrences = new Map1L<String, Integer>();

        for (int i = 0; i < words.length(); i++) {
            if (occurrences.hasKey(words.entry(i))) {
                int value = occurrences.value(words.entry(i));
                occurrences.remove(words.entry(i));
                occurrences.add(words.entry(i), value + 1);
            } else if (!occurrences.hasKey(words.entry(i))) {
                occurrences.add(words.entry(i), 1);
            }
        }

        return occurrences;
    }

    /**
     * Output function creates the output HTML file that is returned to the
     * client for UI viewing of the processed information.
     *
     * @param occurrences
     *            The list of maps containing the given words and their
     *            occurrences.
     *
     * @param name
     *            The name of the output file for the title.
     * @param out
     *            The system.output line for writing to a receiving file.
     */
    private static void outputFunction(Map<String, Integer> occurrences,
            String name, SimpleWriter out, Sequence<String> sorted) {

        out.println("<!DOCTYPE html>\r\n" + "<html lang=\"en\">\r\n"
                + "<head>\r\n" + "    <meta charset=\"UTF-8\">\r\n"
                + "    <meta name=\"viewport\" content=\"width=device-width,"
                + "initial-scale=1.0\">\r\n" + "    <title>Document</title>\r\n"
                + "</head>\r\n" + "<body><h1>" + name
                + "</h1><table><tr><th>Word</th><th>Occurrences</th></tr>");

        for (int i = 0; i < sorted.length(); i++) {
            out.println("<tr><td>" + sorted.entry(i) + "</td><td>"
                    + occurrences.value(sorted.entry(i)) + "</td></tr>");
        }

        out.println("</table></body></html>");

    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        out.println("Input File Name: ");
        String inputFile = in.nextLine();
        out.println("Output File Name: ");
        String outputFile = in.nextLine();

        SimpleReader input = new SimpleReader1L(inputFile);
        SimpleWriter output = new SimpleWriter1L(outputFile);

        Sequence<String> words = parser(input);
        Sequence<String> sorted = sort(words);
        Map<String, Integer> occurrences = counter(words);

        out.println(words);
        out.println(sorted);

        outputFunction(occurrences, outputFile, output, sorted);

        in.close();
        out.close();
    }

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2024-01-19 02:37:17.827
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2024-01-19 02:37:17.863
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2024-01-19 02:37:20.447
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import components.map.Map;
import components.map.Map1L;
import components.sequence.Sequence;
import components.sequence.Sequence1L;
import components.set.Set;
import components.set.Set1L;
import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;

/**
 * Simple HelloWorld program (clear of Checkstyle and SpotBugs warnings).
 *
 * @author Evan Frisbie
 */
public final class WordCounter {

    /**
     * No argument constructor--private to prevent instantiation.
     */
    private WordCounter() {
        // no code needed here
    }

    /**
     * Parsing function intended to parse words from input file into a sequence.
     * Assumes that words will be split my non-alphabetic characters. Assumes
     * that no word is split between lines.
     *
     * @param in
     *            The system.input line connected to the text file.
     *
     * @return wordList The list of words found by the parsing function.
     */
    private static Sequence<String> parser(SimpleReader in) {
        Sequence<String> words = new Sequence1L<String>();
        boolean atEnd = false;

        while (!atEnd) {
            String line = in.nextLine();
            int i = 0;

            while (line.length() != 0) {
                if (i >= line.length()) {
                    words.add(0, line);
                    line = "";
                } else if (!Character.isAlphabetic(line.charAt(i))) {
                    if (i != 0) {
                        String word = line.substring(0, i);
                        words.add(0, word.toLowerCase());

                        line = line.substring(i);
                        i = -1;
                    } else if (i == 0) {
                        line = line.substring(1);
                        i = -1;
                    }
                }
                i++;
            }
            atEnd = in.atEOS();
        }

        return words;
    }

    /**
     * Sort function sorts the words in the given sequence alphabetically and
     * then returns the sorted sequence.
     *
     * @param words
     *            The sequence of words found in the input file.
     *
     * @return words The sorted sequence of words.
     */
    private static Sequence<String> sort(Sequence<String> words) {
        boolean sorted = false;

        while (!sorted) {
            int length = words.length();
            int sortedLength = 0;

            for (int i = 0; i < words.length() - 1; i++) {
                for (int j = 0; j < words.length(); j++) {
                    if (words.entry(i).charAt(0) < words.entry(j).charAt(0)) {

                        String word1 = words.entry(i);
                        words.replaceEntry(i, words.entry(j));
                        words.replaceEntry(j, word1);

                    } else if (words.entry(i).equals(words.entry(j)) || words
                            .entry(i).charAt(0) > words.entry(j).charAt(0)) {
                        sortedLength++;
                    } else if (words.entry(i).charAt(0) == words.entry(j)
                            .charAt(0)) {
                        if (words.entry(i).length() < words.entry(j).length()) {
                            String word1 = words.entry(i);
                            words.replaceEntry(i, words.entry(j));
                            words.replaceEntry(j, word1);
                        } else {
           
                                || words.entry(i).charAt(1) < words.entry(j)
                                        .charAt(1)) {

                                String word1 = words.entry(i);
                                words.replaceEntry(i, words.entry(j));
                                words.replaceEntry(j, word1);
                           }
                        }
                    }
                }
            }

            if (length < sortedLength) {
                sorted = true;
            }

        }

        Sequence<String> sortedWords = new Sequence1L<String>();
        Set<String> totalWords = new Set1L<String>();

        for (int k = 0; k < words.length(); k++) {
            if (sortedWords.length() == 0) {
                sortedWords.add(0, words.entry(k));
                totalWords.add(words.entry(k));
            } else if (!totalWords.contains(words.entry(k))) {
                sortedWords.add(0, words.entry(k));
                totalWords.add(words.entry(k));
            }
        }

        sortedWords.flip();
        return sortedWords;
    }

    /**
     * Counting function intended to count the occurrences of each word in the
     * sequence and return a list of simple objects each containing the given
     * word and the number of times it was seen.
     *
     * @param words
     *            The sequence of words parsed from the text file.
     *
     * @return occurrences The list of maps each containing the word and its
     *         number of occurrences.
     */
    private static Map<String, Integer> counter(Sequence<String> words) {
        Map<String, Integer> occurrences = new Map1L<String, Integer>();

        for (int i = 0; i < words.length(); i++) {
            if (occurrences.hasKey(words.entry(i))) {
                int value = occurrences.value(words.entry(i));
                occurrences.remove(words.entry(i));
                occurrences.add(words.entry(i), value + 1);
            } else if (!occurrences.hasKey(words.entry(i))) {
                occurrences.add(words.entry(i), 1);
            }
        }

        return occurrences;
    }

    /**
     * Output function creates the output HTML file that is returned to the
     * client for UI viewing of the processed information.
     *
     * @param occurrences
     *            The list of maps containing the given words and their
     *            occurrences.
     *
     * @param name
     *            The name of the output file for the title.
     * @param out
     *            The system.output line for writing to a receiving file.
     */
    private static void outputFunction(Map<String, Integer> occurrences,
            String name, SimpleWriter out, Sequence<String> sorted) {

        out.println("<!DOCTYPE html>\r\n" + "<html lang=\"en\">\r\n"
                + "<head>\r\n" + "    <meta charset=\"UTF-8\">\r\n"
                + "    <meta name=\"viewport\" content=\"width=device-width,"
                + "initial-scale=1.0\">\r\n" + "    <title>Document</title>\r\n"
                + "</head>\r\n" + "<body><h1>" + name
                + "</h1><table><tr><th>Word</th><th>Occurrences</th></tr>");

        for (int i = 0; i < sorted.length(); i++) {
            out.println("<tr><td>" + sorted.entry(i) + "</td><td>"
                    + occurrences.value(sorted.entry(i)) + "</td></tr>");
        }

        out.println("</table></body></html>");

    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        out.println("Input File Name: ");
        String inputFile = in.nextLine();
        out.println("Output File Name: ");
        String outputFile = in.nextLine();

        SimpleReader input = new SimpleReader1L(inputFile);
        SimpleWriter output = new SimpleWriter1L(outputFile);

        Sequence<String> words = parser(input);
        Sequence<String> sorted = sort(words);
        Map<String, Integer> occurrences = counter(words);

        out.println(words);
        out.println(sorted);

        outputFunction(occurrences, outputFile, output, sorted);

        in.close();
        out.close();
    }

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2024-01-19 02:37:20.449
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2024-01-19 02:37:20.484
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2024-01-19 02:37:21.544
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import components.map.Map;
import components.map.Map1L;
import components.sequence.Sequence;
import components.sequence.Sequence1L;
import components.set.Set;
import components.set.Set1L;
import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;

/**
 * Simple HelloWorld program (clear of Checkstyle and SpotBugs warnings).
 *
 * @author Evan Frisbie
 */
public final class WordCounter {

    /**
     * No argument constructor--private to prevent instantiation.
     */
    private WordCounter() {
        // no code needed here
    }

    /**
     * Parsing function intended to parse words from input file into a sequence.
     * Assumes that words will be split my non-alphabetic characters. Assumes
     * that no word is split between lines.
     *
     * @param in
     *            The system.input line connected to the text file.
     *
     * @return wordList The list of words found by the parsing function.
     */
    private static Sequence<String> parser(SimpleReader in) {
        Sequence<String> words = new Sequence1L<String>();
        boolean atEnd = false;

        while (!atEnd) {
            String line = in.nextLine();
            int i = 0;

            while (line.length() != 0) {
                if (i >= line.length()) {
                    words.add(0, line);
                    line = "";
                } else if (!Character.isAlphabetic(line.charAt(i))) {
                    if (i != 0) {
                        String word = line.substring(0, i);
                        words.add(0, word.toLowerCase());

                        line = line.substring(i);
                        i = -1;
                    } else if (i == 0) {
                        line = line.substring(1);
                        i = -1;
                    }
                }
                i++;
            }
            atEnd = in.atEOS();
        }

        return words;
    }

    /**
     * Sort function sorts the words in the given sequence alphabetically and
     * then returns the sorted sequence.
     *
     * @param words
     *            The sequence of words found in the input file.
     *
     * @return words The sorted sequence of words.
     */
    private static Sequence<String> sort(Sequence<String> words) {
        boolean sorted = false;

        while (!sorted) {
            int length = words.length();
            int sortedLength = 0;

            for (int i = 0; i < words.length() - 1; i++) {
                for (int j = 0; j < words.length(); j++) {
                    if (words.entry(i).charAt(0) < words.entry(j).charAt(0)) {

                        String word1 = words.entry(i);
                        words.replaceEntry(i, words.entry(j));
                        words.replaceEntry(j, word1);

                    } else if (words.entry(i).equals(words.entry(j)) || words
                            .entry(i).charAt(0) > words.entry(j).charAt(0)) {
                        sortedLength++;
                    } else if (words.entry(i).charAt(0) == words.entry(j)
                            .charAt(0)) {
                        if (words.entry(i).length() < words.entry(j).length()) {
                            String word1 = words.entry(i);
                            words.replaceEntry(i, words.entry(j));
                            words.replaceEntry(j, word1);
                        } else {
           
                                || words.entry(i).charAt(1) < words.entry(j)
                                        .charAt(1)) {

                                String word1 = words.entry(i);
                                words.replaceEntry(i, words.entry(j));
                                words.replaceEntry(j, word1);
                           }
                        }
                    }
                }
            }

            if (length < sortedLength) {
                sorted = true;
            }

        }

        Sequence<String> sortedWords = new Sequence1L<String>();
        Set<String> totalWords = new Set1L<String>();

        for (int k = 0; k < words.length(); k++) {
            if (sortedWords.length() == 0) {
                sortedWords.add(0, words.entry(k));
                totalWords.add(words.entry(k));
            } else if (!totalWords.contains(words.entry(k))) {
                sortedWords.add(0, words.entry(k));
                totalWords.add(words.entry(k));
            }
        }

        sortedWords.flip();
        return sortedWords;
    }

    /**
     * Counting function intended to count the occurrences of each word in the
     * sequence and return a list of simple objects each containing the given
     * word and the number of times it was seen.
     *
     * @param words
     *            The sequence of words parsed from the text file.
     *
     * @return occurrences The list of maps each containing the word and its
     *         number of occurrences.
     */
    private static Map<String, Integer> counter(Sequence<String> words) {
        Map<String, Integer> occurrences = new Map1L<String, Integer>();

        for (int i = 0; i < words.length(); i++) {
            if (occurrences.hasKey(words.entry(i))) {
                int value = occurrences.value(words.entry(i));
                occurrences.remove(words.entry(i));
                occurrences.add(words.entry(i), value + 1);
            } else if (!occurrences.hasKey(words.entry(i))) {
                occurrences.add(words.entry(i), 1);
            }
        }

        return occurrences;
    }

    /**
     * Output function creates the output HTML file that is returned to the
     * client for UI viewing of the processed information.
     *
     * @param occurrences
     *            The list of maps containing the given words and their
     *            occurrences.
     *
     * @param name
     *            The name of the output file for the title.
     * @param out
     *            The system.output line for writing to a receiving file.
     */
    private static void outputFunction(Map<String, Integer> occurrences,
            String name, SimpleWriter out, Sequence<String> sorted) {

        out.println("<!DOCTYPE html>\r\n" + "<html lang=\"en\">\r\n"
                + "<head>\r\n" + "    <meta charset=\"UTF-8\">\r\n"
                + "    <meta name=\"viewport\" content=\"width=device-width,"
                + "initial-scale=1.0\">\r\n" + "    <title>Document</title>\r\n"
                + "</head>\r\n" + "<body><h1>" + name
                + "</h1><table><tr><th>Word</th><th>Occurrences</th></tr>");

        for (int i = 0; i < sorted.length(); i++) {
            out.println("<tr><td>" + sorted.entry(i) + "</td><td>"
                    + occurrences.value(sorted.entry(i)) + "</td></tr>");
        }

        out.println("</table></body></html>");

    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        out.println("Input File Name: ");
        String inputFile = in.nextLine();
        out.println("Output File Name: ");
        String outputFile = in.nextLine();

        SimpleReader input = new SimpleReader1L(inputFile);
        SimpleWriter output = new SimpleWriter1L(outputFile);

        Sequence<String> words = parser(input);
        Sequence<String> sorted = sort(words);
        Map<String, Integer> occurrences = counter(words);

        out.println(words);
        out.println(sorted);

        outputFunction(occurrences, outputFile, output, sorted);

        in.close();
        out.close();
    }

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-01-19 02:37:21.549
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-01-19 02:37:21.593
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2024-01-19 02:37:22.185
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import components.map.Map;
import components.map.Map1L;
import components.sequence.Sequence;
import components.sequence.Sequence1L;
import components.set.Set;
import components.set.Set1L;
import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;

/**
 * Simple HelloWorld program (clear of Checkstyle and SpotBugs warnings).
 *
 * @author Evan Frisbie
 */
public final class WordCounter {

    /**
     * No argument constructor--private to prevent instantiation.
     */
    private WordCounter() {
        // no code needed here
    }

    /**
     * Parsing function intended to parse words from input file into a sequence.
     * Assumes that words will be split my non-alphabetic characters. Assumes
     * that no word is split between lines.
     *
     * @param in
     *            The system.input line connected to the text file.
     *
     * @return wordList The list of words found by the parsing function.
     */
    private static Sequence<String> parser(SimpleReader in) {
        Sequence<String> words = new Sequence1L<String>();
        boolean atEnd = false;

        while (!atEnd) {
            String line = in.nextLine();
            int i = 0;

            while (line.length() != 0) {
                if (i >= line.length()) {
                    words.add(0, line);
                    line = "";
                } else if (!Character.isAlphabetic(line.charAt(i))) {
                    if (i != 0) {
                        String word = line.substring(0, i);
                        words.add(0, word.toLowerCase());

                        line = line.substring(i);
                        i = -1;
                    } else if (i == 0) {
                        line = line.substring(1);
                        i = -1;
                    }
                }
                i++;
            }
            atEnd = in.atEOS();
        }

        return words;
    }

    /**
     * Sort function sorts the words in the given sequence alphabetically and
     * then returns the sorted sequence.
     *
     * @param words
     *            The sequence of words found in the input file.
     *
     * @return words The sorted sequence of words.
     */
    private static Sequence<String> sort(Sequence<String> words) {
        boolean sorted = false;

        while (!sorted) {
            int length = words.length();
            int sortedLength = 0;

            for (int i = 0; i < words.length() - 1; i++) {
                for (int j = 0; j < words.length(); j++) {
                    if (words.entry(i).charAt(0) < words.entry(j).charAt(0)) {

                        String word1 = words.entry(i);
                        words.replaceEntry(i, words.entry(j));
                        words.replaceEntry(j, word1);

                    } else if (words.entry(i).equals(words.entry(j)) || words
                            .entry(i).charAt(0) > words.entry(j).charAt(0)) {
                        sortedLength++;
                    } else if (words.entry(i).charAt(0) == words.entry(j)
                            .charAt(0)) {
                        if (words.entry(i).length() < words.entry(j).length()) {
                            String word1 = words.entry(i);
                            words.replaceEntry(i, words.entry(j));
                            words.replaceEntry(j, word1);
                        } else {
           
                                || words.entry(i).charAt(1) < words.entry(j)
                                        .charAt(1)) {

                                String word1 = words.entry(i);
                                words.replaceEntry(i, words.entry(j));
                                words.replaceEntry(j, word1);
                           }
                        }
                    }
                }
            }

            if (length < sortedLength) {
                sorted = true;
            }

        }

        Sequence<String> sortedWords = new Sequence1L<String>();
        Set<String> totalWords = new Set1L<String>();

        for (int k = 0; k < words.length(); k++) {
            if (sortedWords.length() == 0) {
                sortedWords.add(0, words.entry(k));
                totalWords.add(words.entry(k));
            } else if (!totalWords.contains(words.entry(k))) {
                sortedWords.add(0, words.entry(k));
                totalWords.add(words.entry(k));
            }
        }

        sortedWords.flip();
        return sortedWords;
    }

    /**
     * Counting function intended to count the occurrences of each word in the
     * sequence and return a list of simple objects each containing the given
     * word and the number of times it was seen.
     *
     * @param words
     *            The sequence of words parsed from the text file.
     *
     * @return occurrences The list of maps each containing the word and its
     *         number of occurrences.
     */
    private static Map<String, Integer> counter(Sequence<String> words) {
        Map<String, Integer> occurrences = new Map1L<String, Integer>();

        for (int i = 0; i < words.length(); i++) {
            if (occurrences.hasKey(words.entry(i))) {
                int value = occurrences.value(words.entry(i));
                occurrences.remove(words.entry(i));
                occurrences.add(words.entry(i), value + 1);
            } else if (!occurrences.hasKey(words.entry(i))) {
                occurrences.add(words.entry(i), 1);
            }
        }

        return occurrences;
    }

    /**
     * Output function creates the output HTML file that is returned to the
     * client for UI viewing of the processed information.
     *
     * @param occurrences
     *            The list of maps containing the given words and their
     *            occurrences.
     *
     * @param name
     *            The name of the output file for the title.
     * @param out
     *            The system.output line for writing to a receiving file.
     */
    private static void outputFunction(Map<String, Integer> occurrences,
            String name, SimpleWriter out, Sequence<String> sorted) {

        out.println("<!DOCTYPE html>\r\n" + "<html lang=\"en\">\r\n"
                + "<head>\r\n" + "    <meta charset=\"UTF-8\">\r\n"
                + "    <meta name=\"viewport\" content=\"width=device-width,"
                + "initial-scale=1.0\">\r\n" + "    <title>Document</title>\r\n"
                + "</head>\r\n" + "<body><h1>" + name
                + "</h1><table><tr><th>Word</th><th>Occurrences</th></tr>");

        for (int i = 0; i < sorted.length(); i++) {
            out.println("<tr><td>" + sorted.entry(i) + "</td><td>"
                    + occurrences.value(sorted.entry(i)) + "</td></tr>");
        }

        out.println("</table></body></html>");

    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        out.println("Input File Name: ");
        String inputFile = in.nextLine();
        out.println("Output File Name: ");
        String outputFile = in.nextLine();

        SimpleReader input = new SimpleReader1L(inputFile);
        SimpleWriter output = new SimpleWriter1L(outputFile);

        Sequence<String> words = parser(input);
        Sequence<String> sorted = sort(words);
        Map<String, Integer> occurrences = counter(words);

        out.println(words);
        out.println(sorted);

        outputFunction(occurrences, outputFile, output, sorted);

        in.close();
        out.close();
    }

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-01-19 02:37:22.186
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-01-19 02:37:22.187
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-01-19 02:37:24.710
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import components.map.Map;
import components.map.Map1L;
import components.sequence.Sequence;
import components.sequence.Sequence1L;
import components.set.Set;
import components.set.Set1L;
import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;

/**
 * Simple HelloWorld program (clear of Checkstyle and SpotBugs warnings).
 *
 * @author Evan Frisbie
 */
public final class WordCounter {

    /**
     * No argument constructor--private to prevent instantiation.
     */
    private WordCounter() {
        // no code needed here
    }

    /**
     * Parsing function intended to parse words from input file into a sequence.
     * Assumes that words will be split my non-alphabetic characters. Assumes
     * that no word is split between lines.
     *
     * @param in
     *            The system.input line connected to the text file.
     *
     * @return wordList The list of words found by the parsing function.
     */
    private static Sequence<String> parser(SimpleReader in) {
        Sequence<String> words = new Sequence1L<String>();
        boolean atEnd = false;

        while (!atEnd) {
            String line = in.nextLine();
            int i = 0;

            while (line.length() != 0) {
                if (i >= line.length()) {
                    words.add(0, line);
                    line = "";
                } else if (!Character.isAlphabetic(line.charAt(i))) {
                    if (i != 0) {
                        String word = line.substring(0, i);
                        words.add(0, word.toLowerCase());

                        line = line.substring(i);
                        i = -1;
                    } else if (i == 0) {
                        line = line.substring(1);
                        i = -1;
                    }
                }
                i++;
            }
            atEnd = in.atEOS();
        }

        return words;
    }

    /**
     * Sort function sorts the words in the given sequence alphabetically and
     * then returns the sorted sequence.
     *
     * @param words
     *            The sequence of words found in the input file.
     *
     * @return words The sorted sequence of words.
     */
    private static Sequence<String> sort(Sequence<String> words) {
        boolean sorted = false;

        while (!sorted) {
            int length = words.length();
            int sortedLength = 0;

            for (int i = 0; i < words.length() - 1; i++) {
                for (int j = 0; j < words.length(); j++) {
                    if (words.entry(i).charAt(0) < words.entry(j).charAt(0)) {

                        String word1 = words.entry(i);
                        words.replaceEntry(i, words.entry(j));
                        words.replaceEntry(j, word1);

                    } else if (words.entry(i).equals(words.entry(j)) || words
                            .entry(i).charAt(0) > words.entry(j).charAt(0)) {
                        sortedLength++;
                    } else if (words.entry(i).charAt(0) == words.entry(j)
                            .charAt(0)) {
                        if (words.entry(i).length() < words.entry(j).length()) {
                            String word1 = words.entry(i);
                            words.replaceEntry(i, words.entry(j));
                            words.replaceEntry(j, word1);
                        } else {
           
                                || words.entry(i).charAt(1) < words.entry(j)
                                        .charAt(1)) {

                                String word1 = words.entry(i);
                                words.replaceEntry(i, words.entry(j));
                                words.replaceEntry(j, word1);
                           }
                        }
                    }
                }
            }

            if (length < sortedLength) {
                sorted = true;
            }

        }

        Sequence<String> sortedWords = new Sequence1L<String>();
        Set<String> totalWords = new Set1L<String>();

        for (int k = 0; k < words.length(); k++) {
            if (sortedWords.length() == 0) {
                sortedWords.add(0, words.entry(k));
                totalWords.add(words.entry(k));
            } else if (!totalWords.contains(words.entry(k))) {
                sortedWords.add(0, words.entry(k));
                totalWords.add(words.entry(k));
            }
        }

        sortedWords.flip();
        return sortedWords;
    }

    /**
     * Counting function intended to count the occurrences of each word in the
     * sequence and return a list of simple objects each containing the given
     * word and the number of times it was seen.
     *
     * @param words
     *            The sequence of words parsed from the text file.
     *
     * @return occurrences The list of maps each containing the word and its
     *         number of occurrences.
     */
    private static Map<String, Integer> counter(Sequence<String> words) {
        Map<String, Integer> occurrences = new Map1L<String, Integer>();

        for (int i = 0; i < words.length(); i++) {
            if (occurrences.hasKey(words.entry(i))) {
                int value = occurrences.value(words.entry(i));
                occurrences.remove(words.entry(i));
                occurrences.add(words.entry(i), value + 1);
            } else if (!occurrences.hasKey(words.entry(i))) {
                occurrences.add(words.entry(i), 1);
            }
        }

        return occurrences;
    }

    /**
     * Output function creates the output HTML file that is returned to the
     * client for UI viewing of the processed information.
     *
     * @param occurrences
     *            The list of maps containing the given words and their
     *            occurrences.
     *
     * @param name
     *            The name of the output file for the title.
     * @param out
     *            The system.output line for writing to a receiving file.
     */
    private static void outputFunction(Map<String, Integer> occurrences,
            String name, SimpleWriter out, Sequence<String> sorted) {

        out.println("<!DOCTYPE html>\r\n" + "<html lang=\"en\">\r\n"
                + "<head>\r\n" + "    <meta charset=\"UTF-8\">\r\n"
                + "    <meta name=\"viewport\" content=\"width=device-width,"
                + "initial-scale=1.0\">\r\n" + "    <title>Document</title>\r\n"
                + "</head>\r\n" + "<body><h1>" + name
                + "</h1><table><tr><th>Word</th><th>Occurrences</th></tr>");

        for (int i = 0; i < sorted.length(); i++) {
            out.println("<tr><td>" + sorted.entry(i) + "</td><td>"
                    + occurrences.value(sorted.entry(i)) + "</td></tr>");
        }

        out.println("</table></body></html>");

    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        out.println("Input File Name: ");
        String inputFile = in.nextLine();
        out.println("Output File Name: ");
        String outputFile = in.nextLine();

        SimpleReader input = new SimpleReader1L(inputFile);
        SimpleWriter output = new SimpleWriter1L(outputFile);

        Sequence<String> words = parser(input);
        Sequence<String> sorted = sort(words);
        Map<String, Integer> occurrences = counter(words);

        out.println(words);
        out.println(sorted);

        outputFunction(occurrences, outputFile, output, sorted);

        in.close();
        out.close();
    }

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-01-19 02:37:24.712
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-01-19 02:37:24.713
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2024-01-19 02:37:24.844
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import components.map.Map;
import components.map.Map1L;
import components.sequence.Sequence;
import components.sequence.Sequence1L;
import components.set.Set;
import components.set.Set1L;
import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;

/**
 * Simple HelloWorld program (clear of Checkstyle and SpotBugs warnings).
 *
 * @author Evan Frisbie
 */
public final class WordCounter {

    /**
     * No argument constructor--private to prevent instantiation.
     */
    private WordCounter() {
        // no code needed here
    }

    /**
     * Parsing function intended to parse words from input file into a sequence.
     * Assumes that words will be split my non-alphabetic characters. Assumes
     * that no word is split between lines.
     *
     * @param in
     *            The system.input line connected to the text file.
     *
     * @return wordList The list of words found by the parsing function.
     */
    private static Sequence<String> parser(SimpleReader in) {
        Sequence<String> words = new Sequence1L<String>();
        boolean atEnd = false;

        while (!atEnd) {
            String line = in.nextLine();
            int i = 0;

            while (line.length() != 0) {
                if (i >= line.length()) {
                    words.add(0, line);
                    line = "";
                } else if (!Character.isAlphabetic(line.charAt(i))) {
                    if (i != 0) {
                        String word = line.substring(0, i);
                        words.add(0, word.toLowerCase());

                        line = line.substring(i);
                        i = -1;
                    } else if (i == 0) {
                        line = line.substring(1);
                        i = -1;
                    }
                }
                i++;
            }
            atEnd = in.atEOS();
        }

        return words;
    }

    /**
     * Sort function sorts the words in the given sequence alphabetically and
     * then returns the sorted sequence.
     *
     * @param words
     *            The sequence of words found in the input file.
     *
     * @return words The sorted sequence of words.
     */
    private static Sequence<String> sort(Sequence<String> words) {
        boolean sorted = false;

        while (!sorted) {
            int length = words.length();
            int sortedLength = 0;

            for (int i = 0; i < words.length() - 1; i++) {
                for (int j = 0; j < words.length(); j++) {
                    if (words.entry(i).charAt(0) < words.entry(j).charAt(0)) {

                        String word1 = words.entry(i);
                        words.replaceEntry(i, words.entry(j));
                        words.replaceEntry(j, word1);

                    } else if (words.entry(i).equals(words.entry(j)) || words
                            .entry(i).charAt(0) > words.entry(j).charAt(0)) {
                        sortedLength++;
                    } else if (words.entry(i).charAt(0) == words.entry(j)
                            .charAt(0)) {
                        if (words.entry(i).length() < words.entry(j).length()) {
                            String word1 = words.entry(i);
                            words.replaceEntry(i, words.entry(j));
                            words.replaceEntry(j, word1);
                        } else {
           
                                || words.entry(i).charAt(1) < words.entry(j)
                                        .charAt(1)) {

                                String word1 = words.entry(i);
                                words.replaceEntry(i, words.entry(j));
                                words.replaceEntry(j, word1);
                           }
                        }
                    }
                }
            }

            if (length < sortedLength) {
                sorted = true;
            }

        }

        Sequence<String> sortedWords = new Sequence1L<String>();
        Set<String> totalWords = new Set1L<String>();

        for (int k = 0; k < words.length(); k++) {
            if (sortedWords.length() == 0) {
                sortedWords.add(0, words.entry(k));
                totalWords.add(words.entry(k));
            } else if (!totalWords.contains(words.entry(k))) {
                sortedWords.add(0, words.entry(k));
                totalWords.add(words.entry(k));
            }
        }

        sortedWords.flip();
        return sortedWords;
    }

    /**
     * Counting function intended to count the occurrences of each word in the
     * sequence and return a list of simple objects each containing the given
     * word and the number of times it was seen.
     *
     * @param words
     *            The sequence of words parsed from the text file.
     *
     * @return occurrences The list of maps each containing the word and its
     *         number of occurrences.
     */
    private static Map<String, Integer> counter(Sequence<String> words) {
        Map<String, Integer> occurrences = new Map1L<String, Integer>();

        for (int i = 0; i < words.length(); i++) {
            if (occurrences.hasKey(words.entry(i))) {
                int value = occurrences.value(words.entry(i));
                occurrences.remove(words.entry(i));
                occurrences.add(words.entry(i), value + 1);
            } else if (!occurrences.hasKey(words.entry(i))) {
                occurrences.add(words.entry(i), 1);
            }
        }

        return occurrences;
    }

    /**
     * Output function creates the output HTML file that is returned to the
     * client for UI viewing of the processed information.
     *
     * @param occurrences
     *            The list of maps containing the given words and their
     *            occurrences.
     *
     * @param name
     *            The name of the output file for the title.
     * @param out
     *            The system.output line for writing to a receiving file.
     */
    private static void outputFunction(Map<String, Integer> occurrences,
            String name, SimpleWriter out, Sequence<String> sorted) {

        out.println("<!DOCTYPE html>\r\n" + "<html lang=\"en\">\r\n"
                + "<head>\r\n" + "    <meta charset=\"UTF-8\">\r\n"
                + "    <meta name=\"viewport\" content=\"width=device-width,"
                + "initial-scale=1.0\">\r\n" + "    <title>Document</title>\r\n"
                + "</head>\r\n" + "<body><h1>" + name
                + "</h1><table><tr><th>Word</th><th>Occurrences</th></tr>");

        for (int i = 0; i < sorted.length(); i++) {
            out.println("<tr><td>" + sorted.entry(i) + "</td><td>"
                    + occurrences.value(sorted.entry(i)) + "</td></tr>");
        }

        out.println("</table></body></html>");

    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        out.println("Input File Name: ");
        String inputFile = in.nextLine();
        out.println("Output File Name: ");
        String outputFile = in.nextLine();

        SimpleReader input = new SimpleReader1L(inputFile);
        SimpleWriter output = new SimpleWriter1L(outputFile);

        Sequence<String> words = parser(input);
        Sequence<String> sorted = sort(words);
        Map<String, Integer> occurrences = counter(words);

        out.println(words);
        out.println(sorted);

        outputFunction(occurrences, outputFile, output, sorted);

        in.close();
        out.close();
    }

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-01-19 02:37:24.845
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-01-19 02:37:24.845
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-01-19 02:37:25.980
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import components.map.Map;
import components.map.Map1L;
import components.sequence.Sequence;
import components.sequence.Sequence1L;
import components.set.Set;
import components.set.Set1L;
import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;

/**
 * Simple HelloWorld program (clear of Checkstyle and SpotBugs warnings).
 *
 * @author Evan Frisbie
 */
public final class WordCounter {

    /**
     * No argument constructor--private to prevent instantiation.
     */
    private WordCounter() {
        // no code needed here
    }

    /**
     * Parsing function intended to parse words from input file into a sequence.
     * Assumes that words will be split my non-alphabetic characters. Assumes
     * that no word is split between lines.
     *
     * @param in
     *            The system.input line connected to the text file.
     *
     * @return wordList The list of words found by the parsing function.
     */
    private static Sequence<String> parser(SimpleReader in) {
        Sequence<String> words = new Sequence1L<String>();
        boolean atEnd = false;

        while (!atEnd) {
            String line = in.nextLine();
            int i = 0;

            while (line.length() != 0) {
                if (i >= line.length()) {
                    words.add(0, line);
                    line = "";
                } else if (!Character.isAlphabetic(line.charAt(i))) {
                    if (i != 0) {
                        String word = line.substring(0, i);
                        words.add(0, word.toLowerCase());

                        line = line.substring(i);
                        i = -1;
                    } else if (i == 0) {
                        line = line.substring(1);
                        i = -1;
                    }
                }
                i++;
            }
            atEnd = in.atEOS();
        }

        return words;
    }

    /**
     * Sort function sorts the words in the given sequence alphabetically and
     * then returns the sorted sequence.
     *
     * @param words
     *            The sequence of words found in the input file.
     *
     * @return words The sorted sequence of words.
     */
    private static Sequence<String> sort(Sequence<String> words) {
        boolean sorted = false;

        while (!sorted) {
            int length = words.length();
            int sortedLength = 0;

            for (int i = 0; i < words.length() - 1; i++) {
                for (int j = 0; j < words.length(); j++) {
                    if (words.entry(i).charAt(0) < words.entry(j).charAt(0)) {

                        String word1 = words.entry(i);
                        words.replaceEntry(i, words.entry(j));
                        words.replaceEntry(j, word1);

                    } else if (words.entry(i).equals(words.entry(j)) || words
                            .entry(i).charAt(0) > words.entry(j).charAt(0)) {
                        sortedLength++;
                    } else if (words.entry(i).charAt(0) == words.entry(j)
                            .charAt(0)) {
                        if (words.entry(i).length() < words.entry(j).length()) {
                            String word1 = words.entry(i);
                            words.replaceEntry(i, words.entry(j));
                            words.replaceEntry(j, word1);
                        } else {
           
                                || words.entry(i).charAt(1) < words.entry(j)
                                        .charAt(1)) {

                                String word1 = words.entry(i);
                                words.replaceEntry(i, words.entry(j));
                                words.replaceEntry(j, word1);
                           }
                        }
                    }
                }
            }

            if (length < sortedLength) {
                sorted = true;
            }

        }

        Sequence<String> sortedWords = new Sequence1L<String>();
        Set<String> totalWords = new Set1L<String>();

        for (int k = 0; k < words.length(); k++) {
            if (sortedWords.length() == 0) {
                sortedWords.add(0, words.entry(k));
                totalWords.add(words.entry(k));
            } else if (!totalWords.contains(words.entry(k))) {
                sortedWords.add(0, words.entry(k));
                totalWords.add(words.entry(k));
            }
        }

        sortedWords.flip();
        return sortedWords;
    }

    /**
     * Counting function intended to count the occurrences of each word in the
     * sequence and return a list of simple objects each containing the given
     * word and the number of times it was seen.
     *
     * @param words
     *            The sequence of words parsed from the text file.
     *
     * @return occurrences The list of maps each containing the word and its
     *         number of occurrences.
     */
    private static Map<String, Integer> counter(Sequence<String> words) {
        Map<String, Integer> occurrences = new Map1L<String, Integer>();

        for (int i = 0; i < words.length(); i++) {
            if (occurrences.hasKey(words.entry(i))) {
                int value = occurrences.value(words.entry(i));
                occurrences.remove(words.entry(i));
                occurrences.add(words.entry(i), value + 1);
            } else if (!occurrences.hasKey(words.entry(i))) {
                occurrences.add(words.entry(i), 1);
            }
        }

        return occurrences;
    }

    /**
     * Output function creates the output HTML file that is returned to the
     * client for UI viewing of the processed information.
     *
     * @param occurrences
     *            The list of maps containing the given words and their
     *            occurrences.
     *
     * @param name
     *            The name of the output file for the title.
     * @param out
     *            The system.output line for writing to a receiving file.
     */
    private static void outputFunction(Map<String, Integer> occurrences,
            String name, SimpleWriter out, Sequence<String> sorted) {

        out.println("<!DOCTYPE html>\r\n" + "<html lang=\"en\">\r\n"
                + "<head>\r\n" + "    <meta charset=\"UTF-8\">\r\n"
                + "    <meta name=\"viewport\" content=\"width=device-width,"
                + "initial-scale=1.0\">\r\n" + "    <title>Document</title>\r\n"
                + "</head>\r\n" + "<body><h1>" + name
                + "</h1><table><tr><th>Word</th><th>Occurrences</th></tr>");

        for (int i = 0; i < sorted.length(); i++) {
            out.println("<tr><td>" + sorted.entry(i) + "</td><td>"
                    + occurrences.value(sorted.entry(i)) + "</td></tr>");
        }

        out.println("</table></body></html>");

    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        out.println("Input File Name: ");
        String inputFile = in.nextLine();
        out.println("Output File Name: ");
        String outputFile = in.nextLine();

        SimpleReader input = new SimpleReader1L(inputFile);
        SimpleWriter output = new SimpleWriter1L(outputFile);

        Sequence<String> words = parser(input);
        Sequence<String> sorted = sort(words);
        Map<String, Integer> occurrences = counter(words);

        out.println(words);
        out.println(sorted);

        outputFunction(occurrences, outputFile, output, sorted);

        in.close();
        out.close();
    }

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-01-19 02:37:25.981
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-01-19 02:37:25.992
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2024-01-19 02:37:27.053
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import components.map.Map;
import components.map.Map1L;
import components.sequence.Sequence;
import components.sequence.Sequence1L;
import components.set.Set;
import components.set.Set1L;
import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;

/**
 * Simple HelloWorld program (clear of Checkstyle and SpotBugs warnings).
 *
 * @author Evan Frisbie
 */
public final class WordCounter {

    /**
     * No argument constructor--private to prevent instantiation.
     */
    private WordCounter() {
        // no code needed here
    }

    /**
     * Parsing function intended to parse words from input file into a sequence.
     * Assumes that words will be split my non-alphabetic characters. Assumes
     * that no word is split between lines.
     *
     * @param in
     *            The system.input line connected to the text file.
     *
     * @return wordList The list of words found by the parsing function.
     */
    private static Sequence<String> parser(SimpleReader in) {
        Sequence<String> words = new Sequence1L<String>();
        boolean atEnd = false;

        while (!atEnd) {
            String line = in.nextLine();
            int i = 0;

            while (line.length() != 0) {
                if (i >= line.length()) {
                    words.add(0, line);
                    line = "";
                } else if (!Character.isAlphabetic(line.charAt(i))) {
                    if (i != 0) {
                        String word = line.substring(0, i);
                        words.add(0, word.toLowerCase());

                        line = line.substring(i);
                        i = -1;
                    } else if (i == 0) {
                        line = line.substring(1);
                        i = -1;
                    }
                }
                i++;
            }
            atEnd = in.atEOS();
        }

        return words;
    }

    /**
     * Sort function sorts the words in the given sequence alphabetically and
     * then returns the sorted sequence.
     *
     * @param words
     *            The sequence of words found in the input file.
     *
     * @return words The sorted sequence of words.
     */
    private static Sequence<String> sort(Sequence<String> words) {
        boolean sorted = false;

        while (!sorted) {
            int length = words.length();
            int sortedLength = 0;

            for (int i = 0; i < words.length() - 1; i++) {
                for (int j = 0; j < words.length(); j++) {
                    if (words.entry(i).charAt(0) < words.entry(j).charAt(0)) {

                        String word1 = words.entry(i);
                        words.replaceEntry(i, words.entry(j));
                        words.replaceEntry(j, word1);

                    } else if (words.entry(i).equals(words.entry(j)) || words
                            .entry(i).charAt(0) > words.entry(j).charAt(0)) {
                        sortedLength++;
                    } else if (words.entry(i).charAt(0) == words.entry(j)
                            .charAt(0)) {
                        if (words.entry(i).length() < words.entry(j).length()) {
                            String word1 = words.entry(i);
                            words.replaceEntry(i, words.entry(j));
                            words.replaceEntry(j, word1);
                        } else if {
           
                                || words.entry(i).charAt(1) < words.entry(j)
                                        .charAt(1)) {

                                String word1 = words.entry(i);
                                words.replaceEntry(i, words.entry(j));
                                words.replaceEntry(j, word1);
                           }
                        }
                    }
                }
            }

            if (length < sortedLength) {
                sorted = true;
            }

        }

        Sequence<String> sortedWords = new Sequence1L<String>();
        Set<String> totalWords = new Set1L<String>();

        for (int k = 0; k < words.length(); k++) {
            if (sortedWords.length() == 0) {
                sortedWords.add(0, words.entry(k));
                totalWords.add(words.entry(k));
            } else if (!totalWords.contains(words.entry(k))) {
                sortedWords.add(0, words.entry(k));
                totalWords.add(words.entry(k));
            }
        }

        sortedWords.flip();
        return sortedWords;
    }

    /**
     * Counting function intended to count the occurrences of each word in the
     * sequence and return a list of simple objects each containing the given
     * word and the number of times it was seen.
     *
     * @param words
     *            The sequence of words parsed from the text file.
     *
     * @return occurrences The list of maps each containing the word and its
     *         number of occurrences.
     */
    private static Map<String, Integer> counter(Sequence<String> words) {
        Map<String, Integer> occurrences = new Map1L<String, Integer>();

        for (int i = 0; i < words.length(); i++) {
            if (occurrences.hasKey(words.entry(i))) {
                int value = occurrences.value(words.entry(i));
                occurrences.remove(words.entry(i));
                occurrences.add(words.entry(i), value + 1);
            } else if (!occurrences.hasKey(words.entry(i))) {
                occurrences.add(words.entry(i), 1);
            }
        }

        return occurrences;
    }

    /**
     * Output function creates the output HTML file that is returned to the
     * client for UI viewing of the processed information.
     *
     * @param occurrences
     *            The list of maps containing the given words and their
     *            occurrences.
     *
     * @param name
     *            The name of the output file for the title.
     * @param out
     *            The system.output line for writing to a receiving file.
     */
    private static void outputFunction(Map<String, Integer> occurrences,
            String name, SimpleWriter out, Sequence<String> sorted) {

        out.println("<!DOCTYPE html>\r\n" + "<html lang=\"en\">\r\n"
                + "<head>\r\n" + "    <meta charset=\"UTF-8\">\r\n"
                + "    <meta name=\"viewport\" content=\"width=device-width,"
                + "initial-scale=1.0\">\r\n" + "    <title>Document</title>\r\n"
                + "</head>\r\n" + "<body><h1>" + name
                + "</h1><table><tr><th>Word</th><th>Occurrences</th></tr>");

        for (int i = 0; i < sorted.length(); i++) {
            out.println("<tr><td>" + sorted.entry(i) + "</td><td>"
                    + occurrences.value(sorted.entry(i)) + "</td></tr>");
        }

        out.println("</table></body></html>");

    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        out.println("Input File Name: ");
        String inputFile = in.nextLine();
        out.println("Output File Name: ");
        String outputFile = in.nextLine();

        SimpleReader input = new SimpleReader1L(inputFile);
        SimpleWriter output = new SimpleWriter1L(outputFile);

        Sequence<String> words = parser(input);
        Sequence<String> sorted = sort(words);
        Map<String, Integer> occurrences = counter(words);

        out.println(words);
        out.println(sorted);

        outputFunction(occurrences, outputFile, output, sorted);

        in.close();
        out.close();
    }

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2024-01-19 02:37:27.054
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2024-01-19 02:37:27.054
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2024-01-19 02:37:28.585
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import components.map.Map;
import components.map.Map1L;
import components.sequence.Sequence;
import components.sequence.Sequence1L;
import components.set.Set;
import components.set.Set1L;
import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;

/**
 * Simple HelloWorld program (clear of Checkstyle and SpotBugs warnings).
 *
 * @author Evan Frisbie
 */
public final class WordCounter {

    /**
     * No argument constructor--private to prevent instantiation.
     */
    private WordCounter() {
        // no code needed here
    }

    /**
     * Parsing function intended to parse words from input file into a sequence.
     * Assumes that words will be split my non-alphabetic characters. Assumes
     * that no word is split between lines.
     *
     * @param in
     *            The system.input line connected to the text file.
     *
     * @return wordList The list of words found by the parsing function.
     */
    private static Sequence<String> parser(SimpleReader in) {
        Sequence<String> words = new Sequence1L<String>();
        boolean atEnd = false;

        while (!atEnd) {
            String line = in.nextLine();
            int i = 0;

            while (line.length() != 0) {
                if (i >= line.length()) {
                    words.add(0, line);
                    line = "";
                } else if (!Character.isAlphabetic(line.charAt(i))) {
                    if (i != 0) {
                        String word = line.substring(0, i);
                        words.add(0, word.toLowerCase());

                        line = line.substring(i);
                        i = -1;
                    } else if (i == 0) {
                        line = line.substring(1);
                        i = -1;
                    }
                }
                i++;
            }
            atEnd = in.atEOS();
        }

        return words;
    }

    /**
     * Sort function sorts the words in the given sequence alphabetically and
     * then returns the sorted sequence.
     *
     * @param words
     *            The sequence of words found in the input file.
     *
     * @return words The sorted sequence of words.
     */
    private static Sequence<String> sort(Sequence<String> words) {
        boolean sorted = false;

        while (!sorted) {
            int length = words.length();
            int sortedLength = 0;

            for (int i = 0; i < words.length() - 1; i++) {
                for (int j = 0; j < words.length(); j++) {
                    if (words.entry(i).charAt(0) < words.entry(j).charAt(0)) {

                        String word1 = words.entry(i);
                        words.replaceEntry(i, words.entry(j));
                        words.replaceEntry(j, word1);

                    } else if (words.entry(i).equals(words.entry(j)) || words
                            .entry(i).charAt(0) > words.entry(j).charAt(0)) {
                        sortedLength++;
                    } else if (words.entry(i).charAt(0) == words.entry(j)
                            .charAt(0)) {
                        if (words.entry(i).length() < words.entry(j).length()) {
                            String word1 = words.entry(i);
                            words.replaceEntry(i, words.entry(j));
                            words.replaceEntry(j, word1);
                        } else if (){
           
                                || words.entry(i).charAt(1) < words.entry(j)
                                        .charAt(1)) {

                                String word1 = words.entry(i);
                                words.replaceEntry(i, words.entry(j));
                                words.replaceEntry(j, word1);
                           }
                        }
                    }
                }
            }

            if (length < sortedLength) {
                sorted = true;
            }

        }

        Sequence<String> sortedWords = new Sequence1L<String>();
        Set<String> totalWords = new Set1L<String>();

        for (int k = 0; k < words.length(); k++) {
            if (sortedWords.length() == 0) {
                sortedWords.add(0, words.entry(k));
                totalWords.add(words.entry(k));
            } else if (!totalWords.contains(words.entry(k))) {
                sortedWords.add(0, words.entry(k));
                totalWords.add(words.entry(k));
            }
        }

        sortedWords.flip();
        return sortedWords;
    }

    /**
     * Counting function intended to count the occurrences of each word in the
     * sequence and return a list of simple objects each containing the given
     * word and the number of times it was seen.
     *
     * @param words
     *            The sequence of words parsed from the text file.
     *
     * @return occurrences The list of maps each containing the word and its
     *         number of occurrences.
     */
    private static Map<String, Integer> counter(Sequence<String> words) {
        Map<String, Integer> occurrences = new Map1L<String, Integer>();

        for (int i = 0; i < words.length(); i++) {
            if (occurrences.hasKey(words.entry(i))) {
                int value = occurrences.value(words.entry(i));
                occurrences.remove(words.entry(i));
                occurrences.add(words.entry(i), value + 1);
            } else if (!occurrences.hasKey(words.entry(i))) {
                occurrences.add(words.entry(i), 1);
            }
        }

        return occurrences;
    }

    /**
     * Output function creates the output HTML file that is returned to the
     * client for UI viewing of the processed information.
     *
     * @param occurrences
     *            The list of maps containing the given words and their
     *            occurrences.
     *
     * @param name
     *            The name of the output file for the title.
     * @param out
     *            The system.output line for writing to a receiving file.
     */
    private static void outputFunction(Map<String, Integer> occurrences,
            String name, SimpleWriter out, Sequence<String> sorted) {

        out.println("<!DOCTYPE html>\r\n" + "<html lang=\"en\">\r\n"
                + "<head>\r\n" + "    <meta charset=\"UTF-8\">\r\n"
                + "    <meta name=\"viewport\" content=\"width=device-width,"
                + "initial-scale=1.0\">\r\n" + "    <title>Document</title>\r\n"
                + "</head>\r\n" + "<body><h1>" + name
                + "</h1><table><tr><th>Word</th><th>Occurrences</th></tr>");

        for (int i = 0; i < sorted.length(); i++) {
            out.println("<tr><td>" + sorted.entry(i) + "</td><td>"
                    + occurrences.value(sorted.entry(i)) + "</td></tr>");
        }

        out.println("</table></body></html>");

    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        out.println("Input File Name: ");
        String inputFile = in.nextLine();
        out.println("Output File Name: ");
        String outputFile = in.nextLine();

        SimpleReader input = new SimpleReader1L(inputFile);
        SimpleWriter output = new SimpleWriter1L(outputFile);

        Sequence<String> words = parser(input);
        Sequence<String> sorted = sort(words);
        Map<String, Integer> occurrences = counter(words);

        out.println(words);
        out.println(sorted);

        outputFunction(occurrences, outputFile, output, sorted);

        in.close();
        out.close();
    }

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2024-01-19 02:37:28.586
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2024-01-19 02:37:28.586
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2024-01-19 02:37:29.707
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import components.map.Map;
import components.map.Map1L;
import components.sequence.Sequence;
import components.sequence.Sequence1L;
import components.set.Set;
import components.set.Set1L;
import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;

/**
 * Simple HelloWorld program (clear of Checkstyle and SpotBugs warnings).
 *
 * @author Evan Frisbie
 */
public final class WordCounter {

    /**
     * No argument constructor--private to prevent instantiation.
     */
    private WordCounter() {
        // no code needed here
    }

    /**
     * Parsing function intended to parse words from input file into a sequence.
     * Assumes that words will be split my non-alphabetic characters. Assumes
     * that no word is split between lines.
     *
     * @param in
     *            The system.input line connected to the text file.
     *
     * @return wordList The list of words found by the parsing function.
     */
    private static Sequence<String> parser(SimpleReader in) {
        Sequence<String> words = new Sequence1L<String>();
        boolean atEnd = false;

        while (!atEnd) {
            String line = in.nextLine();
            int i = 0;

            while (line.length() != 0) {
                if (i >= line.length()) {
                    words.add(0, line);
                    line = "";
                } else if (!Character.isAlphabetic(line.charAt(i))) {
                    if (i != 0) {
                        String word = line.substring(0, i);
                        words.add(0, word.toLowerCase());

                        line = line.substring(i);
                        i = -1;
                    } else if (i == 0) {
                        line = line.substring(1);
                        i = -1;
                    }
                }
                i++;
            }
            atEnd = in.atEOS();
        }

        return words;
    }

    /**
     * Sort function sorts the words in the given sequence alphabetically and
     * then returns the sorted sequence.
     *
     * @param words
     *            The sequence of words found in the input file.
     *
     * @return words The sorted sequence of words.
     */
    private static Sequence<String> sort(Sequence<String> words) {
        boolean sorted = false;

        while (!sorted) {
            int length = words.length();
            int sortedLength = 0;

            for (int i = 0; i < words.length() - 1; i++) {
                for (int j = 0; j < words.length(); j++) {
                    if (words.entry(i).charAt(0) < words.entry(j).charAt(0)) {

                        String word1 = words.entry(i);
                        words.replaceEntry(i, words.entry(j));
                        words.replaceEntry(j, word1);

                    } else if (words.entry(i).equals(words.entry(j)) || words
                            .entry(i).charAt(0) > words.entry(j).charAt(0)) {
                        sortedLength++;
                    } else if (words.entry(i).charAt(0) == words.entry(j)
                            .charAt(0)) {
                        if (words.entry(i).length() < words.entry(j).length()) {
                            String word1 = words.entry(i);
                            words.replaceEntry(i, words.entry(j));
                            words.replaceEntry(j, word1);
                        } else if (){
           
                                || words.entry(i).charAt(1) < words.entry(j)
                                        .charAt(1)) {

                                String word1 = words.entry(i);
                                words.replaceEntry(i, words.entry(j));
                                words.replaceEntry(j, word1);
                           }
                        }
                    }
                }
            }

            if (length < sortedLength) {
                sorted = true;
            }

        }

        Sequence<String> sortedWords = new Sequence1L<String>();
        Set<String> totalWords = new Set1L<String>();

        for (int k = 0; k < words.length(); k++) {
            if (sortedWords.length() == 0) {
                sortedWords.add(0, words.entry(k));
                totalWords.add(words.entry(k));
            } else if (!totalWords.contains(words.entry(k))) {
                sortedWords.add(0, words.entry(k));
                totalWords.add(words.entry(k));
            }
        }

        sortedWords.flip();
        return sortedWords;
    }

    /**
     * Counting function intended to count the occurrences of each word in the
     * sequence and return a list of simple objects each containing the given
     * word and the number of times it was seen.
     *
     * @param words
     *            The sequence of words parsed from the text file.
     *
     * @return occurrences The list of maps each containing the word and its
     *         number of occurrences.
     */
    private static Map<String, Integer> counter(Sequence<String> words) {
        Map<String, Integer> occurrences = new Map1L<String, Integer>();

        for (int i = 0; i < words.length(); i++) {
            if (occurrences.hasKey(words.entry(i))) {
                int value = occurrences.value(words.entry(i));
                occurrences.remove(words.entry(i));
                occurrences.add(words.entry(i), value + 1);
            } else if (!occurrences.hasKey(words.entry(i))) {
                occurrences.add(words.entry(i), 1);
            }
        }

        return occurrences;
    }

    /**
     * Output function creates the output HTML file that is returned to the
     * client for UI viewing of the processed information.
     *
     * @param occurrences
     *            The list of maps containing the given words and their
     *            occurrences.
     *
     * @param name
     *            The name of the output file for the title.
     * @param out
     *            The system.output line for writing to a receiving file.
     */
    private static void outputFunction(Map<String, Integer> occurrences,
            String name, SimpleWriter out, Sequence<String> sorted) {

        out.println("<!DOCTYPE html>\r\n" + "<html lang=\"en\">\r\n"
                + "<head>\r\n" + "    <meta charset=\"UTF-8\">\r\n"
                + "    <meta name=\"viewport\" content=\"width=device-width,"
                + "initial-scale=1.0\">\r\n" + "    <title>Document</title>\r\n"
                + "</head>\r\n" + "<body><h1>" + name
                + "</h1><table><tr><th>Word</th><th>Occurrences</th></tr>");

        for (int i = 0; i < sorted.length(); i++) {
            out.println("<tr><td>" + sorted.entry(i) + "</td><td>"
                    + occurrences.value(sorted.entry(i)) + "</td></tr>");
        }

        out.println("</table></body></html>");

    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        out.println("Input File Name: ");
        String inputFile = in.nextLine();
        out.println("Output File Name: ");
        String outputFile = in.nextLine();

        SimpleReader input = new SimpleReader1L(inputFile);
        SimpleWriter output = new SimpleWriter1L(outputFile);

        Sequence<String> words = parser(input);
        Sequence<String> sorted = sort(words);
        Map<String, Integer> occurrences = counter(words);

        out.println(words);
        out.println(sorted);

        outputFunction(occurrences, outputFile, output, sorted);

        in.close();
        out.close();
    }

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-01-19 02:37:29.708
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-01-19 02:37:29.709
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-01-19 02:37:32.841
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import components.map.Map;
import components.map.Map1L;
import components.sequence.Sequence;
import components.sequence.Sequence1L;
import components.set.Set;
import components.set.Set1L;
import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;

/**
 * Simple HelloWorld program (clear of Checkstyle and SpotBugs warnings).
 *
 * @author Evan Frisbie
 */
public final class WordCounter {

    /**
     * No argument constructor--private to prevent instantiation.
     */
    private WordCounter() {
        // no code needed here
    }

    /**
     * Parsing function intended to parse words from input file into a sequence.
     * Assumes that words will be split my non-alphabetic characters. Assumes
     * that no word is split between lines.
     *
     * @param in
     *            The system.input line connected to the text file.
     *
     * @return wordList The list of words found by the parsing function.
     */
    private static Sequence<String> parser(SimpleReader in) {
        Sequence<String> words = new Sequence1L<String>();
        boolean atEnd = false;

        while (!atEnd) {
            String line = in.nextLine();
            int i = 0;

            while (line.length() != 0) {
                if (i >= line.length()) {
                    words.add(0, line);
                    line = "";
                } else if (!Character.isAlphabetic(line.charAt(i))) {
                    if (i != 0) {
                        String word = line.substring(0, i);
                        words.add(0, word.toLowerCase());

                        line = line.substring(i);
                        i = -1;
                    } else if (i == 0) {
                        line = line.substring(1);
                        i = -1;
                    }
                }
                i++;
            }
            atEnd = in.atEOS();
        }

        return words;
    }

    /**
     * Sort function sorts the words in the given sequence alphabetically and
     * then returns the sorted sequence.
     *
     * @param words
     *            The sequence of words found in the input file.
     *
     * @return words The sorted sequence of words.
     */
    private static Sequence<String> sort(Sequence<String> words) {
        boolean sorted = false;

        while (!sorted) {
            int length = words.length();
            int sortedLength = 0;

            for (int i = 0; i < words.length() - 1; i++) {
                for (int j = 0; j < words.length(); j++) {
                    if (words.entry(i).charAt(0) < words.entry(j).charAt(0)) {

                        String word1 = words.entry(i);
                        words.replaceEntry(i, words.entry(j));
                        words.replaceEntry(j, word1);

                    } else if (words.entry(i).equals(words.entry(j)) || words
                            .entry(i).charAt(0) > words.entry(j).charAt(0)) {
                        sortedLength++;
                    } else if (words.entry(i).charAt(0) == words.entry(j)
                            .charAt(0)) {
                        if (words.entry(i).length() < words.entry(j).length()) {
                            String word1 = words.entry(i);
                            words.replaceEntry(i, words.entry(j));
                            words.replaceEntry(j, word1);
                        } else if (){
           
                                || words.entry(i).charAt(1) < words.entry(j)
                                        .charAt(1)) {

                                String word1 = words.entry(i);
                                words.replaceEntry(i, words.entry(j));
                                words.replaceEntry(j, word1);
                           }
                        }
                    }
                }
            }

            if (length < sortedLength) {
                sorted = true;
            }

        }

        Sequence<String> sortedWords = new Sequence1L<String>();
        Set<String> totalWords = new Set1L<String>();

        for (int k = 0; k < words.length(); k++) {
            if (sortedWords.length() == 0) {
                sortedWords.add(0, words.entry(k));
                totalWords.add(words.entry(k));
            } else if (!totalWords.contains(words.entry(k))) {
                sortedWords.add(0, words.entry(k));
                totalWords.add(words.entry(k));
            }
        }

        sortedWords.flip();
        return sortedWords;
    }

    /**
     * Counting function intended to count the occurrences of each word in the
     * sequence and return a list of simple objects each containing the given
     * word and the number of times it was seen.
     *
     * @param words
     *            The sequence of words parsed from the text file.
     *
     * @return occurrences The list of maps each containing the word and its
     *         number of occurrences.
     */
    private static Map<String, Integer> counter(Sequence<String> words) {
        Map<String, Integer> occurrences = new Map1L<String, Integer>();

        for (int i = 0; i < words.length(); i++) {
            if (occurrences.hasKey(words.entry(i))) {
                int value = occurrences.value(words.entry(i));
                occurrences.remove(words.entry(i));
                occurrences.add(words.entry(i), value + 1);
            } else if (!occurrences.hasKey(words.entry(i))) {
                occurrences.add(words.entry(i), 1);
            }
        }

        return occurrences;
    }

    /**
     * Output function creates the output HTML file that is returned to the
     * client for UI viewing of the processed information.
     *
     * @param occurrences
     *            The list of maps containing the given words and their
     *            occurrences.
     *
     * @param name
     *            The name of the output file for the title.
     * @param out
     *            The system.output line for writing to a receiving file.
     */
    private static void outputFunction(Map<String, Integer> occurrences,
            String name, SimpleWriter out, Sequence<String> sorted) {

        out.println("<!DOCTYPE html>\r\n" + "<html lang=\"en\">\r\n"
                + "<head>\r\n" + "    <meta charset=\"UTF-8\">\r\n"
                + "    <meta name=\"viewport\" content=\"width=device-width,"
                + "initial-scale=1.0\">\r\n" + "    <title>Document</title>\r\n"
                + "</head>\r\n" + "<body><h1>" + name
                + "</h1><table><tr><th>Word</th><th>Occurrences</th></tr>");

        for (int i = 0; i < sorted.length(); i++) {
            out.println("<tr><td>" + sorted.entry(i) + "</td><td>"
                    + occurrences.value(sorted.entry(i)) + "</td></tr>");
        }

        out.println("</table></body></html>");

    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        out.println("Input File Name: ");
        String inputFile = in.nextLine();
        out.println("Output File Name: ");
        String outputFile = in.nextLine();

        SimpleReader input = new SimpleReader1L(inputFile);
        SimpleWriter output = new SimpleWriter1L(outputFile);

        Sequence<String> words = parser(input);
        Sequence<String> sorted = sort(words);
        Map<String, Integer> occurrences = counter(words);

        out.println(words);
        out.println(sorted);

        outputFunction(occurrences, outputFile, output, sorted);

        in.close();
        out.close();
    }

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.getClipboardData(ClipboardOperationAction.java:486)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.doCutCopyWithImportsOperation(ClipboardOperationAction.java:407)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.internalDoOperation(ClipboardOperationAction.java:366)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:67)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.run(ClipboardOperationAction.java:287)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:474)
	at org.eclipse.jface.commands.ActionHandler.execute(ActionHandler.java:121)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at jdk.internal.reflect.GeneratedMethodAccessor63.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:309)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:243)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:485)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:580)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:655)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:439)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1286)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1065)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1090)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1075)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1117)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1113)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1594)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4865)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:345)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4743)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5040)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(Native Method)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3658)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:643)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:550)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:171)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-01-19 02:37:32.842
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.getClipboardData(ClipboardOperationAction.java:486)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.doCutCopyWithImportsOperation(ClipboardOperationAction.java:407)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.internalDoOperation(ClipboardOperationAction.java:366)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:67)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.run(ClipboardOperationAction.java:287)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:474)
	at org.eclipse.jface.commands.ActionHandler.execute(ActionHandler.java:121)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at jdk.internal.reflect.GeneratedMethodAccessor63.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:309)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:243)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:485)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:580)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:655)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:439)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1286)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1065)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1090)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1075)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1117)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1113)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1594)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4865)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:345)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4743)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5040)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(Native Method)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3658)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:643)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:550)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:171)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-01-19 02:37:32.843
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.getClipboardData(ClipboardOperationAction.java:486)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.doCutCopyWithImportsOperation(ClipboardOperationAction.java:407)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.internalDoOperation(ClipboardOperationAction.java:366)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:67)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.run(ClipboardOperationAction.java:287)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:474)
	at org.eclipse.jface.commands.ActionHandler.execute(ActionHandler.java:121)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at jdk.internal.reflect.GeneratedMethodAccessor63.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:309)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:243)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:485)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:580)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:655)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:439)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1286)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1065)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1090)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1075)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1117)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1113)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1594)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4865)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:345)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4743)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5040)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(Native Method)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3658)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:643)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:550)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:171)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core 4 4 2024-01-19 02:37:37.598
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import components.map.Map;
import components.map.Map1L;
import components.sequence.Sequence;
import components.sequence.Sequence1L;
import components.set.Set;
import components.set.Set1L;
import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;

/**
 * Simple HelloWorld program (clear of Checkstyle and SpotBugs warnings).
 *
 * @author Evan Frisbie
 */
public final class WordCounter {

    /**
     * No argument constructor--private to prevent instantiation.
     */
    private WordCounter() {
        // no code needed here
    }

    /**
     * Parsing function intended to parse words from input file into a sequence.
     * Assumes that words will be split my non-alphabetic characters. Assumes
     * that no word is split between lines.
     *
     * @param in
     *            The system.input line connected to the text file.
     *
     * @return wordList The list of words found by the parsing function.
     */
    private static Sequence<String> parser(SimpleReader in) {
        Sequence<String> words = new Sequence1L<String>();
        boolean atEnd = false;

        while (!atEnd) {
            String line = in.nextLine();
            int i = 0;

            while (line.length() != 0) {
                if (i >= line.length()) {
                    words.add(0, line);
                    line = "";
                } else if (!Character.isAlphabetic(line.charAt(i))) {
                    if (i != 0) {
                        String word = line.substring(0, i);
                        words.add(0, word.toLowerCase());

                        line = line.substring(i);
                        i = -1;
                    } else if (i == 0) {
                        line = line.substring(1);
                        i = -1;
                    }
                }
                i++;
            }
            atEnd = in.atEOS();
        }

        return words;
    }

    /**
     * Sort function sorts the words in the given sequence alphabetically and
     * then returns the sorted sequence.
     *
     * @param words
     *            The sequence of words found in the input file.
     *
     * @return words The sorted sequence of words.
     */
    private static Sequence<String> sort(Sequence<String> words) {
        boolean sorted = false;

        while (!sorted) {
            int length = words.length();
            int sortedLength = 0;

            for (int i = 0; i < words.length() - 1; i++) {
                for (int j = 0; j < words.length(); j++) {
                    if (words.entry(i).charAt(0) < words.entry(j).charAt(0)) {

                        String word1 = words.entry(i);
                        words.replaceEntry(i, words.entry(j));
                        words.replaceEntry(j, word1);

                    } else if (words.entry(i).equals(words.entry(j)) || words
                            .entry(i).charAt(0) > words.entry(j).charAt(0)) {
                        sortedLength++;
                    } else if (words.entry(i).charAt(0) == words.entry(j)
                            .charAt(0)) {
                        if (words.entry(i).length() < words.entry(j).length()) {
                            String word1 = words.entry(i);
                            words.replaceEntry(i, words.entry(j));
                            words.replaceEntry(j, word1);
                        } else if (words.entry(i).length() < words.entry(j).length()){
           
                                || words.entry(i).charAt(1) < words.entry(j)
                                        .charAt(1)) {

                                String word1 = words.entry(i);
                                words.replaceEntry(i, words.entry(j));
                                words.replaceEntry(j, word1);
                           }
                        }
                    }
                }
            }

            if (length < sortedLength) {
                sorted = true;
            }

        }

        Sequence<String> sortedWords = new Sequence1L<String>();
        Set<String> totalWords = new Set1L<String>();

        for (int k = 0; k < words.length(); k++) {
            if (sortedWords.length() == 0) {
                sortedWords.add(0, words.entry(k));
                totalWords.add(words.entry(k));
            } else if (!totalWords.contains(words.entry(k))) {
                sortedWords.add(0, words.entry(k));
                totalWords.add(words.entry(k));
            }
        }

        sortedWords.flip();
        return sortedWords;
    }

    /**
     * Counting function intended to count the occurrences of each word in the
     * sequence and return a list of simple objects each containing the given
     * word and the number of times it was seen.
     *
     * @param words
     *            The sequence of words parsed from the text file.
     *
     * @return occurrences The list of maps each containing the word and its
     *         number of occurrences.
     */
    private static Map<String, Integer> counter(Sequence<String> words) {
        Map<String, Integer> occurrences = new Map1L<String, Integer>();

        for (int i = 0; i < words.length(); i++) {
            if (occurrences.hasKey(words.entry(i))) {
                int value = occurrences.value(words.entry(i));
                occurrences.remove(words.entry(i));
                occurrences.add(words.entry(i), value + 1);
            } else if (!occurrences.hasKey(words.entry(i))) {
                occurrences.add(words.entry(i), 1);
            }
        }

        return occurrences;
    }

    /**
     * Output function creates the output HTML file that is returned to the
     * client for UI viewing of the processed information.
     *
     * @param occurrences
     *            The list of maps containing the given words and their
     *            occurrences.
     *
     * @param name
     *            The name of the output file for the title.
     * @param out
     *            The system.output line for writing to a receiving file.
     */
    private static void outputFunction(Map<String, Integer> occurrences,
            String name, SimpleWriter out, Sequence<String> sorted) {

        out.println("<!DOCTYPE html>\r\n" + "<html lang=\"en\">\r\n"
                + "<head>\r\n" + "    <meta charset=\"UTF-8\">\r\n"
                + "    <meta name=\"viewport\" content=\"width=device-width,"
                + "initial-scale=1.0\">\r\n" + "    <title>Document</title>\r\n"
                + "</head>\r\n" + "<body><h1>" + name
                + "</h1><table><tr><th>Word</th><th>Occurrences</th></tr>");

        for (int i = 0; i < sorted.length(); i++) {
            out.println("<tr><td>" + sorted.entry(i) + "</td><td>"
                    + occurrences.value(sorted.entry(i)) + "</td></tr>");
        }

        out.println("</table></body></html>");

    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        out.println("Input File Name: ");
        String inputFile = in.nextLine();
        out.println("Output File Name: ");
        String outputFile = in.nextLine();

        SimpleReader input = new SimpleReader1L(inputFile);
        SimpleWriter output = new SimpleWriter1L(outputFile);

        Sequence<String> words = parser(input);
        Sequence<String> sorted = sort(words);
        Map<String, Integer> occurrences = counter(words);

        out.println(words);
        out.println(sorted);

        outputFunction(occurrences, outputFile, output, sorted);

        in.close();
        out.close();
    }

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2024-01-19 02:37:37.599
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2024-01-19 02:37:37.600
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2024-01-19 02:37:37.609
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import components.map.Map;
import components.map.Map1L;
import components.sequence.Sequence;
import components.sequence.Sequence1L;
import components.set.Set;
import components.set.Set1L;
import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;

/**
 * Simple HelloWorld program (clear of Checkstyle and SpotBugs warnings).
 *
 * @author Evan Frisbie
 */
public final class WordCounter {

    /**
     * No argument constructor--private to prevent instantiation.
     */
    private WordCounter() {
        // no code needed here
    }

    /**
     * Parsing function intended to parse words from input file into a sequence.
     * Assumes that words will be split my non-alphabetic characters. Assumes
     * that no word is split between lines.
     *
     * @param in
     *            The system.input line connected to the text file.
     *
     * @return wordList The list of words found by the parsing function.
     */
    private static Sequence<String> parser(SimpleReader in) {
        Sequence<String> words = new Sequence1L<String>();
        boolean atEnd = false;

        while (!atEnd) {
            String line = in.nextLine();
            int i = 0;

            while (line.length() != 0) {
                if (i >= line.length()) {
                    words.add(0, line);
                    line = "";
                } else if (!Character.isAlphabetic(line.charAt(i))) {
                    if (i != 0) {
                        String word = line.substring(0, i);
                        words.add(0, word.toLowerCase());

                        line = line.substring(i);
                        i = -1;
                    } else if (i == 0) {
                        line = line.substring(1);
                        i = -1;
                    }
                }
                i++;
            }
            atEnd = in.atEOS();
        }

        return words;
    }

    /**
     * Sort function sorts the words in the given sequence alphabetically and
     * then returns the sorted sequence.
     *
     * @param words
     *            The sequence of words found in the input file.
     *
     * @return words The sorted sequence of words.
     */
    private static Sequence<String> sort(Sequence<String> words) {
        boolean sorted = false;

        while (!sorted) {
            int length = words.length();
            int sortedLength = 0;

            for (int i = 0; i < words.length() - 1; i++) {
                for (int j = 0; j < words.length(); j++) {
                    if (words.entry(i).charAt(0) < words.entry(j).charAt(0)) {

                        String word1 = words.entry(i);
                        words.replaceEntry(i, words.entry(j));
                        words.replaceEntry(j, word1);

                    } else if (words.entry(i).equals(words.entry(j)) || words
                            .entry(i).charAt(0) > words.entry(j).charAt(0)) {
                        sortedLength++;
                    } else if (words.entry(i).charAt(0) == words.entry(j)
                            .charAt(0)) {
                        if (words.entry(i).length() < words.entry(j).length()) {
                            String word1 = words.entry(i);
                            words.replaceEntry(i, words.entry(j));
                            words.replaceEntry(j, word1);
                        } else if (words.entry(i).length() < words.entry(j).length()){
           
                                || words.entry(i).charAt(1) < words.entry(j)
                                        .charAt(1)) {

                                String word1 = words.entry(i);
                                words.replaceEntry(i, words.entry(j));
                                words.replaceEntry(j, word1);
                           }
                        }
                    }
                }
            }

            if (length < sortedLength) {
                sorted = true;
            }

        }

        Sequence<String> sortedWords = new Sequence1L<String>();
        Set<String> totalWords = new Set1L<String>();

        for (int k = 0; k < words.length(); k++) {
            if (sortedWords.length() == 0) {
                sortedWords.add(0, words.entry(k));
                totalWords.add(words.entry(k));
            } else if (!totalWords.contains(words.entry(k))) {
                sortedWords.add(0, words.entry(k));
                totalWords.add(words.entry(k));
            }
        }

        sortedWords.flip();
        return sortedWords;
    }

    /**
     * Counting function intended to count the occurrences of each word in the
     * sequence and return a list of simple objects each containing the given
     * word and the number of times it was seen.
     *
     * @param words
     *            The sequence of words parsed from the text file.
     *
     * @return occurrences The list of maps each containing the word and its
     *         number of occurrences.
     */
    private static Map<String, Integer> counter(Sequence<String> words) {
        Map<String, Integer> occurrences = new Map1L<String, Integer>();

        for (int i = 0; i < words.length(); i++) {
            if (occurrences.hasKey(words.entry(i))) {
                int value = occurrences.value(words.entry(i));
                occurrences.remove(words.entry(i));
                occurrences.add(words.entry(i), value + 1);
            } else if (!occurrences.hasKey(words.entry(i))) {
                occurrences.add(words.entry(i), 1);
            }
        }

        return occurrences;
    }

    /**
     * Output function creates the output HTML file that is returned to the
     * client for UI viewing of the processed information.
     *
     * @param occurrences
     *            The list of maps containing the given words and their
     *            occurrences.
     *
     * @param name
     *            The name of the output file for the title.
     * @param out
     *            The system.output line for writing to a receiving file.
     */
    private static void outputFunction(Map<String, Integer> occurrences,
            String name, SimpleWriter out, Sequence<String> sorted) {

        out.println("<!DOCTYPE html>\r\n" + "<html lang=\"en\">\r\n"
                + "<head>\r\n" + "    <meta charset=\"UTF-8\">\r\n"
                + "    <meta name=\"viewport\" content=\"width=device-width,"
                + "initial-scale=1.0\">\r\n" + "    <title>Document</title>\r\n"
                + "</head>\r\n" + "<body><h1>" + name
                + "</h1><table><tr><th>Word</th><th>Occurrences</th></tr>");

        for (int i = 0; i < sorted.length(); i++) {
            out.println("<tr><td>" + sorted.entry(i) + "</td><td>"
                    + occurrences.value(sorted.entry(i)) + "</td></tr>");
        }

        out.println("</table></body></html>");

    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        out.println("Input File Name: ");
        String inputFile = in.nextLine();
        out.println("Output File Name: ");
        String outputFile = in.nextLine();

        SimpleReader input = new SimpleReader1L(inputFile);
        SimpleWriter output = new SimpleWriter1L(outputFile);

        Sequence<String> words = parser(input);
        Sequence<String> sorted = sort(words);
        Map<String, Integer> occurrences = counter(words);

        out.println(words);
        out.println(sorted);

        outputFunction(occurrences, outputFile, output, sorted);

        in.close();
        out.close();
    }

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-01-19 02:37:37.617
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-01-19 02:37:37.618
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-01-19 02:37:39.237
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import components.map.Map;
import components.map.Map1L;
import components.sequence.Sequence;
import components.sequence.Sequence1L;
import components.set.Set;
import components.set.Set1L;
import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;

/**
 * Simple HelloWorld program (clear of Checkstyle and SpotBugs warnings).
 *
 * @author Evan Frisbie
 */
public final class WordCounter {

    /**
     * No argument constructor--private to prevent instantiation.
     */
    private WordCounter() {
        // no code needed here
    }

    /**
     * Parsing function intended to parse words from input file into a sequence.
     * Assumes that words will be split my non-alphabetic characters. Assumes
     * that no word is split between lines.
     *
     * @param in
     *            The system.input line connected to the text file.
     *
     * @return wordList The list of words found by the parsing function.
     */
    private static Sequence<String> parser(SimpleReader in) {
        Sequence<String> words = new Sequence1L<String>();
        boolean atEnd = false;

        while (!atEnd) {
            String line = in.nextLine();
            int i = 0;

            while (line.length() != 0) {
                if (i >= line.length()) {
                    words.add(0, line);
                    line = "";
                } else if (!Character.isAlphabetic(line.charAt(i))) {
                    if (i != 0) {
                        String word = line.substring(0, i);
                        words.add(0, word.toLowerCase());

                        line = line.substring(i);
                        i = -1;
                    } else if (i == 0) {
                        line = line.substring(1);
                        i = -1;
                    }
                }
                i++;
            }
            atEnd = in.atEOS();
        }

        return words;
    }

    /**
     * Sort function sorts the words in the given sequence alphabetically and
     * then returns the sorted sequence.
     *
     * @param words
     *            The sequence of words found in the input file.
     *
     * @return words The sorted sequence of words.
     */
    private static Sequence<String> sort(Sequence<String> words) {
        boolean sorted = false;

        while (!sorted) {
            int length = words.length();
            int sortedLength = 0;

            for (int i = 0; i < words.length() - 1; i++) {
                for (int j = 0; j < words.length(); j++) {
                    if (words.entry(i).charAt(0) < words.entry(j).charAt(0)) {

                        String word1 = words.entry(i);
                        words.replaceEntry(i, words.entry(j));
                        words.replaceEntry(j, word1);

                    } else if (words.entry(i).equals(words.entry(j)) || words
                            .entry(i).charAt(0) > words.entry(j).charAt(0)) {
                        sortedLength++;
                    } else if (words.entry(i).charAt(0) == words.entry(j)
                            .charAt(0)) {
                        if (words.entry(i).length() < words.entry(j).length()) {
                            String word1 = words.entry(i);
                            words.replaceEntry(i, words.entry(j));
                            words.replaceEntry(j, word1);
                        } else if (words.entry(i).length() < words.entry(j).length()){
           
                                || words.entry(i).charAt(1) < words.entry(j)
                                        .charAt(1)) {

                                String word1 = words.entry(i);
                                words.replaceEntry(i, words.entry(j));
                                words.replaceEntry(j, word1);
                           }
                        }
                    }
                }
            }

            if (length < sortedLength) {
                sorted = true;
            }

        }

        Sequence<String> sortedWords = new Sequence1L<String>();
        Set<String> totalWords = new Set1L<String>();

        for (int k = 0; k < words.length(); k++) {
            if (sortedWords.length() == 0) {
                sortedWords.add(0, words.entry(k));
                totalWords.add(words.entry(k));
            } else if (!totalWords.contains(words.entry(k))) {
                sortedWords.add(0, words.entry(k));
                totalWords.add(words.entry(k));
            }
        }

        sortedWords.flip();
        return sortedWords;
    }

    /**
     * Counting function intended to count the occurrences of each word in the
     * sequence and return a list of simple objects each containing the given
     * word and the number of times it was seen.
     *
     * @param words
     *            The sequence of words parsed from the text file.
     *
     * @return occurrences The list of maps each containing the word and its
     *         number of occurrences.
     */
    private static Map<String, Integer> counter(Sequence<String> words) {
        Map<String, Integer> occurrences = new Map1L<String, Integer>();

        for (int i = 0; i < words.length(); i++) {
            if (occurrences.hasKey(words.entry(i))) {
                int value = occurrences.value(words.entry(i));
                occurrences.remove(words.entry(i));
                occurrences.add(words.entry(i), value + 1);
            } else if (!occurrences.hasKey(words.entry(i))) {
                occurrences.add(words.entry(i), 1);
            }
        }

        return occurrences;
    }

    /**
     * Output function creates the output HTML file that is returned to the
     * client for UI viewing of the processed information.
     *
     * @param occurrences
     *            The list of maps containing the given words and their
     *            occurrences.
     *
     * @param name
     *            The name of the output file for the title.
     * @param out
     *            The system.output line for writing to a receiving file.
     */
    private static void outputFunction(Map<String, Integer> occurrences,
            String name, SimpleWriter out, Sequence<String> sorted) {

        out.println("<!DOCTYPE html>\r\n" + "<html lang=\"en\">\r\n"
                + "<head>\r\n" + "    <meta charset=\"UTF-8\">\r\n"
                + "    <meta name=\"viewport\" content=\"width=device-width,"
                + "initial-scale=1.0\">\r\n" + "    <title>Document</title>\r\n"
                + "</head>\r\n" + "<body><h1>" + name
                + "</h1><table><tr><th>Word</th><th>Occurrences</th></tr>");

        for (int i = 0; i < sorted.length(); i++) {
            out.println("<tr><td>" + sorted.entry(i) + "</td><td>"
                    + occurrences.value(sorted.entry(i)) + "</td></tr>");
        }

        out.println("</table></body></html>");

    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        out.println("Input File Name: ");
        String inputFile = in.nextLine();
        out.println("Output File Name: ");
        String outputFile = in.nextLine();

        SimpleReader input = new SimpleReader1L(inputFile);
        SimpleWriter output = new SimpleWriter1L(outputFile);

        Sequence<String> words = parser(input);
        Sequence<String> sorted = sort(words);
        Map<String, Integer> occurrences = counter(words);

        out.println(words);
        out.println(sorted);

        outputFunction(occurrences, outputFile, output, sorted);

        in.close();
        out.close();
    }

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-01-19 02:37:39.238
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-01-19 02:37:39.238
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-01-19 02:37:40.942
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import components.map.Map;
import components.map.Map1L;
import components.sequence.Sequence;
import components.sequence.Sequence1L;
import components.set.Set;
import components.set.Set1L;
import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;

/**
 * Simple HelloWorld program (clear of Checkstyle and SpotBugs warnings).
 *
 * @author Evan Frisbie
 */
public final class WordCounter {

    /**
     * No argument constructor--private to prevent instantiation.
     */
    private WordCounter() {
        // no code needed here
    }

    /**
     * Parsing function intended to parse words from input file into a sequence.
     * Assumes that words will be split my non-alphabetic characters. Assumes
     * that no word is split between lines.
     *
     * @param in
     *            The system.input line connected to the text file.
     *
     * @return wordList The list of words found by the parsing function.
     */
    private static Sequence<String> parser(SimpleReader in) {
        Sequence<String> words = new Sequence1L<String>();
        boolean atEnd = false;

        while (!atEnd) {
            String line = in.nextLine();
            int i = 0;

            while (line.length() != 0) {
                if (i >= line.length()) {
                    words.add(0, line);
                    line = "";
                } else if (!Character.isAlphabetic(line.charAt(i))) {
                    if (i != 0) {
                        String word = line.substring(0, i);
                        words.add(0, word.toLowerCase());

                        line = line.substring(i);
                        i = -1;
                    } else if (i == 0) {
                        line = line.substring(1);
                        i = -1;
                    }
                }
                i++;
            }
            atEnd = in.atEOS();
        }

        return words;
    }

    /**
     * Sort function sorts the words in the given sequence alphabetically and
     * then returns the sorted sequence.
     *
     * @param words
     *            The sequence of words found in the input file.
     *
     * @return words The sorted sequence of words.
     */
    private static Sequence<String> sort(Sequence<String> words) {
        boolean sorted = false;

        while (!sorted) {
            int length = words.length();
            int sortedLength = 0;

            for (int i = 0; i < words.length() - 1; i++) {
                for (int j = 0; j < words.length(); j++) {
                    if (words.entry(i).charAt(0) < words.entry(j).charAt(0)) {

                        String word1 = words.entry(i);
                        words.replaceEntry(i, words.entry(j));
                        words.replaceEntry(j, word1);

                    } else if (words.entry(i).equals(words.entry(j)) || words
                            .entry(i).charAt(0) > words.entry(j).charAt(0)) {
                        sortedLength++;
                    } else if (words.entry(i).charAt(0) == words.entry(j)
                            .charAt(0)) {
                        if (words.entry(i).length() < words.entry(j).length()) {
                            String word1 = words.entry(i);
                            words.replaceEntry(i, words.entry(j));
                            words.replaceEntry(j, word1);
                        } else if (words.entry(i).length( > ) < words.entry(j).length()){
           
                                || words.entry(i).charAt(1) < words.entry(j)
                                        .charAt(1)) {

                                String word1 = words.entry(i);
                                words.replaceEntry(i, words.entry(j));
                                words.replaceEntry(j, word1);
                           }
                        }
                    }
                }
            }

            if (length < sortedLength) {
                sorted = true;
            }

        }

        Sequence<String> sortedWords = new Sequence1L<String>();
        Set<String> totalWords = new Set1L<String>();

        for (int k = 0; k < words.length(); k++) {
            if (sortedWords.length() == 0) {
                sortedWords.add(0, words.entry(k));
                totalWords.add(words.entry(k));
            } else if (!totalWords.contains(words.entry(k))) {
                sortedWords.add(0, words.entry(k));
                totalWords.add(words.entry(k));
            }
        }

        sortedWords.flip();
        return sortedWords;
    }

    /**
     * Counting function intended to count the occurrences of each word in the
     * sequence and return a list of simple objects each containing the given
     * word and the number of times it was seen.
     *
     * @param words
     *            The sequence of words parsed from the text file.
     *
     * @return occurrences The list of maps each containing the word and its
     *         number of occurrences.
     */
    private static Map<String, Integer> counter(Sequence<String> words) {
        Map<String, Integer> occurrences = new Map1L<String, Integer>();

        for (int i = 0; i < words.length(); i++) {
            if (occurrences.hasKey(words.entry(i))) {
                int value = occurrences.value(words.entry(i));
                occurrences.remove(words.entry(i));
                occurrences.add(words.entry(i), value + 1);
            } else if (!occurrences.hasKey(words.entry(i))) {
                occurrences.add(words.entry(i), 1);
            }
        }

        return occurrences;
    }

    /**
     * Output function creates the output HTML file that is returned to the
     * client for UI viewing of the processed information.
     *
     * @param occurrences
     *            The list of maps containing the given words and their
     *            occurrences.
     *
     * @param name
     *            The name of the output file for the title.
     * @param out
     *            The system.output line for writing to a receiving file.
     */
    private static void outputFunction(Map<String, Integer> occurrences,
            String name, SimpleWriter out, Sequence<String> sorted) {

        out.println("<!DOCTYPE html>\r\n" + "<html lang=\"en\">\r\n"
                + "<head>\r\n" + "    <meta charset=\"UTF-8\">\r\n"
                + "    <meta name=\"viewport\" content=\"width=device-width,"
                + "initial-scale=1.0\">\r\n" + "    <title>Document</title>\r\n"
                + "</head>\r\n" + "<body><h1>" + name
                + "</h1><table><tr><th>Word</th><th>Occurrences</th></tr>");

        for (int i = 0; i < sorted.length(); i++) {
            out.println("<tr><td>" + sorted.entry(i) + "</td><td>"
                    + occurrences.value(sorted.entry(i)) + "</td></tr>");
        }

        out.println("</table></body></html>");

    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        out.println("Input File Name: ");
        String inputFile = in.nextLine();
        out.println("Output File Name: ");
        String outputFile = in.nextLine();

        SimpleReader input = new SimpleReader1L(inputFile);
        SimpleWriter output = new SimpleWriter1L(outputFile);

        Sequence<String> words = parser(input);
        Sequence<String> sorted = sort(words);
        Map<String, Integer> occurrences = counter(words);

        out.println(words);
        out.println(sorted);

        outputFunction(occurrences, outputFile, output, sorted);

        in.close();
        out.close();
    }

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2024-01-19 02:37:40.948
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2024-01-19 02:37:40.948
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2024-01-19 02:37:40.957
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import components.map.Map;
import components.map.Map1L;
import components.sequence.Sequence;
import components.sequence.Sequence1L;
import components.set.Set;
import components.set.Set1L;
import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;

/**
 * Simple HelloWorld program (clear of Checkstyle and SpotBugs warnings).
 *
 * @author Evan Frisbie
 */
public final class WordCounter {

    /**
     * No argument constructor--private to prevent instantiation.
     */
    private WordCounter() {
        // no code needed here
    }

    /**
     * Parsing function intended to parse words from input file into a sequence.
     * Assumes that words will be split my non-alphabetic characters. Assumes
     * that no word is split between lines.
     *
     * @param in
     *            The system.input line connected to the text file.
     *
     * @return wordList The list of words found by the parsing function.
     */
    private static Sequence<String> parser(SimpleReader in) {
        Sequence<String> words = new Sequence1L<String>();
        boolean atEnd = false;

        while (!atEnd) {
            String line = in.nextLine();
            int i = 0;

            while (line.length() != 0) {
                if (i >= line.length()) {
                    words.add(0, line);
                    line = "";
                } else if (!Character.isAlphabetic(line.charAt(i))) {
                    if (i != 0) {
                        String word = line.substring(0, i);
                        words.add(0, word.toLowerCase());

                        line = line.substring(i);
                        i = -1;
                    } else if (i == 0) {
                        line = line.substring(1);
                        i = -1;
                    }
                }
                i++;
            }
            atEnd = in.atEOS();
        }

        return words;
    }

    /**
     * Sort function sorts the words in the given sequence alphabetically and
     * then returns the sorted sequence.
     *
     * @param words
     *            The sequence of words found in the input file.
     *
     * @return words The sorted sequence of words.
     */
    private static Sequence<String> sort(Sequence<String> words) {
        boolean sorted = false;

        while (!sorted) {
            int length = words.length();
            int sortedLength = 0;

            for (int i = 0; i < words.length() - 1; i++) {
                for (int j = 0; j < words.length(); j++) {
                    if (words.entry(i).charAt(0) < words.entry(j).charAt(0)) {

                        String word1 = words.entry(i);
                        words.replaceEntry(i, words.entry(j));
                        words.replaceEntry(j, word1);

                    } else if (words.entry(i).equals(words.entry(j)) || words
                            .entry(i).charAt(0) > words.entry(j).charAt(0)) {
                        sortedLength++;
                    } else if (words.entry(i).charAt(0) == words.entry(j)
                            .charAt(0)) {
                        if (words.entry(i).length() < words.entry(j).length()) {
                            String word1 = words.entry(i);
                            words.replaceEntry(i, words.entry(j));
                            words.replaceEntry(j, word1);
                        } else if (words.entry(i).length( > ) < words.entry(j).length()){
           
                                || words.entry(i).charAt(1) < words.entry(j)
                                        .charAt(1)) {

                                String word1 = words.entry(i);
                                words.replaceEntry(i, words.entry(j));
                                words.replaceEntry(j, word1);
                           }
                        }
                    }
                }
            }

            if (length < sortedLength) {
                sorted = true;
            }

        }

        Sequence<String> sortedWords = new Sequence1L<String>();
        Set<String> totalWords = new Set1L<String>();

        for (int k = 0; k < words.length(); k++) {
            if (sortedWords.length() == 0) {
                sortedWords.add(0, words.entry(k));
                totalWords.add(words.entry(k));
            } else if (!totalWords.contains(words.entry(k))) {
                sortedWords.add(0, words.entry(k));
                totalWords.add(words.entry(k));
            }
        }

        sortedWords.flip();
        return sortedWords;
    }

    /**
     * Counting function intended to count the occurrences of each word in the
     * sequence and return a list of simple objects each containing the given
     * word and the number of times it was seen.
     *
     * @param words
     *            The sequence of words parsed from the text file.
     *
     * @return occurrences The list of maps each containing the word and its
     *         number of occurrences.
     */
    private static Map<String, Integer> counter(Sequence<String> words) {
        Map<String, Integer> occurrences = new Map1L<String, Integer>();

        for (int i = 0; i < words.length(); i++) {
            if (occurrences.hasKey(words.entry(i))) {
                int value = occurrences.value(words.entry(i));
                occurrences.remove(words.entry(i));
                occurrences.add(words.entry(i), value + 1);
            } else if (!occurrences.hasKey(words.entry(i))) {
                occurrences.add(words.entry(i), 1);
            }
        }

        return occurrences;
    }

    /**
     * Output function creates the output HTML file that is returned to the
     * client for UI viewing of the processed information.
     *
     * @param occurrences
     *            The list of maps containing the given words and their
     *            occurrences.
     *
     * @param name
     *            The name of the output file for the title.
     * @param out
     *            The system.output line for writing to a receiving file.
     */
    private static void outputFunction(Map<String, Integer> occurrences,
            String name, SimpleWriter out, Sequence<String> sorted) {

        out.println("<!DOCTYPE html>\r\n" + "<html lang=\"en\">\r\n"
                + "<head>\r\n" + "    <meta charset=\"UTF-8\">\r\n"
                + "    <meta name=\"viewport\" content=\"width=device-width,"
                + "initial-scale=1.0\">\r\n" + "    <title>Document</title>\r\n"
                + "</head>\r\n" + "<body><h1>" + name
                + "</h1><table><tr><th>Word</th><th>Occurrences</th></tr>");

        for (int i = 0; i < sorted.length(); i++) {
            out.println("<tr><td>" + sorted.entry(i) + "</td><td>"
                    + occurrences.value(sorted.entry(i)) + "</td></tr>");
        }

        out.println("</table></body></html>");

    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        out.println("Input File Name: ");
        String inputFile = in.nextLine();
        out.println("Output File Name: ");
        String outputFile = in.nextLine();

        SimpleReader input = new SimpleReader1L(inputFile);
        SimpleWriter output = new SimpleWriter1L(outputFile);

        Sequence<String> words = parser(input);
        Sequence<String> sorted = sort(words);
        Map<String, Integer> occurrences = counter(words);

        out.println(words);
        out.println(sorted);

        outputFunction(occurrences, outputFile, output, sorted);

        in.close();
        out.close();
    }

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-01-19 02:37:40.958
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-01-19 02:37:40.959
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-01-19 02:37:41.477
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import components.map.Map;
import components.map.Map1L;
import components.sequence.Sequence;
import components.sequence.Sequence1L;
import components.set.Set;
import components.set.Set1L;
import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;

/**
 * Simple HelloWorld program (clear of Checkstyle and SpotBugs warnings).
 *
 * @author Evan Frisbie
 */
public final class WordCounter {

    /**
     * No argument constructor--private to prevent instantiation.
     */
    private WordCounter() {
        // no code needed here
    }

    /**
     * Parsing function intended to parse words from input file into a sequence.
     * Assumes that words will be split my non-alphabetic characters. Assumes
     * that no word is split between lines.
     *
     * @param in
     *            The system.input line connected to the text file.
     *
     * @return wordList The list of words found by the parsing function.
     */
    private static Sequence<String> parser(SimpleReader in) {
        Sequence<String> words = new Sequence1L<String>();
        boolean atEnd = false;

        while (!atEnd) {
            String line = in.nextLine();
            int i = 0;

            while (line.length() != 0) {
                if (i >= line.length()) {
                    words.add(0, line);
                    line = "";
                } else if (!Character.isAlphabetic(line.charAt(i))) {
                    if (i != 0) {
                        String word = line.substring(0, i);
                        words.add(0, word.toLowerCase());

                        line = line.substring(i);
                        i = -1;
                    } else if (i == 0) {
                        line = line.substring(1);
                        i = -1;
                    }
                }
                i++;
            }
            atEnd = in.atEOS();
        }

        return words;
    }

    /**
     * Sort function sorts the words in the given sequence alphabetically and
     * then returns the sorted sequence.
     *
     * @param words
     *            The sequence of words found in the input file.
     *
     * @return words The sorted sequence of words.
     */
    private static Sequence<String> sort(Sequence<String> words) {
        boolean sorted = false;

        while (!sorted) {
            int length = words.length();
            int sortedLength = 0;

            for (int i = 0; i < words.length() - 1; i++) {
                for (int j = 0; j < words.length(); j++) {
                    if (words.entry(i).charAt(0) < words.entry(j).charAt(0)) {

                        String word1 = words.entry(i);
                        words.replaceEntry(i, words.entry(j));
                        words.replaceEntry(j, word1);

                    } else if (words.entry(i).equals(words.entry(j)) || words
                            .entry(i).charAt(0) > words.entry(j).charAt(0)) {
                        sortedLength++;
                    } else if (words.entry(i).charAt(0) == words.entry(j)
                            .charAt(0)) {
                        if (words.entry(i).length() < words.entry(j).length()) {
                            String word1 = words.entry(i);
                            words.replaceEntry(i, words.entry(j));
                            words.replaceEntry(j, word1);
                        } else if (words.entry(i).length( > 0) < words.entry(j).length()){
           
                                || words.entry(i).charAt(1) < words.entry(j)
                                        .charAt(1)) {

                                String word1 = words.entry(i);
                                words.replaceEntry(i, words.entry(j));
                                words.replaceEntry(j, word1);
                           }
                        }
                    }
                }
            }

            if (length < sortedLength) {
                sorted = true;
            }

        }

        Sequence<String> sortedWords = new Sequence1L<String>();
        Set<String> totalWords = new Set1L<String>();

        for (int k = 0; k < words.length(); k++) {
            if (sortedWords.length() == 0) {
                sortedWords.add(0, words.entry(k));
                totalWords.add(words.entry(k));
            } else if (!totalWords.contains(words.entry(k))) {
                sortedWords.add(0, words.entry(k));
                totalWords.add(words.entry(k));
            }
        }

        sortedWords.flip();
        return sortedWords;
    }

    /**
     * Counting function intended to count the occurrences of each word in the
     * sequence and return a list of simple objects each containing the given
     * word and the number of times it was seen.
     *
     * @param words
     *            The sequence of words parsed from the text file.
     *
     * @return occurrences The list of maps each containing the word and its
     *         number of occurrences.
     */
    private static Map<String, Integer> counter(Sequence<String> words) {
        Map<String, Integer> occurrences = new Map1L<String, Integer>();

        for (int i = 0; i < words.length(); i++) {
            if (occurrences.hasKey(words.entry(i))) {
                int value = occurrences.value(words.entry(i));
                occurrences.remove(words.entry(i));
                occurrences.add(words.entry(i), value + 1);
            } else if (!occurrences.hasKey(words.entry(i))) {
                occurrences.add(words.entry(i), 1);
            }
        }

        return occurrences;
    }

    /**
     * Output function creates the output HTML file that is returned to the
     * client for UI viewing of the processed information.
     *
     * @param occurrences
     *            The list of maps containing the given words and their
     *            occurrences.
     *
     * @param name
     *            The name of the output file for the title.
     * @param out
     *            The system.output line for writing to a receiving file.
     */
    private static void outputFunction(Map<String, Integer> occurrences,
            String name, SimpleWriter out, Sequence<String> sorted) {

        out.println("<!DOCTYPE html>\r\n" + "<html lang=\"en\">\r\n"
                + "<head>\r\n" + "    <meta charset=\"UTF-8\">\r\n"
                + "    <meta name=\"viewport\" content=\"width=device-width,"
                + "initial-scale=1.0\">\r\n" + "    <title>Document</title>\r\n"
                + "</head>\r\n" + "<body><h1>" + name
                + "</h1><table><tr><th>Word</th><th>Occurrences</th></tr>");

        for (int i = 0; i < sorted.length(); i++) {
            out.println("<tr><td>" + sorted.entry(i) + "</td><td>"
                    + occurrences.value(sorted.entry(i)) + "</td></tr>");
        }

        out.println("</table></body></html>");

    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        out.println("Input File Name: ");
        String inputFile = in.nextLine();
        out.println("Output File Name: ");
        String outputFile = in.nextLine();

        SimpleReader input = new SimpleReader1L(inputFile);
        SimpleWriter output = new SimpleWriter1L(outputFile);

        Sequence<String> words = parser(input);
        Sequence<String> sorted = sort(words);
        Map<String, Integer> occurrences = counter(words);

        out.println(words);
        out.println(sorted);

        outputFunction(occurrences, outputFile, output, sorted);

        in.close();
        out.close();
    }

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2024-01-19 02:37:41.478
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2024-01-19 02:37:41.479
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2024-01-19 02:37:42.461
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import components.map.Map;
import components.map.Map1L;
import components.sequence.Sequence;
import components.sequence.Sequence1L;
import components.set.Set;
import components.set.Set1L;
import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;

/**
 * Simple HelloWorld program (clear of Checkstyle and SpotBugs warnings).
 *
 * @author Evan Frisbie
 */
public final class WordCounter {

    /**
     * No argument constructor--private to prevent instantiation.
     */
    private WordCounter() {
        // no code needed here
    }

    /**
     * Parsing function intended to parse words from input file into a sequence.
     * Assumes that words will be split my non-alphabetic characters. Assumes
     * that no word is split between lines.
     *
     * @param in
     *            The system.input line connected to the text file.
     *
     * @return wordList The list of words found by the parsing function.
     */
    private static Sequence<String> parser(SimpleReader in) {
        Sequence<String> words = new Sequence1L<String>();
        boolean atEnd = false;

        while (!atEnd) {
            String line = in.nextLine();
            int i = 0;

            while (line.length() != 0) {
                if (i >= line.length()) {
                    words.add(0, line);
                    line = "";
                } else if (!Character.isAlphabetic(line.charAt(i))) {
                    if (i != 0) {
                        String word = line.substring(0, i);
                        words.add(0, word.toLowerCase());

                        line = line.substring(i);
                        i = -1;
                    } else if (i == 0) {
                        line = line.substring(1);
                        i = -1;
                    }
                }
                i++;
            }
            atEnd = in.atEOS();
        }

        return words;
    }

    /**
     * Sort function sorts the words in the given sequence alphabetically and
     * then returns the sorted sequence.
     *
     * @param words
     *            The sequence of words found in the input file.
     *
     * @return words The sorted sequence of words.
     */
    private static Sequence<String> sort(Sequence<String> words) {
        boolean sorted = false;

        while (!sorted) {
            int length = words.length();
            int sortedLength = 0;

            for (int i = 0; i < words.length() - 1; i++) {
                for (int j = 0; j < words.length(); j++) {
                    if (words.entry(i).charAt(0) < words.entry(j).charAt(0)) {

                        String word1 = words.entry(i);
                        words.replaceEntry(i, words.entry(j));
                        words.replaceEntry(j, word1);

                    } else if (words.entry(i).equals(words.entry(j)) || words
                            .entry(i).charAt(0) > words.entry(j).charAt(0)) {
                        sortedLength++;
                    } else if (words.entry(i).charAt(0) == words.entry(j)
                            .charAt(0)) {
                        if (words.entry(i).length() < words.entry(j).length()) {
                            String word1 = words.entry(i);
                            words.replaceEntry(i, words.entry(j));
                            words.replaceEntry(j, word1);
                        } else if (words.entry(i).length( > 1) < words.entry(j).length()){
           
                                || words.entry(i).charAt(1) < words.entry(j)
                                        .charAt(1)) {

                                String word1 = words.entry(i);
                                words.replaceEntry(i, words.entry(j));
                                words.replaceEntry(j, word1);
                           }
                        }
                    }
                }
            }

            if (length < sortedLength) {
                sorted = true;
            }

        }

        Sequence<String> sortedWords = new Sequence1L<String>();
        Set<String> totalWords = new Set1L<String>();

        for (int k = 0; k < words.length(); k++) {
            if (sortedWords.length() == 0) {
                sortedWords.add(0, words.entry(k));
                totalWords.add(words.entry(k));
            } else if (!totalWords.contains(words.entry(k))) {
                sortedWords.add(0, words.entry(k));
                totalWords.add(words.entry(k));
            }
        }

        sortedWords.flip();
        return sortedWords;
    }

    /**
     * Counting function intended to count the occurrences of each word in the
     * sequence and return a list of simple objects each containing the given
     * word and the number of times it was seen.
     *
     * @param words
     *            The sequence of words parsed from the text file.
     *
     * @return occurrences The list of maps each containing the word and its
     *         number of occurrences.
     */
    private static Map<String, Integer> counter(Sequence<String> words) {
        Map<String, Integer> occurrences = new Map1L<String, Integer>();

        for (int i = 0; i < words.length(); i++) {
            if (occurrences.hasKey(words.entry(i))) {
                int value = occurrences.value(words.entry(i));
                occurrences.remove(words.entry(i));
                occurrences.add(words.entry(i), value + 1);
            } else if (!occurrences.hasKey(words.entry(i))) {
                occurrences.add(words.entry(i), 1);
            }
        }

        return occurrences;
    }

    /**
     * Output function creates the output HTML file that is returned to the
     * client for UI viewing of the processed information.
     *
     * @param occurrences
     *            The list of maps containing the given words and their
     *            occurrences.
     *
     * @param name
     *            The name of the output file for the title.
     * @param out
     *            The system.output line for writing to a receiving file.
     */
    private static void outputFunction(Map<String, Integer> occurrences,
            String name, SimpleWriter out, Sequence<String> sorted) {

        out.println("<!DOCTYPE html>\r\n" + "<html lang=\"en\">\r\n"
                + "<head>\r\n" + "    <meta charset=\"UTF-8\">\r\n"
                + "    <meta name=\"viewport\" content=\"width=device-width,"
                + "initial-scale=1.0\">\r\n" + "    <title>Document</title>\r\n"
                + "</head>\r\n" + "<body><h1>" + name
                + "</h1><table><tr><th>Word</th><th>Occurrences</th></tr>");

        for (int i = 0; i < sorted.length(); i++) {
            out.println("<tr><td>" + sorted.entry(i) + "</td><td>"
                    + occurrences.value(sorted.entry(i)) + "</td></tr>");
        }

        out.println("</table></body></html>");

    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        out.println("Input File Name: ");
        String inputFile = in.nextLine();
        out.println("Output File Name: ");
        String outputFile = in.nextLine();

        SimpleReader input = new SimpleReader1L(inputFile);
        SimpleWriter output = new SimpleWriter1L(outputFile);

        Sequence<String> words = parser(input);
        Sequence<String> sorted = sort(words);
        Map<String, Integer> occurrences = counter(words);

        out.println(words);
        out.println(sorted);

        outputFunction(occurrences, outputFile, output, sorted);

        in.close();
        out.close();
    }

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2024-01-19 02:37:42.462
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2024-01-19 02:37:42.464
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2024-01-19 02:37:42.540
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import components.map.Map;
import components.map.Map1L;
import components.sequence.Sequence;
import components.sequence.Sequence1L;
import components.set.Set;
import components.set.Set1L;
import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;

/**
 * Simple HelloWorld program (clear of Checkstyle and SpotBugs warnings).
 *
 * @author Evan Frisbie
 */
public final class WordCounter {

    /**
     * No argument constructor--private to prevent instantiation.
     */
    private WordCounter() {
        // no code needed here
    }

    /**
     * Parsing function intended to parse words from input file into a sequence.
     * Assumes that words will be split my non-alphabetic characters. Assumes
     * that no word is split between lines.
     *
     * @param in
     *            The system.input line connected to the text file.
     *
     * @return wordList The list of words found by the parsing function.
     */
    private static Sequence<String> parser(SimpleReader in) {
        Sequence<String> words = new Sequence1L<String>();
        boolean atEnd = false;

        while (!atEnd) {
            String line = in.nextLine();
            int i = 0;

            while (line.length() != 0) {
                if (i >= line.length()) {
                    words.add(0, line);
                    line = "";
                } else if (!Character.isAlphabetic(line.charAt(i))) {
                    if (i != 0) {
                        String word = line.substring(0, i);
                        words.add(0, word.toLowerCase());

                        line = line.substring(i);
                        i = -1;
                    } else if (i == 0) {
                        line = line.substring(1);
                        i = -1;
                    }
                }
                i++;
            }
            atEnd = in.atEOS();
        }

        return words;
    }

    /**
     * Sort function sorts the words in the given sequence alphabetically and
     * then returns the sorted sequence.
     *
     * @param words
     *            The sequence of words found in the input file.
     *
     * @return words The sorted sequence of words.
     */
    private static Sequence<String> sort(Sequence<String> words) {
        boolean sorted = false;

        while (!sorted) {
            int length = words.length();
            int sortedLength = 0;

            for (int i = 0; i < words.length() - 1; i++) {
                for (int j = 0; j < words.length(); j++) {
                    if (words.entry(i).charAt(0) < words.entry(j).charAt(0)) {

                        String word1 = words.entry(i);
                        words.replaceEntry(i, words.entry(j));
                        words.replaceEntry(j, word1);

                    } else if (words.entry(i).equals(words.entry(j)) || words
                            .entry(i).charAt(0) > words.entry(j).charAt(0)) {
                        sortedLength++;
                    } else if (words.entry(i).charAt(0) == words.entry(j)
                            .charAt(0)) {
                        if (words.entry(i).length() < words.entry(j).length()) {
                            String word1 = words.entry(i);
                            words.replaceEntry(i, words.entry(j));
                            words.replaceEntry(j, word1);
                        } else if (words.entry(i).length( > 1) < words.entry(j).length()){
           
                                || words.entry(i).charAt(1) < words.entry(j)
                                        .charAt(1)) {

                                String word1 = words.entry(i);
                                words.replaceEntry(i, words.entry(j));
                                words.replaceEntry(j, word1);
                           }
                        }
                    }
                }
            }

            if (length < sortedLength) {
                sorted = true;
            }

        }

        Sequence<String> sortedWords = new Sequence1L<String>();
        Set<String> totalWords = new Set1L<String>();

        for (int k = 0; k < words.length(); k++) {
            if (sortedWords.length() == 0) {
                sortedWords.add(0, words.entry(k));
                totalWords.add(words.entry(k));
            } else if (!totalWords.contains(words.entry(k))) {
                sortedWords.add(0, words.entry(k));
                totalWords.add(words.entry(k));
            }
        }

        sortedWords.flip();
        return sortedWords;
    }

    /**
     * Counting function intended to count the occurrences of each word in the
     * sequence and return a list of simple objects each containing the given
     * word and the number of times it was seen.
     *
     * @param words
     *            The sequence of words parsed from the text file.
     *
     * @return occurrences The list of maps each containing the word and its
     *         number of occurrences.
     */
    private static Map<String, Integer> counter(Sequence<String> words) {
        Map<String, Integer> occurrences = new Map1L<String, Integer>();

        for (int i = 0; i < words.length(); i++) {
            if (occurrences.hasKey(words.entry(i))) {
                int value = occurrences.value(words.entry(i));
                occurrences.remove(words.entry(i));
                occurrences.add(words.entry(i), value + 1);
            } else if (!occurrences.hasKey(words.entry(i))) {
                occurrences.add(words.entry(i), 1);
            }
        }

        return occurrences;
    }

    /**
     * Output function creates the output HTML file that is returned to the
     * client for UI viewing of the processed information.
     *
     * @param occurrences
     *            The list of maps containing the given words and their
     *            occurrences.
     *
     * @param name
     *            The name of the output file for the title.
     * @param out
     *            The system.output line for writing to a receiving file.
     */
    private static void outputFunction(Map<String, Integer> occurrences,
            String name, SimpleWriter out, Sequence<String> sorted) {

        out.println("<!DOCTYPE html>\r\n" + "<html lang=\"en\">\r\n"
                + "<head>\r\n" + "    <meta charset=\"UTF-8\">\r\n"
                + "    <meta name=\"viewport\" content=\"width=device-width,"
                + "initial-scale=1.0\">\r\n" + "    <title>Document</title>\r\n"
                + "</head>\r\n" + "<body><h1>" + name
                + "</h1><table><tr><th>Word</th><th>Occurrences</th></tr>");

        for (int i = 0; i < sorted.length(); i++) {
            out.println("<tr><td>" + sorted.entry(i) + "</td><td>"
                    + occurrences.value(sorted.entry(i)) + "</td></tr>");
        }

        out.println("</table></body></html>");

    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        out.println("Input File Name: ");
        String inputFile = in.nextLine();
        out.println("Output File Name: ");
        String outputFile = in.nextLine();

        SimpleReader input = new SimpleReader1L(inputFile);
        SimpleWriter output = new SimpleWriter1L(outputFile);

        Sequence<String> words = parser(input);
        Sequence<String> sorted = sort(words);
        Map<String, Integer> occurrences = counter(words);

        out.println(words);
        out.println(sorted);

        outputFunction(occurrences, outputFile, output, sorted);

        in.close();
        out.close();
    }

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-01-19 02:37:42.541
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-01-19 02:37:42.541
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-01-19 02:37:43.325
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import components.map.Map;
import components.map.Map1L;
import components.sequence.Sequence;
import components.sequence.Sequence1L;
import components.set.Set;
import components.set.Set1L;
import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;

/**
 * Simple HelloWorld program (clear of Checkstyle and SpotBugs warnings).
 *
 * @author Evan Frisbie
 */
public final class WordCounter {

    /**
     * No argument constructor--private to prevent instantiation.
     */
    private WordCounter() {
        // no code needed here
    }

    /**
     * Parsing function intended to parse words from input file into a sequence.
     * Assumes that words will be split my non-alphabetic characters. Assumes
     * that no word is split between lines.
     *
     * @param in
     *            The system.input line connected to the text file.
     *
     * @return wordList The list of words found by the parsing function.
     */
    private static Sequence<String> parser(SimpleReader in) {
        Sequence<String> words = new Sequence1L<String>();
        boolean atEnd = false;

        while (!atEnd) {
            String line = in.nextLine();
            int i = 0;

            while (line.length() != 0) {
                if (i >= line.length()) {
                    words.add(0, line);
                    line = "";
                } else if (!Character.isAlphabetic(line.charAt(i))) {
                    if (i != 0) {
                        String word = line.substring(0, i);
                        words.add(0, word.toLowerCase());

                        line = line.substring(i);
                        i = -1;
                    } else if (i == 0) {
                        line = line.substring(1);
                        i = -1;
                    }
                }
                i++;
            }
            atEnd = in.atEOS();
        }

        return words;
    }

    /**
     * Sort function sorts the words in the given sequence alphabetically and
     * then returns the sorted sequence.
     *
     * @param words
     *            The sequence of words found in the input file.
     *
     * @return words The sorted sequence of words.
     */
    private static Sequence<String> sort(Sequence<String> words) {
        boolean sorted = false;

        while (!sorted) {
            int length = words.length();
            int sortedLength = 0;

            for (int i = 0; i < words.length() - 1; i++) {
                for (int j = 0; j < words.length(); j++) {
                    if (words.entry(i).charAt(0) < words.entry(j).charAt(0)) {

                        String word1 = words.entry(i);
                        words.replaceEntry(i, words.entry(j));
                        words.replaceEntry(j, word1);

                    } else if (words.entry(i).equals(words.entry(j)) || words
                            .entry(i).charAt(0) > words.entry(j).charAt(0)) {
                        sortedLength++;
                    } else if (words.entry(i).charAt(0) == words.entry(j)
                            .charAt(0)) {
                        if (words.entry(i).length() < words.entry(j).length()) {
                            String word1 = words.entry(i);
                            words.replaceEntry(i, words.entry(j));
                            words.replaceEntry(j, word1);
                        } else if (words.entry(i).length( > 1 ) < words.entry(j).length()){
           
                                || words.entry(i).charAt(1) < words.entry(j)
                                        .charAt(1)) {

                                String word1 = words.entry(i);
                                words.replaceEntry(i, words.entry(j));
                                words.replaceEntry(j, word1);
                           }
                        }
                    }
                }
            }

            if (length < sortedLength) {
                sorted = true;
            }

        }

        Sequence<String> sortedWords = new Sequence1L<String>();
        Set<String> totalWords = new Set1L<String>();

        for (int k = 0; k < words.length(); k++) {
            if (sortedWords.length() == 0) {
                sortedWords.add(0, words.entry(k));
                totalWords.add(words.entry(k));
            } else if (!totalWords.contains(words.entry(k))) {
                sortedWords.add(0, words.entry(k));
                totalWords.add(words.entry(k));
            }
        }

        sortedWords.flip();
        return sortedWords;
    }

    /**
     * Counting function intended to count the occurrences of each word in the
     * sequence and return a list of simple objects each containing the given
     * word and the number of times it was seen.
     *
     * @param words
     *            The sequence of words parsed from the text file.
     *
     * @return occurrences The list of maps each containing the word and its
     *         number of occurrences.
     */
    private static Map<String, Integer> counter(Sequence<String> words) {
        Map<String, Integer> occurrences = new Map1L<String, Integer>();

        for (int i = 0; i < words.length(); i++) {
            if (occurrences.hasKey(words.entry(i))) {
                int value = occurrences.value(words.entry(i));
                occurrences.remove(words.entry(i));
                occurrences.add(words.entry(i), value + 1);
            } else if (!occurrences.hasKey(words.entry(i))) {
                occurrences.add(words.entry(i), 1);
            }
        }

        return occurrences;
    }

    /**
     * Output function creates the output HTML file that is returned to the
     * client for UI viewing of the processed information.
     *
     * @param occurrences
     *            The list of maps containing the given words and their
     *            occurrences.
     *
     * @param name
     *            The name of the output file for the title.
     * @param out
     *            The system.output line for writing to a receiving file.
     */
    private static void outputFunction(Map<String, Integer> occurrences,
            String name, SimpleWriter out, Sequence<String> sorted) {

        out.println("<!DOCTYPE html>\r\n" + "<html lang=\"en\">\r\n"
                + "<head>\r\n" + "    <meta charset=\"UTF-8\">\r\n"
                + "    <meta name=\"viewport\" content=\"width=device-width,"
                + "initial-scale=1.0\">\r\n" + "    <title>Document</title>\r\n"
                + "</head>\r\n" + "<body><h1>" + name
                + "</h1><table><tr><th>Word</th><th>Occurrences</th></tr>");

        for (int i = 0; i < sorted.length(); i++) {
            out.println("<tr><td>" + sorted.entry(i) + "</td><td>"
                    + occurrences.value(sorted.entry(i)) + "</td></tr>");
        }

        out.println("</table></body></html>");

    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        out.println("Input File Name: ");
        String inputFile = in.nextLine();
        out.println("Output File Name: ");
        String outputFile = in.nextLine();

        SimpleReader input = new SimpleReader1L(inputFile);
        SimpleWriter output = new SimpleWriter1L(outputFile);

        Sequence<String> words = parser(input);
        Sequence<String> sorted = sort(words);
        Map<String, Integer> occurrences = counter(words);

        out.println(words);
        out.println(sorted);

        outputFunction(occurrences, outputFile, output, sorted);

        in.close();
        out.close();
    }

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2024-01-19 02:37:43.326
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2024-01-19 02:37:43.327
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2024-01-19 02:37:44.007
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import components.map.Map;
import components.map.Map1L;
import components.sequence.Sequence;
import components.sequence.Sequence1L;
import components.set.Set;
import components.set.Set1L;
import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;

/**
 * Simple HelloWorld program (clear of Checkstyle and SpotBugs warnings).
 *
 * @author Evan Frisbie
 */
public final class WordCounter {

    /**
     * No argument constructor--private to prevent instantiation.
     */
    private WordCounter() {
        // no code needed here
    }

    /**
     * Parsing function intended to parse words from input file into a sequence.
     * Assumes that words will be split my non-alphabetic characters. Assumes
     * that no word is split between lines.
     *
     * @param in
     *            The system.input line connected to the text file.
     *
     * @return wordList The list of words found by the parsing function.
     */
    private static Sequence<String> parser(SimpleReader in) {
        Sequence<String> words = new Sequence1L<String>();
        boolean atEnd = false;

        while (!atEnd) {
            String line = in.nextLine();
            int i = 0;

            while (line.length() != 0) {
                if (i >= line.length()) {
                    words.add(0, line);
                    line = "";
                } else if (!Character.isAlphabetic(line.charAt(i))) {
                    if (i != 0) {
                        String word = line.substring(0, i);
                        words.add(0, word.toLowerCase());

                        line = line.substring(i);
                        i = -1;
                    } else if (i == 0) {
                        line = line.substring(1);
                        i = -1;
                    }
                }
                i++;
            }
            atEnd = in.atEOS();
        }

        return words;
    }

    /**
     * Sort function sorts the words in the given sequence alphabetically and
     * then returns the sorted sequence.
     *
     * @param words
     *            The sequence of words found in the input file.
     *
     * @return words The sorted sequence of words.
     */
    private static Sequence<String> sort(Sequence<String> words) {
        boolean sorted = false;

        while (!sorted) {
            int length = words.length();
            int sortedLength = 0;

            for (int i = 0; i < words.length() - 1; i++) {
                for (int j = 0; j < words.length(); j++) {
                    if (words.entry(i).charAt(0) < words.entry(j).charAt(0)) {

                        String word1 = words.entry(i);
                        words.replaceEntry(i, words.entry(j));
                        words.replaceEntry(j, word1);

                    } else if (words.entry(i).equals(words.entry(j)) || words
                            .entry(i).charAt(0) > words.entry(j).charAt(0)) {
                        sortedLength++;
                    } else if (words.entry(i).charAt(0) == words.entry(j)
                            .charAt(0)) {
                        if (words.entry(i).length() < words.entry(j).length()) {
                            String word1 = words.entry(i);
                            words.replaceEntry(i, words.entry(j));
                            words.replaceEntry(j, word1);
                        } else if (words.entry(i).length( > 1  < words.entry(j).length()){
           
                                || words.entry(i).charAt(1) < words.entry(j)
                                        .charAt(1)) {

                                String word1 = words.entry(i);
                                words.replaceEntry(i, words.entry(j));
                                words.replaceEntry(j, word1);
                           }
                        }
                    }
                }
            }

            if (length < sortedLength) {
                sorted = true;
            }

        }

        Sequence<String> sortedWords = new Sequence1L<String>();
        Set<String> totalWords = new Set1L<String>();

        for (int k = 0; k < words.length(); k++) {
            if (sortedWords.length() == 0) {
                sortedWords.add(0, words.entry(k));
                totalWords.add(words.entry(k));
            } else if (!totalWords.contains(words.entry(k))) {
                sortedWords.add(0, words.entry(k));
                totalWords.add(words.entry(k));
            }
        }

        sortedWords.flip();
        return sortedWords;
    }

    /**
     * Counting function intended to count the occurrences of each word in the
     * sequence and return a list of simple objects each containing the given
     * word and the number of times it was seen.
     *
     * @param words
     *            The sequence of words parsed from the text file.
     *
     * @return occurrences The list of maps each containing the word and its
     *         number of occurrences.
     */
    private static Map<String, Integer> counter(Sequence<String> words) {
        Map<String, Integer> occurrences = new Map1L<String, Integer>();

        for (int i = 0; i < words.length(); i++) {
            if (occurrences.hasKey(words.entry(i))) {
                int value = occurrences.value(words.entry(i));
                occurrences.remove(words.entry(i));
                occurrences.add(words.entry(i), value + 1);
            } else if (!occurrences.hasKey(words.entry(i))) {
                occurrences.add(words.entry(i), 1);
            }
        }

        return occurrences;
    }

    /**
     * Output function creates the output HTML file that is returned to the
     * client for UI viewing of the processed information.
     *
     * @param occurrences
     *            The list of maps containing the given words and their
     *            occurrences.
     *
     * @param name
     *            The name of the output file for the title.
     * @param out
     *            The system.output line for writing to a receiving file.
     */
    private static void outputFunction(Map<String, Integer> occurrences,
            String name, SimpleWriter out, Sequence<String> sorted) {

        out.println("<!DOCTYPE html>\r\n" + "<html lang=\"en\">\r\n"
                + "<head>\r\n" + "    <meta charset=\"UTF-8\">\r\n"
                + "    <meta name=\"viewport\" content=\"width=device-width,"
                + "initial-scale=1.0\">\r\n" + "    <title>Document</title>\r\n"
                + "</head>\r\n" + "<body><h1>" + name
                + "</h1><table><tr><th>Word</th><th>Occurrences</th></tr>");

        for (int i = 0; i < sorted.length(); i++) {
            out.println("<tr><td>" + sorted.entry(i) + "</td><td>"
                    + occurrences.value(sorted.entry(i)) + "</td></tr>");
        }

        out.println("</table></body></html>");

    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        out.println("Input File Name: ");
        String inputFile = in.nextLine();
        out.println("Output File Name: ");
        String outputFile = in.nextLine();

        SimpleReader input = new SimpleReader1L(inputFile);
        SimpleWriter output = new SimpleWriter1L(outputFile);

        Sequence<String> words = parser(input);
        Sequence<String> sorted = sort(words);
        Map<String, Integer> occurrences = counter(words);

        out.println(words);
        out.println(sorted);

        outputFunction(occurrences, outputFile, output, sorted);

        in.close();
        out.close();
    }

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2024-01-19 02:37:44.008
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2024-01-19 02:37:44.081
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2024-01-19 02:37:45.183
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import components.map.Map;
import components.map.Map1L;
import components.sequence.Sequence;
import components.sequence.Sequence1L;
import components.set.Set;
import components.set.Set1L;
import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;

/**
 * Simple HelloWorld program (clear of Checkstyle and SpotBugs warnings).
 *
 * @author Evan Frisbie
 */
public final class WordCounter {

    /**
     * No argument constructor--private to prevent instantiation.
     */
    private WordCounter() {
        // no code needed here
    }

    /**
     * Parsing function intended to parse words from input file into a sequence.
     * Assumes that words will be split my non-alphabetic characters. Assumes
     * that no word is split between lines.
     *
     * @param in
     *            The system.input line connected to the text file.
     *
     * @return wordList The list of words found by the parsing function.
     */
    private static Sequence<String> parser(SimpleReader in) {
        Sequence<String> words = new Sequence1L<String>();
        boolean atEnd = false;

        while (!atEnd) {
            String line = in.nextLine();
            int i = 0;

            while (line.length() != 0) {
                if (i >= line.length()) {
                    words.add(0, line);
                    line = "";
                } else if (!Character.isAlphabetic(line.charAt(i))) {
                    if (i != 0) {
                        String word = line.substring(0, i);
                        words.add(0, word.toLowerCase());

                        line = line.substring(i);
                        i = -1;
                    } else if (i == 0) {
                        line = line.substring(1);
                        i = -1;
                    }
                }
                i++;
            }
            atEnd = in.atEOS();
        }

        return words;
    }

    /**
     * Sort function sorts the words in the given sequence alphabetically and
     * then returns the sorted sequence.
     *
     * @param words
     *            The sequence of words found in the input file.
     *
     * @return words The sorted sequence of words.
     */
    private static Sequence<String> sort(Sequence<String> words) {
        boolean sorted = false;

        while (!sorted) {
            int length = words.length();
            int sortedLength = 0;

            for (int i = 0; i < words.length() - 1; i++) {
                for (int j = 0; j < words.length(); j++) {
                    if (words.entry(i).charAt(0) < words.entry(j).charAt(0)) {

                        String word1 = words.entry(i);
                        words.replaceEntry(i, words.entry(j));
                        words.replaceEntry(j, word1);

                    } else if (words.entry(i).equals(words.entry(j)) || words
                            .entry(i).charAt(0) > words.entry(j).charAt(0)) {
                        sortedLength++;
                    } else if (words.entry(i).charAt(0) == words.entry(j)
                            .charAt(0)) {
                        if (words.entry(i).length() < words.entry(j).length()) {
                            String word1 = words.entry(i);
                            words.replaceEntry(i, words.entry(j));
                            words.replaceEntry(j, word1);
                        } else if (words.entry(i).length( > 1 && < words.entry(j).length()){
           
                                || words.entry(i).charAt(1) < words.entry(j)
                                        .charAt(1)) {

                                String word1 = words.entry(i);
                                words.replaceEntry(i, words.entry(j));
                                words.replaceEntry(j, word1);
                           }
                        }
                    }
                }
            }

            if (length < sortedLength) {
                sorted = true;
            }

        }

        Sequence<String> sortedWords = new Sequence1L<String>();
        Set<String> totalWords = new Set1L<String>();

        for (int k = 0; k < words.length(); k++) {
            if (sortedWords.length() == 0) {
                sortedWords.add(0, words.entry(k));
                totalWords.add(words.entry(k));
            } else if (!totalWords.contains(words.entry(k))) {
                sortedWords.add(0, words.entry(k));
                totalWords.add(words.entry(k));
            }
        }

        sortedWords.flip();
        return sortedWords;
    }

    /**
     * Counting function intended to count the occurrences of each word in the
     * sequence and return a list of simple objects each containing the given
     * word and the number of times it was seen.
     *
     * @param words
     *            The sequence of words parsed from the text file.
     *
     * @return occurrences The list of maps each containing the word and its
     *         number of occurrences.
     */
    private static Map<String, Integer> counter(Sequence<String> words) {
        Map<String, Integer> occurrences = new Map1L<String, Integer>();

        for (int i = 0; i < words.length(); i++) {
            if (occurrences.hasKey(words.entry(i))) {
                int value = occurrences.value(words.entry(i));
                occurrences.remove(words.entry(i));
                occurrences.add(words.entry(i), value + 1);
            } else if (!occurrences.hasKey(words.entry(i))) {
                occurrences.add(words.entry(i), 1);
            }
        }

        return occurrences;
    }

    /**
     * Output function creates the output HTML file that is returned to the
     * client for UI viewing of the processed information.
     *
     * @param occurrences
     *            The list of maps containing the given words and their
     *            occurrences.
     *
     * @param name
     *            The name of the output file for the title.
     * @param out
     *            The system.output line for writing to a receiving file.
     */
    private static void outputFunction(Map<String, Integer> occurrences,
            String name, SimpleWriter out, Sequence<String> sorted) {

        out.println("<!DOCTYPE html>\r\n" + "<html lang=\"en\">\r\n"
                + "<head>\r\n" + "    <meta charset=\"UTF-8\">\r\n"
                + "    <meta name=\"viewport\" content=\"width=device-width,"
                + "initial-scale=1.0\">\r\n" + "    <title>Document</title>\r\n"
                + "</head>\r\n" + "<body><h1>" + name
                + "</h1><table><tr><th>Word</th><th>Occurrences</th></tr>");

        for (int i = 0; i < sorted.length(); i++) {
            out.println("<tr><td>" + sorted.entry(i) + "</td><td>"
                    + occurrences.value(sorted.entry(i)) + "</td></tr>");
        }

        out.println("</table></body></html>");

    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        out.println("Input File Name: ");
        String inputFile = in.nextLine();
        out.println("Output File Name: ");
        String outputFile = in.nextLine();

        SimpleReader input = new SimpleReader1L(inputFile);
        SimpleWriter output = new SimpleWriter1L(outputFile);

        Sequence<String> words = parser(input);
        Sequence<String> sorted = sort(words);
        Map<String, Integer> occurrences = counter(words);

        out.println(words);
        out.println(sorted);

        outputFunction(occurrences, outputFile, output, sorted);

        in.close();
        out.close();
    }

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2024-01-19 02:37:45.184
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2024-01-19 02:37:45.185
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2024-01-19 02:37:45.196
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import components.map.Map;
import components.map.Map1L;
import components.sequence.Sequence;
import components.sequence.Sequence1L;
import components.set.Set;
import components.set.Set1L;
import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;

/**
 * Simple HelloWorld program (clear of Checkstyle and SpotBugs warnings).
 *
 * @author Evan Frisbie
 */
public final class WordCounter {

    /**
     * No argument constructor--private to prevent instantiation.
     */
    private WordCounter() {
        // no code needed here
    }

    /**
     * Parsing function intended to parse words from input file into a sequence.
     * Assumes that words will be split my non-alphabetic characters. Assumes
     * that no word is split between lines.
     *
     * @param in
     *            The system.input line connected to the text file.
     *
     * @return wordList The list of words found by the parsing function.
     */
    private static Sequence<String> parser(SimpleReader in) {
        Sequence<String> words = new Sequence1L<String>();
        boolean atEnd = false;

        while (!atEnd) {
            String line = in.nextLine();
            int i = 0;

            while (line.length() != 0) {
                if (i >= line.length()) {
                    words.add(0, line);
                    line = "";
                } else if (!Character.isAlphabetic(line.charAt(i))) {
                    if (i != 0) {
                        String word = line.substring(0, i);
                        words.add(0, word.toLowerCase());

                        line = line.substring(i);
                        i = -1;
                    } else if (i == 0) {
                        line = line.substring(1);
                        i = -1;
                    }
                }
                i++;
            }
            atEnd = in.atEOS();
        }

        return words;
    }

    /**
     * Sort function sorts the words in the given sequence alphabetically and
     * then returns the sorted sequence.
     *
     * @param words
     *            The sequence of words found in the input file.
     *
     * @return words The sorted sequence of words.
     */
    private static Sequence<String> sort(Sequence<String> words) {
        boolean sorted = false;

        while (!sorted) {
            int length = words.length();
            int sortedLength = 0;

            for (int i = 0; i < words.length() - 1; i++) {
                for (int j = 0; j < words.length(); j++) {
                    if (words.entry(i).charAt(0) < words.entry(j).charAt(0)) {

                        String word1 = words.entry(i);
                        words.replaceEntry(i, words.entry(j));
                        words.replaceEntry(j, word1);

                    } else if (words.entry(i).equals(words.entry(j)) || words
                            .entry(i).charAt(0) > words.entry(j).charAt(0)) {
                        sortedLength++;
                    } else if (words.entry(i).charAt(0) == words.entry(j)
                            .charAt(0)) {
                        if (words.entry(i).length() < words.entry(j).length()) {
                            String word1 = words.entry(i);
                            words.replaceEntry(i, words.entry(j));
                            words.replaceEntry(j, word1);
                        } else if (words.entry(i).length( > 1 && < words.entry(j).length()){
           
                                || words.entry(i).charAt(1) < words.entry(j)
                                        .charAt(1)) {

                                String word1 = words.entry(i);
                                words.replaceEntry(i, words.entry(j));
                                words.replaceEntry(j, word1);
                           }
                        }
                    }
                }
            }

            if (length < sortedLength) {
                sorted = true;
            }

        }

        Sequence<String> sortedWords = new Sequence1L<String>();
        Set<String> totalWords = new Set1L<String>();

        for (int k = 0; k < words.length(); k++) {
            if (sortedWords.length() == 0) {
                sortedWords.add(0, words.entry(k));
                totalWords.add(words.entry(k));
            } else if (!totalWords.contains(words.entry(k))) {
                sortedWords.add(0, words.entry(k));
                totalWords.add(words.entry(k));
            }
        }

        sortedWords.flip();
        return sortedWords;
    }

    /**
     * Counting function intended to count the occurrences of each word in the
     * sequence and return a list of simple objects each containing the given
     * word and the number of times it was seen.
     *
     * @param words
     *            The sequence of words parsed from the text file.
     *
     * @return occurrences The list of maps each containing the word and its
     *         number of occurrences.
     */
    private static Map<String, Integer> counter(Sequence<String> words) {
        Map<String, Integer> occurrences = new Map1L<String, Integer>();

        for (int i = 0; i < words.length(); i++) {
            if (occurrences.hasKey(words.entry(i))) {
                int value = occurrences.value(words.entry(i));
                occurrences.remove(words.entry(i));
                occurrences.add(words.entry(i), value + 1);
            } else if (!occurrences.hasKey(words.entry(i))) {
                occurrences.add(words.entry(i), 1);
            }
        }

        return occurrences;
    }

    /**
     * Output function creates the output HTML file that is returned to the
     * client for UI viewing of the processed information.
     *
     * @param occurrences
     *            The list of maps containing the given words and their
     *            occurrences.
     *
     * @param name
     *            The name of the output file for the title.
     * @param out
     *            The system.output line for writing to a receiving file.
     */
    private static void outputFunction(Map<String, Integer> occurrences,
            String name, SimpleWriter out, Sequence<String> sorted) {

        out.println("<!DOCTYPE html>\r\n" + "<html lang=\"en\">\r\n"
                + "<head>\r\n" + "    <meta charset=\"UTF-8\">\r\n"
                + "    <meta name=\"viewport\" content=\"width=device-width,"
                + "initial-scale=1.0\">\r\n" + "    <title>Document</title>\r\n"
                + "</head>\r\n" + "<body><h1>" + name
                + "</h1><table><tr><th>Word</th><th>Occurrences</th></tr>");

        for (int i = 0; i < sorted.length(); i++) {
            out.println("<tr><td>" + sorted.entry(i) + "</td><td>"
                    + occurrences.value(sorted.entry(i)) + "</td></tr>");
        }

        out.println("</table></body></html>");

    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        out.println("Input File Name: ");
        String inputFile = in.nextLine();
        out.println("Output File Name: ");
        String outputFile = in.nextLine();

        SimpleReader input = new SimpleReader1L(inputFile);
        SimpleWriter output = new SimpleWriter1L(outputFile);

        Sequence<String> words = parser(input);
        Sequence<String> sorted = sort(words);
        Map<String, Integer> occurrences = counter(words);

        out.println(words);
        out.println(sorted);

        outputFunction(occurrences, outputFile, output, sorted);

        in.close();
        out.close();
    }

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-01-19 02:37:45.196
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-01-19 02:37:45.197
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-01-19 02:37:46.316
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import components.map.Map;
import components.map.Map1L;
import components.sequence.Sequence;
import components.sequence.Sequence1L;
import components.set.Set;
import components.set.Set1L;
import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;

/**
 * Simple HelloWorld program (clear of Checkstyle and SpotBugs warnings).
 *
 * @author Evan Frisbie
 */
public final class WordCounter {

    /**
     * No argument constructor--private to prevent instantiation.
     */
    private WordCounter() {
        // no code needed here
    }

    /**
     * Parsing function intended to parse words from input file into a sequence.
     * Assumes that words will be split my non-alphabetic characters. Assumes
     * that no word is split between lines.
     *
     * @param in
     *            The system.input line connected to the text file.
     *
     * @return wordList The list of words found by the parsing function.
     */
    private static Sequence<String> parser(SimpleReader in) {
        Sequence<String> words = new Sequence1L<String>();
        boolean atEnd = false;

        while (!atEnd) {
            String line = in.nextLine();
            int i = 0;

            while (line.length() != 0) {
                if (i >= line.length()) {
                    words.add(0, line);
                    line = "";
                } else if (!Character.isAlphabetic(line.charAt(i))) {
                    if (i != 0) {
                        String word = line.substring(0, i);
                        words.add(0, word.toLowerCase());

                        line = line.substring(i);
                        i = -1;
                    } else if (i == 0) {
                        line = line.substring(1);
                        i = -1;
                    }
                }
                i++;
            }
            atEnd = in.atEOS();
        }

        return words;
    }

    /**
     * Sort function sorts the words in the given sequence alphabetically and
     * then returns the sorted sequence.
     *
     * @param words
     *            The sequence of words found in the input file.
     *
     * @return words The sorted sequence of words.
     */
    private static Sequence<String> sort(Sequence<String> words) {
        boolean sorted = false;

        while (!sorted) {
            int length = words.length();
            int sortedLength = 0;

            for (int i = 0; i < words.length() - 1; i++) {
                for (int j = 0; j < words.length(); j++) {
                    if (words.entry(i).charAt(0) < words.entry(j).charAt(0)) {

                        String word1 = words.entry(i);
                        words.replaceEntry(i, words.entry(j));
                        words.replaceEntry(j, word1);

                    } else if (words.entry(i).equals(words.entry(j)) || words
                            .entry(i).charAt(0) > words.entry(j).charAt(0)) {
                        sortedLength++;
                    } else if (words.entry(i).charAt(0) == words.entry(j)
                            .charAt(0)) {
                        if (words.entry(i).length() < words.entry(j).length()) {
                            String word1 = words.entry(i);
                            words.replaceEntry(i, words.entry(j));
                            words.replaceEntry(j, word1);
                        } else if (words.entry(i).length( > 1 && < words.entry(j).length()){
           
                                || words.entry(i).charAt(1) < words.entry(j)
                                        .charAt(1)) {

                                String word1 = words.entry(i);
                                words.replaceEntry(i, words.entry(j));
                                words.replaceEntry(j, word1);
                           }
                        }
                    }
                }
            }

            if (length < sortedLength) {
                sorted = true;
            }

        }

        Sequence<String> sortedWords = new Sequence1L<String>();
        Set<String> totalWords = new Set1L<String>();

        for (int k = 0; k < words.length(); k++) {
            if (sortedWords.length() == 0) {
                sortedWords.add(0, words.entry(k));
                totalWords.add(words.entry(k));
            } else if (!totalWords.contains(words.entry(k))) {
                sortedWords.add(0, words.entry(k));
                totalWords.add(words.entry(k));
            }
        }

        sortedWords.flip();
        return sortedWords;
    }

    /**
     * Counting function intended to count the occurrences of each word in the
     * sequence and return a list of simple objects each containing the given
     * word and the number of times it was seen.
     *
     * @param words
     *            The sequence of words parsed from the text file.
     *
     * @return occurrences The list of maps each containing the word and its
     *         number of occurrences.
     */
    private static Map<String, Integer> counter(Sequence<String> words) {
        Map<String, Integer> occurrences = new Map1L<String, Integer>();

        for (int i = 0; i < words.length(); i++) {
            if (occurrences.hasKey(words.entry(i))) {
                int value = occurrences.value(words.entry(i));
                occurrences.remove(words.entry(i));
                occurrences.add(words.entry(i), value + 1);
            } else if (!occurrences.hasKey(words.entry(i))) {
                occurrences.add(words.entry(i), 1);
            }
        }

        return occurrences;
    }

    /**
     * Output function creates the output HTML file that is returned to the
     * client for UI viewing of the processed information.
     *
     * @param occurrences
     *            The list of maps containing the given words and their
     *            occurrences.
     *
     * @param name
     *            The name of the output file for the title.
     * @param out
     *            The system.output line for writing to a receiving file.
     */
    private static void outputFunction(Map<String, Integer> occurrences,
            String name, SimpleWriter out, Sequence<String> sorted) {

        out.println("<!DOCTYPE html>\r\n" + "<html lang=\"en\">\r\n"
                + "<head>\r\n" + "    <meta charset=\"UTF-8\">\r\n"
                + "    <meta name=\"viewport\" content=\"width=device-width,"
                + "initial-scale=1.0\">\r\n" + "    <title>Document</title>\r\n"
                + "</head>\r\n" + "<body><h1>" + name
                + "</h1><table><tr><th>Word</th><th>Occurrences</th></tr>");

        for (int i = 0; i < sorted.length(); i++) {
            out.println("<tr><td>" + sorted.entry(i) + "</td><td>"
                    + occurrences.value(sorted.entry(i)) + "</td></tr>");
        }

        out.println("</table></body></html>");

    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        out.println("Input File Name: ");
        String inputFile = in.nextLine();
        out.println("Output File Name: ");
        String outputFile = in.nextLine();

        SimpleReader input = new SimpleReader1L(inputFile);
        SimpleWriter output = new SimpleWriter1L(outputFile);

        Sequence<String> words = parser(input);
        Sequence<String> sorted = sort(words);
        Map<String, Integer> occurrences = counter(words);

        out.println(words);
        out.println(sorted);

        outputFunction(occurrences, outputFile, output, sorted);

        in.close();
        out.close();
    }

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-01-19 02:37:46.317
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-01-19 02:37:46.317
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-01-19 02:37:47.639
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import components.map.Map;
import components.map.Map1L;
import components.sequence.Sequence;
import components.sequence.Sequence1L;
import components.set.Set;
import components.set.Set1L;
import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;

/**
 * Simple HelloWorld program (clear of Checkstyle and SpotBugs warnings).
 *
 * @author Evan Frisbie
 */
public final class WordCounter {

    /**
     * No argument constructor--private to prevent instantiation.
     */
    private WordCounter() {
        // no code needed here
    }

    /**
     * Parsing function intended to parse words from input file into a sequence.
     * Assumes that words will be split my non-alphabetic characters. Assumes
     * that no word is split between lines.
     *
     * @param in
     *            The system.input line connected to the text file.
     *
     * @return wordList The list of words found by the parsing function.
     */
    private static Sequence<String> parser(SimpleReader in) {
        Sequence<String> words = new Sequence1L<String>();
        boolean atEnd = false;

        while (!atEnd) {
            String line = in.nextLine();
            int i = 0;

            while (line.length() != 0) {
                if (i >= line.length()) {
                    words.add(0, line);
                    line = "";
                } else if (!Character.isAlphabetic(line.charAt(i))) {
                    if (i != 0) {
                        String word = line.substring(0, i);
                        words.add(0, word.toLowerCase());

                        line = line.substring(i);
                        i = -1;
                    } else if (i == 0) {
                        line = line.substring(1);
                        i = -1;
                    }
                }
                i++;
            }
            atEnd = in.atEOS();
        }

        return words;
    }

    /**
     * Sort function sorts the words in the given sequence alphabetically and
     * then returns the sorted sequence.
     *
     * @param words
     *            The sequence of words found in the input file.
     *
     * @return words The sorted sequence of words.
     */
    private static Sequence<String> sort(Sequence<String> words) {
        boolean sorted = false;

        while (!sorted) {
            int length = words.length();
            int sortedLength = 0;

            for (int i = 0; i < words.length() - 1; i++) {
                for (int j = 0; j < words.length(); j++) {
                    if (words.entry(i).charAt(0) < words.entry(j).charAt(0)) {

                        String word1 = words.entry(i);
                        words.replaceEntry(i, words.entry(j));
                        words.replaceEntry(j, word1);

                    } else if (words.entry(i).equals(words.entry(j)) || words
                            .entry(i).charAt(0) > words.entry(j).charAt(0)) {
                        sortedLength++;
                    } else if (words.entry(i).charAt(0) == words.entry(j)
                            .charAt(0)) {
                        if (words.entry(i).length() < words.entry(j).length()) {
                            String word1 = words.entry(i);
                            words.replaceEntry(i, words.entry(j));
                            words.replaceEntry(j, word1);
                        } else if (words.entry(i).length( > 1 && < words.entry(j).length()){
           
                                || words.entry(i).charAt(1) < words.entry(j)
                                        .charAt(1)) {

                                String word1 = words.entry(i);
                                words.replaceEntry(i, words.entry(j));
                                words.replaceEntry(j, word1);
                           }
                        }
                    }
                }
            }

            if (length < sortedLength) {
                sorted = true;
            }

        }

        Sequence<String> sortedWords = new Sequence1L<String>();
        Set<String> totalWords = new Set1L<String>();

        for (int k = 0; k < words.length(); k++) {
            if (sortedWords.length() == 0) {
                sortedWords.add(0, words.entry(k));
                totalWords.add(words.entry(k));
            } else if (!totalWords.contains(words.entry(k))) {
                sortedWords.add(0, words.entry(k));
                totalWords.add(words.entry(k));
            }
        }

        sortedWords.flip();
        return sortedWords;
    }

    /**
     * Counting function intended to count the occurrences of each word in the
     * sequence and return a list of simple objects each containing the given
     * word and the number of times it was seen.
     *
     * @param words
     *            The sequence of words parsed from the text file.
     *
     * @return occurrences The list of maps each containing the word and its
     *         number of occurrences.
     */
    private static Map<String, Integer> counter(Sequence<String> words) {
        Map<String, Integer> occurrences = new Map1L<String, Integer>();

        for (int i = 0; i < words.length(); i++) {
            if (occurrences.hasKey(words.entry(i))) {
                int value = occurrences.value(words.entry(i));
                occurrences.remove(words.entry(i));
                occurrences.add(words.entry(i), value + 1);
            } else if (!occurrences.hasKey(words.entry(i))) {
                occurrences.add(words.entry(i), 1);
            }
        }

        return occurrences;
    }

    /**
     * Output function creates the output HTML file that is returned to the
     * client for UI viewing of the processed information.
     *
     * @param occurrences
     *            The list of maps containing the given words and their
     *            occurrences.
     *
     * @param name
     *            The name of the output file for the title.
     * @param out
     *            The system.output line for writing to a receiving file.
     */
    private static void outputFunction(Map<String, Integer> occurrences,
            String name, SimpleWriter out, Sequence<String> sorted) {

        out.println("<!DOCTYPE html>\r\n" + "<html lang=\"en\">\r\n"
                + "<head>\r\n" + "    <meta charset=\"UTF-8\">\r\n"
                + "    <meta name=\"viewport\" content=\"width=device-width,"
                + "initial-scale=1.0\">\r\n" + "    <title>Document</title>\r\n"
                + "</head>\r\n" + "<body><h1>" + name
                + "</h1><table><tr><th>Word</th><th>Occurrences</th></tr>");

        for (int i = 0; i < sorted.length(); i++) {
            out.println("<tr><td>" + sorted.entry(i) + "</td><td>"
                    + occurrences.value(sorted.entry(i)) + "</td></tr>");
        }

        out.println("</table></body></html>");

    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        out.println("Input File Name: ");
        String inputFile = in.nextLine();
        out.println("Output File Name: ");
        String outputFile = in.nextLine();

        SimpleReader input = new SimpleReader1L(inputFile);
        SimpleWriter output = new SimpleWriter1L(outputFile);

        Sequence<String> words = parser(input);
        Sequence<String> sorted = sort(words);
        Map<String, Integer> occurrences = counter(words);

        out.println(words);
        out.println(sorted);

        outputFunction(occurrences, outputFile, output, sorted);

        in.close();
        out.close();
    }

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-01-19 02:37:47.640
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-01-19 02:37:47.640
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-01-19 02:37:48.784
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import components.map.Map;
import components.map.Map1L;
import components.sequence.Sequence;
import components.sequence.Sequence1L;
import components.set.Set;
import components.set.Set1L;
import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;

/**
 * Simple HelloWorld program (clear of Checkstyle and SpotBugs warnings).
 *
 * @author Evan Frisbie
 */
public final class WordCounter {

    /**
     * No argument constructor--private to prevent instantiation.
     */
    private WordCounter() {
        // no code needed here
    }

    /**
     * Parsing function intended to parse words from input file into a sequence.
     * Assumes that words will be split my non-alphabetic characters. Assumes
     * that no word is split between lines.
     *
     * @param in
     *            The system.input line connected to the text file.
     *
     * @return wordList The list of words found by the parsing function.
     */
    private static Sequence<String> parser(SimpleReader in) {
        Sequence<String> words = new Sequence1L<String>();
        boolean atEnd = false;

        while (!atEnd) {
            String line = in.nextLine();
            int i = 0;

            while (line.length() != 0) {
                if (i >= line.length()) {
                    words.add(0, line);
                    line = "";
                } else if (!Character.isAlphabetic(line.charAt(i))) {
                    if (i != 0) {
                        String word = line.substring(0, i);
                        words.add(0, word.toLowerCase());

                        line = line.substring(i);
                        i = -1;
                    } else if (i == 0) {
                        line = line.substring(1);
                        i = -1;
                    }
                }
                i++;
            }
            atEnd = in.atEOS();
        }

        return words;
    }

    /**
     * Sort function sorts the words in the given sequence alphabetically and
     * then returns the sorted sequence.
     *
     * @param words
     *            The sequence of words found in the input file.
     *
     * @return words The sorted sequence of words.
     */
    private static Sequence<String> sort(Sequence<String> words) {
        boolean sorted = false;

        while (!sorted) {
            int length = words.length();
            int sortedLength = 0;

            for (int i = 0; i < words.length() - 1; i++) {
                for (int j = 0; j < words.length(); j++) {
                    if (words.entry(i).charAt(0) < words.entry(j).charAt(0)) {

                        String word1 = words.entry(i);
                        words.replaceEntry(i, words.entry(j));
                        words.replaceEntry(j, word1);

                    } else if (words.entry(i).equals(words.entry(j)) || words
                            .entry(i).charAt(0) > words.entry(j).charAt(0)) {
                        sortedLength++;
                    } else if (words.entry(i).charAt(0) == words.entry(j)
                            .charAt(0)) {
                        if (words.entry(i).length() < words.entry(j).length()) {
                            String word1 = words.entry(i);
                            words.replaceEntry(i, words.entry(j));
                            words.replaceEntry(j, word1);
                        } else if (words.entry(i).length( > 1 &&  words.entry(j).length()){
           
                                || words.entry(i).charAt(1) < words.entry(j)
                                        .charAt(1)) {

                                String word1 = words.entry(i);
                                words.replaceEntry(i, words.entry(j));
                                words.replaceEntry(j, word1);
                           }
                        }
                    }
                }
            }

            if (length < sortedLength) {
                sorted = true;
            }

        }

        Sequence<String> sortedWords = new Sequence1L<String>();
        Set<String> totalWords = new Set1L<String>();

        for (int k = 0; k < words.length(); k++) {
            if (sortedWords.length() == 0) {
                sortedWords.add(0, words.entry(k));
                totalWords.add(words.entry(k));
            } else if (!totalWords.contains(words.entry(k))) {
                sortedWords.add(0, words.entry(k));
                totalWords.add(words.entry(k));
            }
        }

        sortedWords.flip();
        return sortedWords;
    }

    /**
     * Counting function intended to count the occurrences of each word in the
     * sequence and return a list of simple objects each containing the given
     * word and the number of times it was seen.
     *
     * @param words
     *            The sequence of words parsed from the text file.
     *
     * @return occurrences The list of maps each containing the word and its
     *         number of occurrences.
     */
    private static Map<String, Integer> counter(Sequence<String> words) {
        Map<String, Integer> occurrences = new Map1L<String, Integer>();

        for (int i = 0; i < words.length(); i++) {
            if (occurrences.hasKey(words.entry(i))) {
                int value = occurrences.value(words.entry(i));
                occurrences.remove(words.entry(i));
                occurrences.add(words.entry(i), value + 1);
            } else if (!occurrences.hasKey(words.entry(i))) {
                occurrences.add(words.entry(i), 1);
            }
        }

        return occurrences;
    }

    /**
     * Output function creates the output HTML file that is returned to the
     * client for UI viewing of the processed information.
     *
     * @param occurrences
     *            The list of maps containing the given words and their
     *            occurrences.
     *
     * @param name
     *            The name of the output file for the title.
     * @param out
     *            The system.output line for writing to a receiving file.
     */
    private static void outputFunction(Map<String, Integer> occurrences,
            String name, SimpleWriter out, Sequence<String> sorted) {

        out.println("<!DOCTYPE html>\r\n" + "<html lang=\"en\">\r\n"
                + "<head>\r\n" + "    <meta charset=\"UTF-8\">\r\n"
                + "    <meta name=\"viewport\" content=\"width=device-width,"
                + "initial-scale=1.0\">\r\n" + "    <title>Document</title>\r\n"
                + "</head>\r\n" + "<body><h1>" + name
                + "</h1><table><tr><th>Word</th><th>Occurrences</th></tr>");

        for (int i = 0; i < sorted.length(); i++) {
            out.println("<tr><td>" + sorted.entry(i) + "</td><td>"
                    + occurrences.value(sorted.entry(i)) + "</td></tr>");
        }

        out.println("</table></body></html>");

    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        out.println("Input File Name: ");
        String inputFile = in.nextLine();
        out.println("Output File Name: ");
        String outputFile = in.nextLine();

        SimpleReader input = new SimpleReader1L(inputFile);
        SimpleWriter output = new SimpleWriter1L(outputFile);

        Sequence<String> words = parser(input);
        Sequence<String> sorted = sort(words);
        Map<String, Integer> occurrences = counter(words);

        out.println(words);
        out.println(sorted);

        outputFunction(occurrences, outputFile, output, sorted);

        in.close();
        out.close();
    }

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2024-01-19 02:37:48.806
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2024-01-19 02:37:48.811
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2024-01-19 02:37:50.023
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import components.map.Map;
import components.map.Map1L;
import components.sequence.Sequence;
import components.sequence.Sequence1L;
import components.set.Set;
import components.set.Set1L;
import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;

/**
 * Simple HelloWorld program (clear of Checkstyle and SpotBugs warnings).
 *
 * @author Evan Frisbie
 */
public final class WordCounter {

    /**
     * No argument constructor--private to prevent instantiation.
     */
    private WordCounter() {
        // no code needed here
    }

    /**
     * Parsing function intended to parse words from input file into a sequence.
     * Assumes that words will be split my non-alphabetic characters. Assumes
     * that no word is split between lines.
     *
     * @param in
     *            The system.input line connected to the text file.
     *
     * @return wordList The list of words found by the parsing function.
     */
    private static Sequence<String> parser(SimpleReader in) {
        Sequence<String> words = new Sequence1L<String>();
        boolean atEnd = false;

        while (!atEnd) {
            String line = in.nextLine();
            int i = 0;

            while (line.length() != 0) {
                if (i >= line.length()) {
                    words.add(0, line);
                    line = "";
                } else if (!Character.isAlphabetic(line.charAt(i))) {
                    if (i != 0) {
                        String word = line.substring(0, i);
                        words.add(0, word.toLowerCase());

                        line = line.substring(i);
                        i = -1;
                    } else if (i == 0) {
                        line = line.substring(1);
                        i = -1;
                    }
                }
                i++;
            }
            atEnd = in.atEOS();
        }

        return words;
    }

    /**
     * Sort function sorts the words in the given sequence alphabetically and
     * then returns the sorted sequence.
     *
     * @param words
     *            The sequence of words found in the input file.
     *
     * @return words The sorted sequence of words.
     */
    private static Sequence<String> sort(Sequence<String> words) {
        boolean sorted = false;

        while (!sorted) {
            int length = words.length();
            int sortedLength = 0;

            for (int i = 0; i < words.length() - 1; i++) {
                for (int j = 0; j < words.length(); j++) {
                    if (words.entry(i).charAt(0) < words.entry(j).charAt(0)) {

                        String word1 = words.entry(i);
                        words.replaceEntry(i, words.entry(j));
                        words.replaceEntry(j, word1);

                    } else if (words.entry(i).equals(words.entry(j)) || words
                            .entry(i).charAt(0) > words.entry(j).charAt(0)) {
                        sortedLength++;
                    } else if (words.entry(i).charAt(0) == words.entry(j)
                            .charAt(0)) {
                        if (words.entry(i).length() < words.entry(j).length()) {
                            String word1 = words.entry(i);
                            words.replaceEntry(i, words.entry(j));
                            words.replaceEntry(j, word1);
                        } else if (words.entry(i).length( > 1 && words.entry(j).length()){
           
                                || words.entry(i).charAt(1) < words.entry(j)
                                        .charAt(1)) {

                                String word1 = words.entry(i);
                                words.replaceEntry(i, words.entry(j));
                                words.replaceEntry(j, word1);
                           }
                        }
                    }
                }
            }

            if (length < sortedLength) {
                sorted = true;
            }

        }

        Sequence<String> sortedWords = new Sequence1L<String>();
        Set<String> totalWords = new Set1L<String>();

        for (int k = 0; k < words.length(); k++) {
            if (sortedWords.length() == 0) {
                sortedWords.add(0, words.entry(k));
                totalWords.add(words.entry(k));
            } else if (!totalWords.contains(words.entry(k))) {
                sortedWords.add(0, words.entry(k));
                totalWords.add(words.entry(k));
            }
        }

        sortedWords.flip();
        return sortedWords;
    }

    /**
     * Counting function intended to count the occurrences of each word in the
     * sequence and return a list of simple objects each containing the given
     * word and the number of times it was seen.
     *
     * @param words
     *            The sequence of words parsed from the text file.
     *
     * @return occurrences The list of maps each containing the word and its
     *         number of occurrences.
     */
    private static Map<String, Integer> counter(Sequence<String> words) {
        Map<String, Integer> occurrences = new Map1L<String, Integer>();

        for (int i = 0; i < words.length(); i++) {
            if (occurrences.hasKey(words.entry(i))) {
                int value = occurrences.value(words.entry(i));
                occurrences.remove(words.entry(i));
                occurrences.add(words.entry(i), value + 1);
            } else if (!occurrences.hasKey(words.entry(i))) {
                occurrences.add(words.entry(i), 1);
            }
        }

        return occurrences;
    }

    /**
     * Output function creates the output HTML file that is returned to the
     * client for UI viewing of the processed information.
     *
     * @param occurrences
     *            The list of maps containing the given words and their
     *            occurrences.
     *
     * @param name
     *            The name of the output file for the title.
     * @param out
     *            The system.output line for writing to a receiving file.
     */
    private static void outputFunction(Map<String, Integer> occurrences,
            String name, SimpleWriter out, Sequence<String> sorted) {

        out.println("<!DOCTYPE html>\r\n" + "<html lang=\"en\">\r\n"
                + "<head>\r\n" + "    <meta charset=\"UTF-8\">\r\n"
                + "    <meta name=\"viewport\" content=\"width=device-width,"
                + "initial-scale=1.0\">\r\n" + "    <title>Document</title>\r\n"
                + "</head>\r\n" + "<body><h1>" + name
                + "</h1><table><tr><th>Word</th><th>Occurrences</th></tr>");

        for (int i = 0; i < sorted.length(); i++) {
            out.println("<tr><td>" + sorted.entry(i) + "</td><td>"
                    + occurrences.value(sorted.entry(i)) + "</td></tr>");
        }

        out.println("</table></body></html>");

    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        out.println("Input File Name: ");
        String inputFile = in.nextLine();
        out.println("Output File Name: ");
        String outputFile = in.nextLine();

        SimpleReader input = new SimpleReader1L(inputFile);
        SimpleWriter output = new SimpleWriter1L(outputFile);

        Sequence<String> words = parser(input);
        Sequence<String> sorted = sort(words);
        Map<String, Integer> occurrences = counter(words);

        out.println(words);
        out.println(sorted);

        outputFunction(occurrences, outputFile, output, sorted);

        in.close();
        out.close();
    }

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2024-01-19 02:37:50.023
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2024-01-19 02:37:50.044
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2024-01-19 02:37:50.422
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import components.map.Map;
import components.map.Map1L;
import components.sequence.Sequence;
import components.sequence.Sequence1L;
import components.set.Set;
import components.set.Set1L;
import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;

/**
 * Simple HelloWorld program (clear of Checkstyle and SpotBugs warnings).
 *
 * @author Evan Frisbie
 */
public final class WordCounter {

    /**
     * No argument constructor--private to prevent instantiation.
     */
    private WordCounter() {
        // no code needed here
    }

    /**
     * Parsing function intended to parse words from input file into a sequence.
     * Assumes that words will be split my non-alphabetic characters. Assumes
     * that no word is split between lines.
     *
     * @param in
     *            The system.input line connected to the text file.
     *
     * @return wordList The list of words found by the parsing function.
     */
    private static Sequence<String> parser(SimpleReader in) {
        Sequence<String> words = new Sequence1L<String>();
        boolean atEnd = false;

        while (!atEnd) {
            String line = in.nextLine();
            int i = 0;

            while (line.length() != 0) {
                if (i >= line.length()) {
                    words.add(0, line);
                    line = "";
                } else if (!Character.isAlphabetic(line.charAt(i))) {
                    if (i != 0) {
                        String word = line.substring(0, i);
                        words.add(0, word.toLowerCase());

                        line = line.substring(i);
                        i = -1;
                    } else if (i == 0) {
                        line = line.substring(1);
                        i = -1;
                    }
                }
                i++;
            }
            atEnd = in.atEOS();
        }

        return words;
    }

    /**
     * Sort function sorts the words in the given sequence alphabetically and
     * then returns the sorted sequence.
     *
     * @param words
     *            The sequence of words found in the input file.
     *
     * @return words The sorted sequence of words.
     */
    private static Sequence<String> sort(Sequence<String> words) {
        boolean sorted = false;

        while (!sorted) {
            int length = words.length();
            int sortedLength = 0;

            for (int i = 0; i < words.length() - 1; i++) {
                for (int j = 0; j < words.length(); j++) {
                    if (words.entry(i).charAt(0) < words.entry(j).charAt(0)) {

                        String word1 = words.entry(i);
                        words.replaceEntry(i, words.entry(j));
                        words.replaceEntry(j, word1);

                    } else if (words.entry(i).equals(words.entry(j)) || words
                            .entry(i).charAt(0) > words.entry(j).charAt(0)) {
                        sortedLength++;
                    } else if (words.entry(i).charAt(0) == words.entry(j)
                            .charAt(0)) {
                        if (words.entry(i).length() < words.entry(j).length()) {
                            String word1 = words.entry(i);
                            words.replaceEntry(i, words.entry(j));
                            words.replaceEntry(j, word1);
                        } else if (words.entry(i).length( > 1 && words.entry(j).length()){
           
                                || words.entry(i).charAt(1) < words.entry(j)
                                        .charAt(1)) {

                                String word1 = words.entry(i);
                                words.replaceEntry(i, words.entry(j));
                                words.replaceEntry(j, word1);
                           }
                        }
                    }
                }
            }

            if (length < sortedLength) {
                sorted = true;
            }

        }

        Sequence<String> sortedWords = new Sequence1L<String>();
        Set<String> totalWords = new Set1L<String>();

        for (int k = 0; k < words.length(); k++) {
            if (sortedWords.length() == 0) {
                sortedWords.add(0, words.entry(k));
                totalWords.add(words.entry(k));
            } else if (!totalWords.contains(words.entry(k))) {
                sortedWords.add(0, words.entry(k));
                totalWords.add(words.entry(k));
            }
        }

        sortedWords.flip();
        return sortedWords;
    }

    /**
     * Counting function intended to count the occurrences of each word in the
     * sequence and return a list of simple objects each containing the given
     * word and the number of times it was seen.
     *
     * @param words
     *            The sequence of words parsed from the text file.
     *
     * @return occurrences The list of maps each containing the word and its
     *         number of occurrences.
     */
    private static Map<String, Integer> counter(Sequence<String> words) {
        Map<String, Integer> occurrences = new Map1L<String, Integer>();

        for (int i = 0; i < words.length(); i++) {
            if (occurrences.hasKey(words.entry(i))) {
                int value = occurrences.value(words.entry(i));
                occurrences.remove(words.entry(i));
                occurrences.add(words.entry(i), value + 1);
            } else if (!occurrences.hasKey(words.entry(i))) {
                occurrences.add(words.entry(i), 1);
            }
        }

        return occurrences;
    }

    /**
     * Output function creates the output HTML file that is returned to the
     * client for UI viewing of the processed information.
     *
     * @param occurrences
     *            The list of maps containing the given words and their
     *            occurrences.
     *
     * @param name
     *            The name of the output file for the title.
     * @param out
     *            The system.output line for writing to a receiving file.
     */
    private static void outputFunction(Map<String, Integer> occurrences,
            String name, SimpleWriter out, Sequence<String> sorted) {

        out.println("<!DOCTYPE html>\r\n" + "<html lang=\"en\">\r\n"
                + "<head>\r\n" + "    <meta charset=\"UTF-8\">\r\n"
                + "    <meta name=\"viewport\" content=\"width=device-width,"
                + "initial-scale=1.0\">\r\n" + "    <title>Document</title>\r\n"
                + "</head>\r\n" + "<body><h1>" + name
                + "</h1><table><tr><th>Word</th><th>Occurrences</th></tr>");

        for (int i = 0; i < sorted.length(); i++) {
            out.println("<tr><td>" + sorted.entry(i) + "</td><td>"
                    + occurrences.value(sorted.entry(i)) + "</td></tr>");
        }

        out.println("</table></body></html>");

    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        out.println("Input File Name: ");
        String inputFile = in.nextLine();
        out.println("Output File Name: ");
        String outputFile = in.nextLine();

        SimpleReader input = new SimpleReader1L(inputFile);
        SimpleWriter output = new SimpleWriter1L(outputFile);

        Sequence<String> words = parser(input);
        Sequence<String> sorted = sort(words);
        Map<String, Integer> occurrences = counter(words);

        out.println(words);
        out.println(sorted);

        outputFunction(occurrences, outputFile, output, sorted);

        in.close();
        out.close();
    }

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-01-19 02:37:50.423
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-01-19 02:37:50.424
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-01-19 02:37:50.732
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import components.map.Map;
import components.map.Map1L;
import components.sequence.Sequence;
import components.sequence.Sequence1L;
import components.set.Set;
import components.set.Set1L;
import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;

/**
 * Simple HelloWorld program (clear of Checkstyle and SpotBugs warnings).
 *
 * @author Evan Frisbie
 */
public final class WordCounter {

    /**
     * No argument constructor--private to prevent instantiation.
     */
    private WordCounter() {
        // no code needed here
    }

    /**
     * Parsing function intended to parse words from input file into a sequence.
     * Assumes that words will be split my non-alphabetic characters. Assumes
     * that no word is split between lines.
     *
     * @param in
     *            The system.input line connected to the text file.
     *
     * @return wordList The list of words found by the parsing function.
     */
    private static Sequence<String> parser(SimpleReader in) {
        Sequence<String> words = new Sequence1L<String>();
        boolean atEnd = false;

        while (!atEnd) {
            String line = in.nextLine();
            int i = 0;

            while (line.length() != 0) {
                if (i >= line.length()) {
                    words.add(0, line);
                    line = "";
                } else if (!Character.isAlphabetic(line.charAt(i))) {
                    if (i != 0) {
                        String word = line.substring(0, i);
                        words.add(0, word.toLowerCase());

                        line = line.substring(i);
                        i = -1;
                    } else if (i == 0) {
                        line = line.substring(1);
                        i = -1;
                    }
                }
                i++;
            }
            atEnd = in.atEOS();
        }

        return words;
    }

    /**
     * Sort function sorts the words in the given sequence alphabetically and
     * then returns the sorted sequence.
     *
     * @param words
     *            The sequence of words found in the input file.
     *
     * @return words The sorted sequence of words.
     */
    private static Sequence<String> sort(Sequence<String> words) {
        boolean sorted = false;

        while (!sorted) {
            int length = words.length();
            int sortedLength = 0;

            for (int i = 0; i < words.length() - 1; i++) {
                for (int j = 0; j < words.length(); j++) {
                    if (words.entry(i).charAt(0) < words.entry(j).charAt(0)) {

                        String word1 = words.entry(i);
                        words.replaceEntry(i, words.entry(j));
                        words.replaceEntry(j, word1);

                    } else if (words.entry(i).equals(words.entry(j)) || words
                            .entry(i).charAt(0) > words.entry(j).charAt(0)) {
                        sortedLength++;
                    } else if (words.entry(i).charAt(0) == words.entry(j)
                            .charAt(0)) {
                        if (words.entry(i).length() < words.entry(j).length()) {
                            String word1 = words.entry(i);
                            words.replaceEntry(i, words.entry(j));
                            words.replaceEntry(j, word1);
                        } else if (words.entry(i).length( > 1 && words.entry(j).length() ){
           
                                || words.entry(i).charAt(1) < words.entry(j)
                                        .charAt(1)) {

                                String word1 = words.entry(i);
                                words.replaceEntry(i, words.entry(j));
                                words.replaceEntry(j, word1);
                           }
                        }
                    }
                }
            }

            if (length < sortedLength) {
                sorted = true;
            }

        }

        Sequence<String> sortedWords = new Sequence1L<String>();
        Set<String> totalWords = new Set1L<String>();

        for (int k = 0; k < words.length(); k++) {
            if (sortedWords.length() == 0) {
                sortedWords.add(0, words.entry(k));
                totalWords.add(words.entry(k));
            } else if (!totalWords.contains(words.entry(k))) {
                sortedWords.add(0, words.entry(k));
                totalWords.add(words.entry(k));
            }
        }

        sortedWords.flip();
        return sortedWords;
    }

    /**
     * Counting function intended to count the occurrences of each word in the
     * sequence and return a list of simple objects each containing the given
     * word and the number of times it was seen.
     *
     * @param words
     *            The sequence of words parsed from the text file.
     *
     * @return occurrences The list of maps each containing the word and its
     *         number of occurrences.
     */
    private static Map<String, Integer> counter(Sequence<String> words) {
        Map<String, Integer> occurrences = new Map1L<String, Integer>();

        for (int i = 0; i < words.length(); i++) {
            if (occurrences.hasKey(words.entry(i))) {
                int value = occurrences.value(words.entry(i));
                occurrences.remove(words.entry(i));
                occurrences.add(words.entry(i), value + 1);
            } else if (!occurrences.hasKey(words.entry(i))) {
                occurrences.add(words.entry(i), 1);
            }
        }

        return occurrences;
    }

    /**
     * Output function creates the output HTML file that is returned to the
     * client for UI viewing of the processed information.
     *
     * @param occurrences
     *            The list of maps containing the given words and their
     *            occurrences.
     *
     * @param name
     *            The name of the output file for the title.
     * @param out
     *            The system.output line for writing to a receiving file.
     */
    private static void outputFunction(Map<String, Integer> occurrences,
            String name, SimpleWriter out, Sequence<String> sorted) {

        out.println("<!DOCTYPE html>\r\n" + "<html lang=\"en\">\r\n"
                + "<head>\r\n" + "    <meta charset=\"UTF-8\">\r\n"
                + "    <meta name=\"viewport\" content=\"width=device-width,"
                + "initial-scale=1.0\">\r\n" + "    <title>Document</title>\r\n"
                + "</head>\r\n" + "<body><h1>" + name
                + "</h1><table><tr><th>Word</th><th>Occurrences</th></tr>");

        for (int i = 0; i < sorted.length(); i++) {
            out.println("<tr><td>" + sorted.entry(i) + "</td><td>"
                    + occurrences.value(sorted.entry(i)) + "</td></tr>");
        }

        out.println("</table></body></html>");

    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        out.println("Input File Name: ");
        String inputFile = in.nextLine();
        out.println("Output File Name: ");
        String outputFile = in.nextLine();

        SimpleReader input = new SimpleReader1L(inputFile);
        SimpleWriter output = new SimpleWriter1L(outputFile);

        Sequence<String> words = parser(input);
        Sequence<String> sorted = sort(words);
        Map<String, Integer> occurrences = counter(words);

        out.println(words);
        out.println(sorted);

        outputFunction(occurrences, outputFile, output, sorted);

        in.close();
        out.close();
    }

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2024-01-19 02:37:50.733
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2024-01-19 02:37:50.738
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2024-01-19 02:37:50.781
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import components.map.Map;
import components.map.Map1L;
import components.sequence.Sequence;
import components.sequence.Sequence1L;
import components.set.Set;
import components.set.Set1L;
import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;

/**
 * Simple HelloWorld program (clear of Checkstyle and SpotBugs warnings).
 *
 * @author Evan Frisbie
 */
public final class WordCounter {

    /**
     * No argument constructor--private to prevent instantiation.
     */
    private WordCounter() {
        // no code needed here
    }

    /**
     * Parsing function intended to parse words from input file into a sequence.
     * Assumes that words will be split my non-alphabetic characters. Assumes
     * that no word is split between lines.
     *
     * @param in
     *            The system.input line connected to the text file.
     *
     * @return wordList The list of words found by the parsing function.
     */
    private static Sequence<String> parser(SimpleReader in) {
        Sequence<String> words = new Sequence1L<String>();
        boolean atEnd = false;

        while (!atEnd) {
            String line = in.nextLine();
            int i = 0;

            while (line.length() != 0) {
                if (i >= line.length()) {
                    words.add(0, line);
                    line = "";
                } else if (!Character.isAlphabetic(line.charAt(i))) {
                    if (i != 0) {
                        String word = line.substring(0, i);
                        words.add(0, word.toLowerCase());

                        line = line.substring(i);
                        i = -1;
                    } else if (i == 0) {
                        line = line.substring(1);
                        i = -1;
                    }
                }
                i++;
            }
            atEnd = in.atEOS();
        }

        return words;
    }

    /**
     * Sort function sorts the words in the given sequence alphabetically and
     * then returns the sorted sequence.
     *
     * @param words
     *            The sequence of words found in the input file.
     *
     * @return words The sorted sequence of words.
     */
    private static Sequence<String> sort(Sequence<String> words) {
        boolean sorted = false;

        while (!sorted) {
            int length = words.length();
            int sortedLength = 0;

            for (int i = 0; i < words.length() - 1; i++) {
                for (int j = 0; j < words.length(); j++) {
                    if (words.entry(i).charAt(0) < words.entry(j).charAt(0)) {

                        String word1 = words.entry(i);
                        words.replaceEntry(i, words.entry(j));
                        words.replaceEntry(j, word1);

                    } else if (words.entry(i).equals(words.entry(j)) || words
                            .entry(i).charAt(0) > words.entry(j).charAt(0)) {
                        sortedLength++;
                    } else if (words.entry(i).charAt(0) == words.entry(j)
                            .charAt(0)) {
                        if (words.entry(i).length() < words.entry(j).length()) {
                            String word1 = words.entry(i);
                            words.replaceEntry(i, words.entry(j));
                            words.replaceEntry(j, word1);
                        } else if (words.entry(i).length( > 1 && words.entry(j).length() ){
           
                                || words.entry(i).charAt(1) < words.entry(j)
                                        .charAt(1)) {

                                String word1 = words.entry(i);
                                words.replaceEntry(i, words.entry(j));
                                words.replaceEntry(j, word1);
                           }
                        }
                    }
                }
            }

            if (length < sortedLength) {
                sorted = true;
            }

        }

        Sequence<String> sortedWords = new Sequence1L<String>();
        Set<String> totalWords = new Set1L<String>();

        for (int k = 0; k < words.length(); k++) {
            if (sortedWords.length() == 0) {
                sortedWords.add(0, words.entry(k));
                totalWords.add(words.entry(k));
            } else if (!totalWords.contains(words.entry(k))) {
                sortedWords.add(0, words.entry(k));
                totalWords.add(words.entry(k));
            }
        }

        sortedWords.flip();
        return sortedWords;
    }

    /**
     * Counting function intended to count the occurrences of each word in the
     * sequence and return a list of simple objects each containing the given
     * word and the number of times it was seen.
     *
     * @param words
     *            The sequence of words parsed from the text file.
     *
     * @return occurrences The list of maps each containing the word and its
     *         number of occurrences.
     */
    private static Map<String, Integer> counter(Sequence<String> words) {
        Map<String, Integer> occurrences = new Map1L<String, Integer>();

        for (int i = 0; i < words.length(); i++) {
            if (occurrences.hasKey(words.entry(i))) {
                int value = occurrences.value(words.entry(i));
                occurrences.remove(words.entry(i));
                occurrences.add(words.entry(i), value + 1);
            } else if (!occurrences.hasKey(words.entry(i))) {
                occurrences.add(words.entry(i), 1);
            }
        }

        return occurrences;
    }

    /**
     * Output function creates the output HTML file that is returned to the
     * client for UI viewing of the processed information.
     *
     * @param occurrences
     *            The list of maps containing the given words and their
     *            occurrences.
     *
     * @param name
     *            The name of the output file for the title.
     * @param out
     *            The system.output line for writing to a receiving file.
     */
    private static void outputFunction(Map<String, Integer> occurrences,
            String name, SimpleWriter out, Sequence<String> sorted) {

        out.println("<!DOCTYPE html>\r\n" + "<html lang=\"en\">\r\n"
                + "<head>\r\n" + "    <meta charset=\"UTF-8\">\r\n"
                + "    <meta name=\"viewport\" content=\"width=device-width,"
                + "initial-scale=1.0\">\r\n" + "    <title>Document</title>\r\n"
                + "</head>\r\n" + "<body><h1>" + name
                + "</h1><table><tr><th>Word</th><th>Occurrences</th></tr>");

        for (int i = 0; i < sorted.length(); i++) {
            out.println("<tr><td>" + sorted.entry(i) + "</td><td>"
                    + occurrences.value(sorted.entry(i)) + "</td></tr>");
        }

        out.println("</table></body></html>");

    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        out.println("Input File Name: ");
        String inputFile = in.nextLine();
        out.println("Output File Name: ");
        String outputFile = in.nextLine();

        SimpleReader input = new SimpleReader1L(inputFile);
        SimpleWriter output = new SimpleWriter1L(outputFile);

        Sequence<String> words = parser(input);
        Sequence<String> sorted = sort(words);
        Map<String, Integer> occurrences = counter(words);

        out.println(words);
        out.println(sorted);

        outputFunction(occurrences, outputFile, output, sorted);

        in.close();
        out.close();
    }

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-01-19 02:37:50.783
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-01-19 02:37:50.784
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2024-01-19 02:37:52.105
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import components.map.Map;
import components.map.Map1L;
import components.sequence.Sequence;
import components.sequence.Sequence1L;
import components.set.Set;
import components.set.Set1L;
import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;

/**
 * Simple HelloWorld program (clear of Checkstyle and SpotBugs warnings).
 *
 * @author Evan Frisbie
 */
public final class WordCounter {

    /**
     * No argument constructor--private to prevent instantiation.
     */
    private WordCounter() {
        // no code needed here
    }

    /**
     * Parsing function intended to parse words from input file into a sequence.
     * Assumes that words will be split my non-alphabetic characters. Assumes
     * that no word is split between lines.
     *
     * @param in
     *            The system.input line connected to the text file.
     *
     * @return wordList The list of words found by the parsing function.
     */
    private static Sequence<String> parser(SimpleReader in) {
        Sequence<String> words = new Sequence1L<String>();
        boolean atEnd = false;

        while (!atEnd) {
            String line = in.nextLine();
            int i = 0;

            while (line.length() != 0) {
                if (i >= line.length()) {
                    words.add(0, line);
                    line = "";
                } else if (!Character.isAlphabetic(line.charAt(i))) {
                    if (i != 0) {
                        String word = line.substring(0, i);
                        words.add(0, word.toLowerCase());

                        line = line.substring(i);
                        i = -1;
                    } else if (i == 0) {
                        line = line.substring(1);
                        i = -1;
                    }
                }
                i++;
            }
            atEnd = in.atEOS();
        }

        return words;
    }

    /**
     * Sort function sorts the words in the given sequence alphabetically and
     * then returns the sorted sequence.
     *
     * @param words
     *            The sequence of words found in the input file.
     *
     * @return words The sorted sequence of words.
     */
    private static Sequence<String> sort(Sequence<String> words) {
        boolean sorted = false;

        while (!sorted) {
            int length = words.length();
            int sortedLength = 0;

            for (int i = 0; i < words.length() - 1; i++) {
                for (int j = 0; j < words.length(); j++) {
                    if (words.entry(i).charAt(0) < words.entry(j).charAt(0)) {

                        String word1 = words.entry(i);
                        words.replaceEntry(i, words.entry(j));
                        words.replaceEntry(j, word1);

                    } else if (words.entry(i).equals(words.entry(j)) || words
                            .entry(i).charAt(0) > words.entry(j).charAt(0)) {
                        sortedLength++;
                    } else if (words.entry(i).charAt(0) == words.entry(j)
                            .charAt(0)) {
                        if (words.entry(i).length() < words.entry(j).length()) {
                            String word1 = words.entry(i);
                            words.replaceEntry(i, words.entry(j));
                            words.replaceEntry(j, word1);
                        } else if (words.entry(i).length( > 1 && words.entry(j).length() .){
           
                                || words.entry(i).charAt(1) < words.entry(j)
                                        .charAt(1)) {

                                String word1 = words.entry(i);
                                words.replaceEntry(i, words.entry(j));
                                words.replaceEntry(j, word1);
                           }
                        }
                    }
                }
            }

            if (length < sortedLength) {
                sorted = true;
            }

        }

        Sequence<String> sortedWords = new Sequence1L<String>();
        Set<String> totalWords = new Set1L<String>();

        for (int k = 0; k < words.length(); k++) {
            if (sortedWords.length() == 0) {
                sortedWords.add(0, words.entry(k));
                totalWords.add(words.entry(k));
            } else if (!totalWords.contains(words.entry(k))) {
                sortedWords.add(0, words.entry(k));
                totalWords.add(words.entry(k));
            }
        }

        sortedWords.flip();
        return sortedWords;
    }

    /**
     * Counting function intended to count the occurrences of each word in the
     * sequence and return a list of simple objects each containing the given
     * word and the number of times it was seen.
     *
     * @param words
     *            The sequence of words parsed from the text file.
     *
     * @return occurrences The list of maps each containing the word and its
     *         number of occurrences.
     */
    private static Map<String, Integer> counter(Sequence<String> words) {
        Map<String, Integer> occurrences = new Map1L<String, Integer>();

        for (int i = 0; i < words.length(); i++) {
            if (occurrences.hasKey(words.entry(i))) {
                int value = occurrences.value(words.entry(i));
                occurrences.remove(words.entry(i));
                occurrences.add(words.entry(i), value + 1);
            } else if (!occurrences.hasKey(words.entry(i))) {
                occurrences.add(words.entry(i), 1);
            }
        }

        return occurrences;
    }

    /**
     * Output function creates the output HTML file that is returned to the
     * client for UI viewing of the processed information.
     *
     * @param occurrences
     *            The list of maps containing the given words and their
     *            occurrences.
     *
     * @param name
     *            The name of the output file for the title.
     * @param out
     *            The system.output line for writing to a receiving file.
     */
    private static void outputFunction(Map<String, Integer> occurrences,
            String name, SimpleWriter out, Sequence<String> sorted) {

        out.println("<!DOCTYPE html>\r\n" + "<html lang=\"en\">\r\n"
                + "<head>\r\n" + "    <meta charset=\"UTF-8\">\r\n"
                + "    <meta name=\"viewport\" content=\"width=device-width,"
                + "initial-scale=1.0\">\r\n" + "    <title>Document</title>\r\n"
                + "</head>\r\n" + "<body><h1>" + name
                + "</h1><table><tr><th>Word</th><th>Occurrences</th></tr>");

        for (int i = 0; i < sorted.length(); i++) {
            out.println("<tr><td>" + sorted.entry(i) + "</td><td>"
                    + occurrences.value(sorted.entry(i)) + "</td></tr>");
        }

        out.println("</table></body></html>");

    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        out.println("Input File Name: ");
        String inputFile = in.nextLine();
        out.println("Output File Name: ");
        String outputFile = in.nextLine();

        SimpleReader input = new SimpleReader1L(inputFile);
        SimpleWriter output = new SimpleWriter1L(outputFile);

        Sequence<String> words = parser(input);
        Sequence<String> sorted = sort(words);
        Map<String, Integer> occurrences = counter(words);

        out.println(words);
        out.println(sorted);

        outputFunction(occurrences, outputFile, output, sorted);

        in.close();
        out.close();
    }

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2024-01-19 02:37:52.119
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2024-01-19 02:37:52.144
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2024-01-19 02:37:54.051
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import components.map.Map;
import components.map.Map1L;
import components.sequence.Sequence;
import components.sequence.Sequence1L;
import components.set.Set;
import components.set.Set1L;
import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;

/**
 * Simple HelloWorld program (clear of Checkstyle and SpotBugs warnings).
 *
 * @author Evan Frisbie
 */
public final class WordCounter {

    /**
     * No argument constructor--private to prevent instantiation.
     */
    private WordCounter() {
        // no code needed here
    }

    /**
     * Parsing function intended to parse words from input file into a sequence.
     * Assumes that words will be split my non-alphabetic characters. Assumes
     * that no word is split between lines.
     *
     * @param in
     *            The system.input line connected to the text file.
     *
     * @return wordList The list of words found by the parsing function.
     */
    private static Sequence<String> parser(SimpleReader in) {
        Sequence<String> words = new Sequence1L<String>();
        boolean atEnd = false;

        while (!atEnd) {
            String line = in.nextLine();
            int i = 0;

            while (line.length() != 0) {
                if (i >= line.length()) {
                    words.add(0, line);
                    line = "";
                } else if (!Character.isAlphabetic(line.charAt(i))) {
                    if (i != 0) {
                        String word = line.substring(0, i);
                        words.add(0, word.toLowerCase());

                        line = line.substring(i);
                        i = -1;
                    } else if (i == 0) {
                        line = line.substring(1);
                        i = -1;
                    }
                }
                i++;
            }
            atEnd = in.atEOS();
        }

        return words;
    }

    /**
     * Sort function sorts the words in the given sequence alphabetically and
     * then returns the sorted sequence.
     *
     * @param words
     *            The sequence of words found in the input file.
     *
     * @return words The sorted sequence of words.
     */
    private static Sequence<String> sort(Sequence<String> words) {
        boolean sorted = false;

        while (!sorted) {
            int length = words.length();
            int sortedLength = 0;

            for (int i = 0; i < words.length() - 1; i++) {
                for (int j = 0; j < words.length(); j++) {
                    if (words.entry(i).charAt(0) < words.entry(j).charAt(0)) {

                        String word1 = words.entry(i);
                        words.replaceEntry(i, words.entry(j));
                        words.replaceEntry(j, word1);

                    } else if (words.entry(i).equals(words.entry(j)) || words
                            .entry(i).charAt(0) > words.entry(j).charAt(0)) {
                        sortedLength++;
                    } else if (words.entry(i).charAt(0) == words.entry(j)
                            .charAt(0)) {
                        if (words.entry(i).length() < words.entry(j).length()) {
                            String word1 = words.entry(i);
                            words.replaceEntry(i, words.entry(j));
                            words.replaceEntry(j, word1);
                        } else if (words.entry(i).length( > 1 && words.entry(j).length() > 1){
           
                                || words.entry(i).charAt(1) < words.entry(j)
                                        .charAt(1)) {

                                String word1 = words.entry(i);
                                words.replaceEntry(i, words.entry(j));
                                words.replaceEntry(j, word1);
                           }
                        }
                    }
                }
            }

            if (length < sortedLength) {
                sorted = true;
            }

        }

        Sequence<String> sortedWords = new Sequence1L<String>();
        Set<String> totalWords = new Set1L<String>();

        for (int k = 0; k < words.length(); k++) {
            if (sortedWords.length() == 0) {
                sortedWords.add(0, words.entry(k));
                totalWords.add(words.entry(k));
            } else if (!totalWords.contains(words.entry(k))) {
                sortedWords.add(0, words.entry(k));
                totalWords.add(words.entry(k));
            }
        }

        sortedWords.flip();
        return sortedWords;
    }

    /**
     * Counting function intended to count the occurrences of each word in the
     * sequence and return a list of simple objects each containing the given
     * word and the number of times it was seen.
     *
     * @param words
     *            The sequence of words parsed from the text file.
     *
     * @return occurrences The list of maps each containing the word and its
     *         number of occurrences.
     */
    private static Map<String, Integer> counter(Sequence<String> words) {
        Map<String, Integer> occurrences = new Map1L<String, Integer>();

        for (int i = 0; i < words.length(); i++) {
            if (occurrences.hasKey(words.entry(i))) {
                int value = occurrences.value(words.entry(i));
                occurrences.remove(words.entry(i));
                occurrences.add(words.entry(i), value + 1);
            } else if (!occurrences.hasKey(words.entry(i))) {
                occurrences.add(words.entry(i), 1);
            }
        }

        return occurrences;
    }

    /**
     * Output function creates the output HTML file that is returned to the
     * client for UI viewing of the processed information.
     *
     * @param occurrences
     *            The list of maps containing the given words and their
     *            occurrences.
     *
     * @param name
     *            The name of the output file for the title.
     * @param out
     *            The system.output line for writing to a receiving file.
     */
    private static void outputFunction(Map<String, Integer> occurrences,
            String name, SimpleWriter out, Sequence<String> sorted) {

        out.println("<!DOCTYPE html>\r\n" + "<html lang=\"en\">\r\n"
                + "<head>\r\n" + "    <meta charset=\"UTF-8\">\r\n"
                + "    <meta name=\"viewport\" content=\"width=device-width,"
                + "initial-scale=1.0\">\r\n" + "    <title>Document</title>\r\n"
                + "</head>\r\n" + "<body><h1>" + name
                + "</h1><table><tr><th>Word</th><th>Occurrences</th></tr>");

        for (int i = 0; i < sorted.length(); i++) {
            out.println("<tr><td>" + sorted.entry(i) + "</td><td>"
                    + occurrences.value(sorted.entry(i)) + "</td></tr>");
        }

        out.println("</table></body></html>");

    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        out.println("Input File Name: ");
        String inputFile = in.nextLine();
        out.println("Output File Name: ");
        String outputFile = in.nextLine();

        SimpleReader input = new SimpleReader1L(inputFile);
        SimpleWriter output = new SimpleWriter1L(outputFile);

        Sequence<String> words = parser(input);
        Sequence<String> sorted = sort(words);
        Map<String, Integer> occurrences = counter(words);

        out.println(words);
        out.println(sorted);

        outputFunction(occurrences, outputFile, output, sorted);

        in.close();
        out.close();
    }

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2024-01-19 02:37:54.053
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2024-01-19 02:37:54.054
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2024-01-19 02:37:55.245
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import components.map.Map;
import components.map.Map1L;
import components.sequence.Sequence;
import components.sequence.Sequence1L;
import components.set.Set;
import components.set.Set1L;
import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;

/**
 * Simple HelloWorld program (clear of Checkstyle and SpotBugs warnings).
 *
 * @author Evan Frisbie
 */
public final class WordCounter {

    /**
     * No argument constructor--private to prevent instantiation.
     */
    private WordCounter() {
        // no code needed here
    }

    /**
     * Parsing function intended to parse words from input file into a sequence.
     * Assumes that words will be split my non-alphabetic characters. Assumes
     * that no word is split between lines.
     *
     * @param in
     *            The system.input line connected to the text file.
     *
     * @return wordList The list of words found by the parsing function.
     */
    private static Sequence<String> parser(SimpleReader in) {
        Sequence<String> words = new Sequence1L<String>();
        boolean atEnd = false;

        while (!atEnd) {
            String line = in.nextLine();
            int i = 0;

            while (line.length() != 0) {
                if (i >= line.length()) {
                    words.add(0, line);
                    line = "";
                } else if (!Character.isAlphabetic(line.charAt(i))) {
                    if (i != 0) {
                        String word = line.substring(0, i);
                        words.add(0, word.toLowerCase());

                        line = line.substring(i);
                        i = -1;
                    } else if (i == 0) {
                        line = line.substring(1);
                        i = -1;
                    }
                }
                i++;
            }
            atEnd = in.atEOS();
        }

        return words;
    }

    /**
     * Sort function sorts the words in the given sequence alphabetically and
     * then returns the sorted sequence.
     *
     * @param words
     *            The sequence of words found in the input file.
     *
     * @return words The sorted sequence of words.
     */
    private static Sequence<String> sort(Sequence<String> words) {
        boolean sorted = false;

        while (!sorted) {
            int length = words.length();
            int sortedLength = 0;

            for (int i = 0; i < words.length() - 1; i++) {
                for (int j = 0; j < words.length(); j++) {
                    if (words.entry(i).charAt(0) < words.entry(j).charAt(0)) {

                        String word1 = words.entry(i);
                        words.replaceEntry(i, words.entry(j));
                        words.replaceEntry(j, word1);

                    } else if (words.entry(i).equals(words.entry(j)) || words
                            .entry(i).charAt(0) > words.entry(j).charAt(0)) {
                        sortedLength++;
                    } else if (words.entry(i).charAt(0) == words.entry(j)
                            .charAt(0)) {
                        if (words.entry(i).length() < words.entry(j).length()) {
                            String word1 = words.entry(i);
                            words.replaceEntry(i, words.entry(j));
                            words.replaceEntry(j, word1);
                        } else if (words.entry(i).length( > 1 && words.entry(j).length() > 1){
           
                                || words.entry(i).charAt(1) < words.entry(j)
                                        .charAt(1)) {

                                String word1 = words.entry(i);
                                words.replaceEntry(i, words.entry(j));
                                words.replaceEntry(j, word1);
                           }
                        }
                    }
                }
            }

            if (length < sortedLength) {
                sorted = true;
            }

        }

        Sequence<String> sortedWords = new Sequence1L<String>();
        Set<String> totalWords = new Set1L<String>();

        for (int k = 0; k < words.length(); k++) {
            if (sortedWords.length() == 0) {
                sortedWords.add(0, words.entry(k));
                totalWords.add(words.entry(k));
            } else if (!totalWords.contains(words.entry(k))) {
                sortedWords.add(0, words.entry(k));
                totalWords.add(words.entry(k));
            }
        }

        sortedWords.flip();
        return sortedWords;
    }

    /**
     * Counting function intended to count the occurrences of each word in the
     * sequence and return a list of simple objects each containing the given
     * word and the number of times it was seen.
     *
     * @param words
     *            The sequence of words parsed from the text file.
     *
     * @return occurrences The list of maps each containing the word and its
     *         number of occurrences.
     */
    private static Map<String, Integer> counter(Sequence<String> words) {
        Map<String, Integer> occurrences = new Map1L<String, Integer>();

        for (int i = 0; i < words.length(); i++) {
            if (occurrences.hasKey(words.entry(i))) {
                int value = occurrences.value(words.entry(i));
                occurrences.remove(words.entry(i));
                occurrences.add(words.entry(i), value + 1);
            } else if (!occurrences.hasKey(words.entry(i))) {
                occurrences.add(words.entry(i), 1);
            }
        }

        return occurrences;
    }

    /**
     * Output function creates the output HTML file that is returned to the
     * client for UI viewing of the processed information.
     *
     * @param occurrences
     *            The list of maps containing the given words and their
     *            occurrences.
     *
     * @param name
     *            The name of the output file for the title.
     * @param out
     *            The system.output line for writing to a receiving file.
     */
    private static void outputFunction(Map<String, Integer> occurrences,
            String name, SimpleWriter out, Sequence<String> sorted) {

        out.println("<!DOCTYPE html>\r\n" + "<html lang=\"en\">\r\n"
                + "<head>\r\n" + "    <meta charset=\"UTF-8\">\r\n"
                + "    <meta name=\"viewport\" content=\"width=device-width,"
                + "initial-scale=1.0\">\r\n" + "    <title>Document</title>\r\n"
                + "</head>\r\n" + "<body><h1>" + name
                + "</h1><table><tr><th>Word</th><th>Occurrences</th></tr>");

        for (int i = 0; i < sorted.length(); i++) {
            out.println("<tr><td>" + sorted.entry(i) + "</td><td>"
                    + occurrences.value(sorted.entry(i)) + "</td></tr>");
        }

        out.println("</table></body></html>");

    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        out.println("Input File Name: ");
        String inputFile = in.nextLine();
        out.println("Output File Name: ");
        String outputFile = in.nextLine();

        SimpleReader input = new SimpleReader1L(inputFile);
        SimpleWriter output = new SimpleWriter1L(outputFile);

        Sequence<String> words = parser(input);
        Sequence<String> sorted = sort(words);
        Map<String, Integer> occurrences = counter(words);

        out.println(words);
        out.println(sorted);

        outputFunction(occurrences, outputFile, output, sorted);

        in.close();
        out.close();
    }

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-01-19 02:37:55.247
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-01-19 02:37:55.247
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-01-19 02:37:58.775
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import components.map.Map;
import components.map.Map1L;
import components.sequence.Sequence;
import components.sequence.Sequence1L;
import components.set.Set;
import components.set.Set1L;
import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;

/**
 * Simple HelloWorld program (clear of Checkstyle and SpotBugs warnings).
 *
 * @author Evan Frisbie
 */
public final class WordCounter {

    /**
     * No argument constructor--private to prevent instantiation.
     */
    private WordCounter() {
        // no code needed here
    }

    /**
     * Parsing function intended to parse words from input file into a sequence.
     * Assumes that words will be split my non-alphabetic characters. Assumes
     * that no word is split between lines.
     *
     * @param in
     *            The system.input line connected to the text file.
     *
     * @return wordList The list of words found by the parsing function.
     */
    private static Sequence<String> parser(SimpleReader in) {
        Sequence<String> words = new Sequence1L<String>();
        boolean atEnd = false;

        while (!atEnd) {
            String line = in.nextLine();
            int i = 0;

            while (line.length() != 0) {
                if (i >= line.length()) {
                    words.add(0, line);
                    line = "";
                } else if (!Character.isAlphabetic(line.charAt(i))) {
                    if (i != 0) {
                        String word = line.substring(0, i);
                        words.add(0, word.toLowerCase());

                        line = line.substring(i);
                        i = -1;
                    } else if (i == 0) {
                        line = line.substring(1);
                        i = -1;
                    }
                }
                i++;
            }
            atEnd = in.atEOS();
        }

        return words;
    }

    /**
     * Sort function sorts the words in the given sequence alphabetically and
     * then returns the sorted sequence.
     *
     * @param words
     *            The sequence of words found in the input file.
     *
     * @return words The sorted sequence of words.
     */
    private static Sequence<String> sort(Sequence<String> words) {
        boolean sorted = false;

        while (!sorted) {
            int length = words.length();
            int sortedLength = 0;

            for (int i = 0; i < words.length() - 1; i++) {
                for (int j = 0; j < words.length(); j++) {
                    if (words.entry(i).charAt(0) < words.entry(j).charAt(0)) {

                        String word1 = words.entry(i);
                        words.replaceEntry(i, words.entry(j));
                        words.replaceEntry(j, word1);

                    } else if (words.entry(i).equals(words.entry(j)) || words
                            .entry(i).charAt(0) > words.entry(j).charAt(0)) {
                        sortedLength++;
                    } else if (words.entry(i).charAt(0) == words.entry(j)
                            .charAt(0)) {
                        if (words.entry(i).length() < words.entry(j).length()) {
                            String word1 = words.entry(i);
                            words.replaceEntry(i, words.entry(j));
                            words.replaceEntry(j, word1);
                        } else if (words.entry(i).length( > 1 && words.entry(j).length() > 1){
           
                                || words.entry(i).charAt(1) < words.entry(j)
                                        .charAt(1)) {

                                String word1 = words.entry(i);
                                words.replaceEntry(i, words.entry(j));
                                words.replaceEntry(j, word1);
                           }
                        }
                    }
                }
            }

            if (length < sortedLength) {
                sorted = true;
            }

        }

        Sequence<String> sortedWords = new Sequence1L<String>();
        Set<String> totalWords = new Set1L<String>();

        for (int k = 0; k < words.length(); k++) {
            if (sortedWords.length() == 0) {
                sortedWords.add(0, words.entry(k));
                totalWords.add(words.entry(k));
            } else if (!totalWords.contains(words.entry(k))) {
                sortedWords.add(0, words.entry(k));
                totalWords.add(words.entry(k));
            }
        }

        sortedWords.flip();
        return sortedWords;
    }

    /**
     * Counting function intended to count the occurrences of each word in the
     * sequence and return a list of simple objects each containing the given
     * word and the number of times it was seen.
     *
     * @param words
     *            The sequence of words parsed from the text file.
     *
     * @return occurrences The list of maps each containing the word and its
     *         number of occurrences.
     */
    private static Map<String, Integer> counter(Sequence<String> words) {
        Map<String, Integer> occurrences = new Map1L<String, Integer>();

        for (int i = 0; i < words.length(); i++) {
            if (occurrences.hasKey(words.entry(i))) {
                int value = occurrences.value(words.entry(i));
                occurrences.remove(words.entry(i));
                occurrences.add(words.entry(i), value + 1);
            } else if (!occurrences.hasKey(words.entry(i))) {
                occurrences.add(words.entry(i), 1);
            }
        }

        return occurrences;
    }

    /**
     * Output function creates the output HTML file that is returned to the
     * client for UI viewing of the processed information.
     *
     * @param occurrences
     *            The list of maps containing the given words and their
     *            occurrences.
     *
     * @param name
     *            The name of the output file for the title.
     * @param out
     *            The system.output line for writing to a receiving file.
     */
    private static void outputFunction(Map<String, Integer> occurrences,
            String name, SimpleWriter out, Sequence<String> sorted) {

        out.println("<!DOCTYPE html>\r\n" + "<html lang=\"en\">\r\n"
                + "<head>\r\n" + "    <meta charset=\"UTF-8\">\r\n"
                + "    <meta name=\"viewport\" content=\"width=device-width,"
                + "initial-scale=1.0\">\r\n" + "    <title>Document</title>\r\n"
                + "</head>\r\n" + "<body><h1>" + name
                + "</h1><table><tr><th>Word</th><th>Occurrences</th></tr>");

        for (int i = 0; i < sorted.length(); i++) {
            out.println("<tr><td>" + sorted.entry(i) + "</td><td>"
                    + occurrences.value(sorted.entry(i)) + "</td></tr>");
        }

        out.println("</table></body></html>");

    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        out.println("Input File Name: ");
        String inputFile = in.nextLine();
        out.println("Output File Name: ");
        String outputFile = in.nextLine();

        SimpleReader input = new SimpleReader1L(inputFile);
        SimpleWriter output = new SimpleWriter1L(outputFile);

        Sequence<String> words = parser(input);
        Sequence<String> sorted = sort(words);
        Map<String, Integer> occurrences = counter(words);

        out.println(words);
        out.println(sorted);

        outputFunction(occurrences, outputFile, output, sorted);

        in.close();
        out.close();
    }

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-01-19 02:37:58.776
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-01-19 02:37:58.776
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2291)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2238)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3100)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3570)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3153)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)
!SESSION 2024-01-19 11:28:16.902 -----------------------------------------------
eclipse.buildId=4.28.0.20230608-1200
java.version=17.0.9
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2024-01-19 11:28:37.790
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2024-01-19 11:28:37.790
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.e4.ui.workbench 4 0 2024-01-19 11:28:46.187
!MESSAGE Unable to retrieve the bundle from the URI: bundleclass://org.eclipse.recommenders.news.rcp/org.eclipse.recommenders.internal.news.rcp.toolbar.NewsToolControl

!ENTRY org.eclipse.egit.ui 2 0 2024-01-19 11:28:46.543
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\efris'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2024-01-23 01:52:56.662 -----------------------------------------------
eclipse.buildId=4.28.0.20230608-1200
java.version=17.0.9
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2024-01-23 01:53:12.568
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2024-01-23 01:53:12.568
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.e4.ui.workbench 4 0 2024-01-23 01:53:16.642
!MESSAGE Unable to retrieve the bundle from the URI: bundleclass://org.eclipse.recommenders.news.rcp/org.eclipse.recommenders.internal.news.rcp.toolbar.NewsToolControl

!ENTRY org.eclipse.egit.ui 2 0 2024-01-23 01:53:16.909
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\efris'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY com.github.spotbugs.plugin.eclipse 1 0 2024-01-23 01:57:55.938
!MESSAGE creating new bug collection: C:\Users\efris\Desktop\Workspace_II\workspace\.metadata\.plugins\com.github.spotbugs.plugin.eclipse\SequenceHW.fbwarnings.xml
